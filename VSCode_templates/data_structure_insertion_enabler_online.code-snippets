{
    "tranxuanbach": {
        "prefix": "data_structure_insertion_enabler_online",
        "body": [
            "// Support insertion in a static data structure, assuming query results can be obtained from its disjoint subsets",
            "template<class B, class C>",
            "struct data_structure_insertion_enabler_online{",
            "\tint n; // Elements should lie in range [0, n).",
            "\tvector<int> element;",
            "\tB build; // build(id, a): build the DS with updates in a and assign it to bucket id.",
            "\tC clear; // clear(id): assign empty DS to bucket id.",
            "\tdata_structure_insertion_enabler_online(int n, B build, C clear): n(n), build(build), clear(clear){",
            "\t\tassert(n >= 0);",
            "\t}",
            "\t// Insert update i.",
            "\t// Amortized O(clear() + build(n) / n)",
            "\tvoid insert(int i){",
            "\t\tassert(0 <= i && i < n);",
            "\t\telement.push_back(i);",
            "\t\tint id = __builtin_ctz((int)element.size());",
            "\t\tbuild(id, {(int)element.size() - (1 << id), (int)element.size()});",
            "\t\tfor(auto idprev = 0; idprev < id; ++ idprev) clear(idprev);",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}