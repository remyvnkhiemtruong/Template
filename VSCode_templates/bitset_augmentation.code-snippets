{
    "tranxuanbach": {
        "prefix": "bitset_augmentation",
        "body": [
            "#define private public",
            "#include <bitset>",
            "#undef private",
            "#include <x86intrin.h>",
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "// Addition",
            "template<size_t _Nw> void _M_do_add(_Base_bitset<_Nw> &x, const _Base_bitset<_Nw> &y){",
            "\tfor(int i = 0, c = 0; i < _Nw; ++ i) c = _addcarry_u64(c, x._M_w[i], y._M_w[i], (unsigned long long *)&x._M_w[i]);",
            "}",
            "void _M_do_add(_Base_bitset<1> &x, const _Base_bitset<1> &y){ x._M_w += y._M_w; }",
            "void _M_do_add(_Base_bitset<0> &x, const _Base_bitset<0> &y){ }",
            "template<size_t _Nb> bitset<_Nb> &operator+=(bitset<_Nb> &x, const bitset<_Nb> &y){",
            "\t_M_do_add(x, y);",
            "\tx._M_do_sanitize();",
            "\treturn x;",
            "}",
            "template<size_t _Nb> bitset<_Nb> operator+(bitset<_Nb> x, const bitset<_Nb> &y){ return x += y; }",
            "",
            "// Subtraction",
            "template<size_t _Nw>",
            "void _M_do_sub(_Base_bitset<_Nw> &x, const _Base_bitset<_Nw> &y){",
            "\tfor(int i = 0, c = 0; i < _Nw; ++ i) c = _subborrow_u64(c, x._M_w[i], y._M_w[i], (unsigned long long *)&x._M_w[i]);",
            "}",
            "void _M_do_sub(_Base_bitset<1> &x, const _Base_bitset<1> &y){ x._M_w -= y._M_w; }",
            "void _M_do_sub(_Base_bitset<0> &x, const _Base_bitset<0> &y){ }",
            "template<size_t _Nb> bitset<_Nb> &operator-=(bitset<_Nb> &x, const bitset<_Nb> &y){ ",
            "\t_M_do_sub(x, y);",
            "\tx._M_do_sanitize();",
            "\treturn x;",
            "}",
            "template<size_t _Nb> bitset<_Nb> operator-(bitset<_Nb> x, const bitset<_Nb> &y){ return x -= y; }",
            "",
            "// Comparision",
            "template<size_t _Nw> bool _Do_compare(const _Base_bitset<_Nw> &x, const _Base_bitset<_Nw> &y, int type){",
            "\tfor(int i = _Nw - 1; i >= 0; -- i) if(x._M_w[i] != y._M_w[i]) return type < 2 ? x._M_w[i] < y._M_w[i] : x._M_w[i] > y._M_w[i];",
            "\treturn type & 1;",
            "}",
            "bool _Do_compare(const _Base_bitset<1> &x, const _Base_bitset<1> &y, int type){ return x._M_w != y._M_w ? type < 2 ? x._M_w < y._M_w : x._M_w > y._M_w : type & 1; }",
            "bool _Do_compare(const _Base_bitset<0> &x, const _Base_bitset<0> &y, int type){ return type & 1; }",
            "#define Compare_Op(op, type) \\",
            "template<size_t _Nb> bool operator op(const bitset<_Nb> &x, const bitset<_Nb> &y){ \\",
            "\treturn _Do_compare(x, y, type); \\",
            "}",
            "Compare_Op(<, 0) Compare_Op(<=, 1) Compare_Op(>, 2) Compare_Op(>=, 3)",
            "#undef Compare_Op",
            "",
            "// Bit Manipulations",
            "#define _GLIBCXX_BITSET_BITS_PER_WORD  (__CHAR_BIT__ * __SIZEOF_LONG__)",
            "template<size_t _Nw> int _M_do_find_last(const _Base_bitset<_Nw> &x, int __not_found){",
            "\tfor(int i = _Nw - 1; i >= 0; -- i){",
            "\t\tauto __thisword = x._M_w[i];",
            "\t\tif(__thisword) return i * _GLIBCXX_BITSET_BITS_PER_WORD + __lg(__thisword);",
            "\t}",
            "\treturn __not_found;",
            "}",
            "int _M_do_find_last(const _Base_bitset<1> &x, int __not_found){ return x._M_w ? __lg(x._M_w) : __not_found; }",
            "int _M_do_find_last(const _Base_bitset<0> &x, int __not_found){ return __not_found; }",
            "template<size_t _Nw> int _M_do_find_prev(const _Base_bitset<_Nw> &x, int next, int __not_found){",
            "\t-- next;",
            "\tif(next < 0) return __not_found;",
            "\tint i = _Base_bitset<_Nw>::_S_whichword(next);",
            "\tauto __thisword = x._M_w[i];",
            "\t__thisword &= ~0ULL >> _GLIBCXX_BITSET_BITS_PER_WORD - 1 - _Base_bitset<_Nw>::_S_whichbit(next);",
            "\tif(__thisword) return i * _GLIBCXX_BITSET_BITS_PER_WORD + __lg(__thisword);",
            "\t-- i;",
            "\tfor(; i >= 0; -- i) if(__thisword = x._M_w[i]) return i * _GLIBCXX_BITSET_BITS_PER_WORD + __lg(__thisword);",
            "\treturn __not_found;",
            "}",
            "int _M_do_find_prev(const _Base_bitset<1> &x, int next, int __not_found){",
            "\t-- next;",
            "\tif(next < 0) return __not_found;",
            "\tauto __x = x._M_w << _GLIBCXX_BITSET_BITS_PER_WORD - 1 - next;",
            "\treturn __x ? __lg(__x) + next - _GLIBCXX_BITSET_BITS_PER_WORD + 1 : __not_found;",
            "}",
            "int _M_do_find_prev(const _Base_bitset<0> &x, int next, int __not_found){ return __not_found; }",
            "template<size_t _Nb> int _Find_last(const bitset<_Nb> &x){ return _M_do_find_last(x, -1); }",
            "template<size_t _Nb> int _Find_prev(const bitset<_Nb> &x, int next){ return _M_do_find_prev(x, next, -1); }",
            "#undef _GLIBCXX_BITSET_BITS_PER_WORD"
        ],
        "description": "tranxuanbach"
    }
}