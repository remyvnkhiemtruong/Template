{
    "tranxuanbach": {
        "prefix": "wavelet_matrix",
        "body": [
            "// nor orz",
            "// Requires succinct_dictionary",
            "template<bool HAS_QUERY, class B, class T, class F, class I>",
            "struct wavelet_matrix_base{",
            "\tint n, lg;",
            "\tB sigma;",
            "\tvector<succinct_dictionary> data;",
            "\tvector<vector<T>> aggregate;",
            "\tF TT; // commutative group operation",
            "\tT T_id; // commutative group identity",
            "\tI Tinv; // commutative group inverse",
            "\twavelet_matrix_base(F TT, T T_id, I Tinv): TT(TT), T_id(T_id), Tinv(Tinv){ }",
            "\twavelet_matrix_base &operator=(const wavelet_matrix_base &wm){",
            "\t\tn = wm.n;",
            "\t\tlg = wm.lg;",
            "\t\tsigma = wm.sigma;",
            "\t\tdata = wm.data;",
            "\t\treturn *this;",
            "\t}",
            "\t// O(n * log(sigma)) time and O(n * log(sigma) / w) memory",
            "\tvoid build(const vector<B> &key, B sigma){",
            "\t\tstatic_assert(!HAS_QUERY);",
            "\t\tassert(sigma > 0);",
            "\t\tfor(auto x: key) assert(0 <= x && x < sigma);",
            "\t\tn = (int)key.size();",
            "\t\tthis->sigma = sigma;",
            "\t\tlg = __lg(sigma) + (B(1) << lg != sigma) + 1;",
            "\t\tdata.assign(lg, succinct_dictionary(n));",
            "\t\tvector<B> cur = key, next(n);",
            "\t\tfor(auto h = lg; h --;){",
            "\t\t\tfor(auto i = 0; i < n; ++ i) if(cur[i] >> h & 1) data[h].set(i);",
            "\t\t\tdata[h].build();",
            "\t\t\tarray it{next.begin(), next.begin() + data[h].zeros};",
            "\t\t\tfor(auto i = 0; i < n; ++ i) *it[data[h][i]] ++ = cur[i];",
            "\t\t\tswap(cur, next);",
            "\t\t}",
            "\t}",
            "\t// O(n * log(sigma)) time and O(n * log(sigma)) memory",
            "\ttemplate<class U>",
            "\tvoid build(const vector<B> &key, B sigma, const vector<U> &value){",
            "\t\tstatic_assert(HAS_QUERY);",
            "\t\tassert(sigma > 0);",
            "\t\tfor(auto x: key) assert(0 <= x && x < sigma);",
            "\t\tn = (int)key.size();",
            "\t\tthis->sigma = sigma;",
            "\t\tlg = __lg(sigma) + (B(1) << lg != sigma) + 1;",
            "\t\tdata.assign(lg, succinct_dictionary(n));",
            "\t\taggregate.assign(lg + 1, vector<T>(n + 1, T_id));",
            "\t\tvector<pair<B, T>> cur(n), next(n);",
            "\t\tfor(auto i = 0; i < n; ++ i) cur[i] = {key[i], value[i]};",
            "\t\tfor(auto h = lg; h --;){",
            "\t\t\tfor(auto i = 0; i < n; ++ i) if(cur[i].first >> h & 1) data[h].set(i);",
            "\t\t\tdata[h].build();",
            "\t\t\tarray it{next.begin(), next.begin() + data[h].zeros};",
            "\t\t\tfor(auto i = 0; i < n; ++ i){",
            "\t\t\t\t*it[data[h][i]] ++ = cur[i];",
            "\t\t\t\taggregate[h + 1][i + 1] = data[h][i] ? aggregate[h + 1][i] : TT(aggregate[h + 1][i], cur[i].second);",
            "\t\t\t}",
            "\t\t\tswap(cur, next);",
            "\t\t}",
            "\t\tfor(auto i = 0; i < n; ++ i) aggregate[0][i + 1] = TT(aggregate[0][i], cur[i].second);",
            "\t}",
            "\t// Returns the frequency of x in the interval [ql, qr)",
            "\t// O(log(sigma))",
            "\tint freq(int ql, int qr, int x) const{",
            "\t\tassert(0 <= ql && ql <= qr && qr <= n);",
            "\t\tassert(0 <= x);",
            "\t\tif(ql == qr || sigma <= x) return 0;",
            "\t\tfor(auto h = lg; h --; ){",
            "\t\t\tauto lcnt = data[h].rank0(ql), rcnt = data[h].rank0(qr);",
            "\t\t\tif(~x >> h & 1) ql = lcnt, qr = rcnt;",
            "\t\t\telse ql += data[h].zeros - lcnt, qr += data[h].zeros - rcnt;",
            "\t\t}",
            "\t\treturn qr - ql;",
            "\t}",
            "\t// Returns the frequency of x in the interval [ql, qr), along with the sum of their values",
            "\t// O(log(sigma))",
            "\tpair<int, T> freq_query(int ql, int qr, int x) const{",
            "\t\tstatic_assert(HAS_QUERY);",
            "\t\tassert(0 <= ql && ql <= qr && qr <= n);",
            "\t\tassert(0 <= x);",
            "\t\tif(ql == qr || sigma <= x) return {0, T_id};",
            "\t\tfor(auto h = lg; h --; ){",
            "\t\t\tauto lcnt = data[h].rank0(ql), rcnt = data[h].rank0(qr);",
            "\t\t\tif(~x >> h & 1) ql = lcnt, qr = rcnt;",
            "\t\t\telse ql += data[h].zeros - lcnt, qr += data[h].zeros - rcnt;",
            "\t\t}",
            "\t\treturn {qr - ql, TT(aggregate[0][qr], Tinv(aggregate[0][ql]))};",
            "\t}",
            "\t// Returns the number of occurrences of numbers in [0, xr) in the interval [ql, qr)",
            "\t// O(log(sigma))",
            "\tint count(int ql, int qr, B xr) const{",
            "\t\tassert(0 <= ql && ql <= qr && qr <= n);",
            "\t\tassert(0 <= xr);",
            "\t\tif(sigma <= xr) return qr - ql;",
            "\t\tif(xr == 0) return 0;",
            "\t\tint cnt = 0;",
            "\t\tfor(auto h = lg; h --; ){",
            "\t\t\tauto lcnt = data[h].rank0(ql), rcnt = data[h].rank0(qr);",
            "\t\t\tif(~xr >> h & 1) ql = lcnt, qr = rcnt;",
            "\t\t\telse{",
            "\t\t\t\tcnt += rcnt - lcnt;",
            "\t\t\t\tql += data[h].zeros - lcnt, qr += data[h].zeros - rcnt;",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn cnt;",
            "\t}",
            "\t// Returns the number of occurrences of numbers in [0, xr) in the interval [ql, qr), along with the sum of their values",
            "\t// O(log(sigma))",
            "\tpair<int, T> count_query(int ql, int qr, B xr) const{",
            "\t\tstatic_assert(HAS_QUERY);",
            "\t\tassert(0 <= ql && ql <= qr && qr <= n);",
            "\t\tassert(0 <= xr);",
            "\t\tif(xr == 0) return {0, T_id};",
            "\t\txr = min(sigma, xr);",
            "\t\tint cnt = 0;",
            "\t\tT sum = T_id;",
            "\t\tfor(auto h = lg; h --; ){",
            "\t\t\tauto lcnt = data[h].rank0(ql), rcnt = data[h].rank0(qr);",
            "\t\t\tif(~xr >> h & 1) ql = lcnt, qr = rcnt;",
            "\t\t\telse{",
            "\t\t\t\tcnt += rcnt - lcnt;",
            "\t\t\t\tsum = TT(sum, TT(aggregate[h + 1][qr], Tinv(aggregate[h + 1][ql])));",
            "\t\t\t\tql += data[h].zeros - lcnt, qr += data[h].zeros - rcnt;",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn {cnt, sum};",
            "\t}",
            "\t// Returns the number of occurrences of numbers in [xl, xr) in the interval [ql, qr)",
            "\t// O(log(sigma))",
            "\tint count(int ql, int qr, B xl, B xr) const{",
            "\t\tassert(xl <= xr);",
            "\t\tif(xl == xr) return 0;",
            "\t\treturn count(ql, qr, xr) - count(ql, qr, xl);",
            "\t}",
            "\t// Returns the number of occurrences of numbers in [xl, xr) in the interval [ql, qr), along with the sum of their values",
            "\t// O(log(sigma))",
            "\tpair<int, T> count_query(int ql, int qr, B xl, B xr) const{",
            "\t\tstatic_assert(HAS_QUERY);",
            "\t\tassert(xl <= xr);",
            "\t\tif(xl == xr) return {0, T_id};",
            "\t\tauto [lcnt, lsum] = count_query(ql, qr, xl);",
            "\t\tauto [rcnt, rsum] = count_query(ql, qr, xr);",
            "\t\treturn {rcnt - lcnt, TT(rsum, Tinv(lsum))};",
            "\t}",
            "\t// Find the k-th smallest element in the interval [ql, qr), sigma if no such element",
            "\t// O(log(sigma))",
            "\tB find_by_order(int ql, int qr, int k) const{",
            "\t\tassert(0 <= k);",
            "\t\tif(k >= qr - ql) return sigma;",
            "\t\tB x = 0;",
            "\t\tfor(auto h = lg; h --; ){",
            "\t\t\tauto lcnt = data[h].rank0(ql), rcnt = data[h].rank0(qr);",
            "\t\t\tif(k < rcnt - lcnt) ql = lcnt, qr = rcnt;",
            "\t\t\telse {",
            "\t\t\t\tk -= rcnt - lcnt;",
            "\t\t\t\tx |= (B)1 << h;",
            "\t\t\t\tql += data[h].zeros - lcnt;",
            "\t\t\t\tqr += data[h].zeros - rcnt;",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn x;",
            "\t}",
            "\t// Find the k-th smallest element in the interval [ql, qr), sigma if no such element, along with the sum of values of the k smallest elements (prioritizing smaller index)",
            "\t// O(log(sigma))",
            "\tpair<B, T> find_by_order_query(int ql, int qr, int k) const{",
            "\t\tassert(0 <= k);",
            "\t\tk = min(k, qr - ql);",
            "\t\tB x = 0;",
            "\t\tT sum = T_id;",
            "\t\tfor(auto h = lg; h --; ){",
            "\t\t\tauto lcnt = data[h].rank0(ql), rcnt = data[h].rank0(qr);",
            "\t\t\tif(k < rcnt - lcnt) ql = lcnt, qr = rcnt;",
            "\t\t\telse {",
            "\t\t\t\tk -= rcnt - lcnt;",
            "\t\t\t\tx |= (B)1 << h;",
            "\t\t\t\tsum = TT(sum, TT(aggregate[h + 1][qr], Tinv(aggregate[h + 1][ql])));",
            "\t\t\t\tql += data[h].zeros - lcnt;",
            "\t\t\t\tqr += data[h].zeros - rcnt;",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn {x, TT(sum, TT(aggregate[0][ql + k], Tinv(aggregate[0][ql])))};",
            "\t}",
            "\t// Find the k-th smallest element in the interval [ql, qr) among elements >= xl, sigma if no such element",
            "\t// O(log(sigma))",
            "\tB find_by_order(int ql, int qr, B xl, int k) const{",
            "\t\tassert(0 <= ql && ql <= qr && qr <= n);",
            "\t\tassert(0 <= xl && 0 <= k);",
            "\t\tif(xl >= sigma) return sigma;",
            "\t\tk += count(ql, qr, 0, xl);",
            "\t\tif(k >= qr - ql) return sigma;",
            "\t\treturn find_by_order(ql, qr, k);",
            "\t}",
            "\t// Find the k-th smallest element in the interval [ql, qr) among elements >= xl, sigma if no such element, along with the sum of values of the k smallest elements (prioritizing smaller index)",
            "\t// O(log(sigma))",
            "\tpair<B, T> find_by_order_query(int ql, int qr, B xl, int k) const{",
            "\t\tassert(0 <= ql && ql <= qr && qr <= n);",
            "\t\tassert(0 <= xl && 0 <= k);",
            "\t\tif(xl >= sigma) return {sigma, T_id};",
            "\t\tauto [cnt, sum] = count_query(ql, qr, 0, xl);",
            "\t\tk += cnt;",
            "\t\tauto [x, sum2] = find_by_order_query(ql, qr, k);",
            "\t\treturn {x, TT(sum2, Tinv(sum))};",
            "\t}",
            "\t// Find the smallest element >= x, sigma if no such element",
            "\t// O(log(sigma))",
            "\tB lower_bound(int ql, int qr, B x) const{",
            "\t\tassert(0 <= x);",
            "\t\treturn find_by_order(ql, qr, x, 0);",
            "\t}",
            "\t// Find the smallest element > x, sigma if no such element",
            "\t// O(log(sigma))",
            "\tB upper_bound(int ql, int qr, B x) const{",
            "\t\tassert(0 <= x);",
            "\t\treturn find_by_order(ql, qr, x + 1, 0);",
            "\t}",
            "\t// Find the largest element <= x, -1 if no such element",
            "\t// O(log(sigma))",
            "\tB reverse_lower_bound(int ql, int qr, B x) const{",
            "\t\tassert(0 <= x);",
            "\t\tint cnt = count(ql, qr, x);",
            "\t\treturn cnt ? find_by_order(ql, qr, cnt - 1) : -1;",
            "\t}",
            "\t// Find the largest element < x, -1 if no such element",
            "\t// O(log(sigma))",
            "\tB reverse_upper_bound(int ql, int qr, B x) const{",
            "\t\tassert(0 <= x);",
            "\t\tint cnt = count(ql, qr, x + 1);",
            "\t\treturn cnt ? find_by_order(ql, qr, cnt - 1) : -1;",
            "\t}",
            "};",
            "",
            "template<class B>",
            "auto make_wavelet_matrix(){",
            "\treturn wavelet_matrix_base<false, B, int, plus<>, negate<>>(plus<>(), 0, negate<>());",
            "}",
            "// Supports query",
            "template<class B, class T = long long, class F = plus<>, class I = negate<>>",
            "auto make_Q_wavelet_matrix(F TT = plus<>(), T T_id = 0, I Tinv = negate<>()){",
            "\treturn wavelet_matrix_base<true, B, T, F, I>(TT, T_id, Tinv);",
            "}"
        ],
        "description": "tranxuanbach"
    }
}