{
    "tranxuanbach": {
        "prefix": "bfs_tree",
        "body": [
            "// Requires graph",
            "template<typename T>",
            "struct bfs_tree{",
            "\tint n;",
            "\tgraph<T> *g;",
            "\tvector<int> pv, pe, depth;",
            "\tvoid init(graph<T> *h){",
            "\t\tg = h;",
            "\t\tn = g->n;",
            "\t\tpv.assign(n, -1);",
            "\t\tpe.assign(n, -1);",
            "\t\tdepth.assign(n, -1);",
            "\t\tattempt = 0;",
            "\t}",
            "\tvoid clear(){",
            "\t\tpv.clear();",
            "\t\tpe.clear();",
            "\t\tdepth.clear();",
            "\t}",
            "\tint attempt = 0;",
            "\tvoid bfs(int u){",
            "\t\t++ attempt;",
            "\t\tdepth[u] = 0;",
            "\t\tpv[u] = pe[u] = -1;",
            "\t\tdeque<int> dq{u};",
            "\t\twhile(!dq.empty()){",
            "\t\t\tint u = dq.front(); dq.pop_front();",
            "\t\t\tfor(auto id: g->adj[u]){",
            "\t\t\t\tif(g->ignore && g->ignore(id)){",
            "\t\t\t\t\tcontinue;",
            "\t\t\t\t}",
            "\t\t\t\tauto &e = g->edges[id];",
            "\t\t\t\tint v = u ^ e.from ^ e.to;",
            "\t\t\t\tif(!~depth[v]){",
            "\t\t\t\t\tdepth[v] = depth[u] + 1;",
            "\t\t\t\t\tpv[v] = u;",
            "\t\t\t\t\tpe[v] = id;",
            "\t\t\t\t\tdq.push_back(v);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tvoid bfs_all(){",
            "\t\tfor(int u = 0; u < n; ++ u){",
            "\t\t\tif(!~depth[u]){",
            "\t\t\t\tbfs(u);",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}