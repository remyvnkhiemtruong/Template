{
    "tranxuanbach": {
        "prefix": "find_4_cycles",
        "body": [
            "// O(n + m * sqrt(m) + th) for graphs without loops or multiedges",
            "void find_4_cycles(int n, const vector<array<int, 2>> &edge, auto process, int th = 1){",
            "\tint m = (int)edge.size();",
            "\tvector<int> deg(n), order, pos(n);",
            "\tvector<vector<int>> appear(m + 1), adj(n), found(n);",
            "\tfor(auto [u, v]: edge) ++ deg[u], ++ deg[v];",
            "\tfor(auto u = 0; u < n; ++ u) appear[deg[u]].push_back(u);",
            "\tfor(auto d = m; d >= 0; -- d) order.insert(order.end(), appear[d].begin(), appear[d].end());",
            "\tfor(auto i = 0; i < n; ++ i) pos[order[i]] = i;",
            "\tfor(auto i = 0; i < m; ++ i){",
            "\t\tint u = pos[edge[i][0]], v = pos[edge[i][1]];",
            "\t\tadj[u].push_back(v), adj[v].push_back(u);",
            "\t}",
            "\tfor(auto u = 0; u < n; ++ u){",
            "\t\tfor(auto v: adj[u]) if(u < v) for(auto w: adj[v]) if(u < w) found[w].clear();",
            "\t\tfor(auto v: adj[u]) if(u < v) for(auto w: adj[v]) if(u < w){",
            "\t\t\tfor(auto x: found[w]){",
            "\t\t\t\tif(!(th --)) return;",
            "\t\t\t\tprocess(order[u], order[v], order[w], order[x]);",
            "\t\t\t}",
            "\t\t\tfound[w].push_back(v);",
            "\t\t}",
            "\t}",
            "}"
        ],
        "description": "tranxuanbach"
    }
}