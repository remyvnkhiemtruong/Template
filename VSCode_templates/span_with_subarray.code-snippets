{
    "tranxuanbach": {
        "prefix": "span_with_subarray",
        "body": [
            "// Let M = {0, ..., m-1}.",
            "// Given",
            "// 1. a cost funciton with cost(l, r) either -1, indicating invalid, or in M for 0 <= l <= r <= n, and",
            "// 2. a monoid operation TT over M with identity T_id,",
            "// returns the list of values x in sorted order where 0 <= x < m and there exists a non-negative integer k and a sequence of indices 0 <= l_0 <= r_0 <= ... <= l_{k-1} <= r_{k-1} <= n such that cost(l_i, r_i) are all valid and x = TT(cost(l_0, r_0), ..., cost(l_{k-1}, r_{k-1})).",
            "// O(n^2 + m^2) with n*(n+1)/2 cost() calls and O(m^2) TT() calls.",
            "vector<int> span_with_subarray(int n, int m, auto cost, auto TT, int T_id){",
            "\tassert(0 <= n);",
            "\tassert(0 <= T_id && T_id < m);",
            "\tvector extent(n + 1, vector<int>(m, n + 1));",
            "\tvector<int> require(m, n + 1);",
            "\tfor(auto l = n; l >= 0; -- l){",
            "\t\tfor(auto r = n; r >= l; -- r){",
            "\t\t\tint x = cost(l, r);",
            "\t\t\tif(!~x) continue;",
            "\t\t\tassert(0 <= x && x < m);",
            "\t\t\textent[l][x] = r;",
            "\t\t}",
            "\t\tfor(auto x = 0; x < m; ++ x){",
            "\t\t\tif(l < n) extent[l][x] = min(extent[l][x], extent[l + 1][x]);",
            "\t\t\trequire[x] = min(require[x], extent[l][x]);",
            "\t\t}",
            "\t}",
            "\tvector<int> done(m, false);",
            "\twhile(true){",
            "\t\tint s = -1;",
            "\t\tfor(auto x = 0; x < m; ++ x) if(!done[x] && (!~s || require[s] > require[x])) s = x;",
            "\t\tif(!~s || require[s] > n) break;",
            "\t\tdone[s] = true;",
            "\t\tfor(auto x = 0; x < m; ++ x){",
            "\t\t\tint y = TT(s, x);",
            "\t\t\tif(extent[require[s]][x] < require[y]) require[y] = extent[require[s]][x];",
            "\t\t}",
            "\t}",
            "\tvector<int> span;",
            "\tfor(auto x = 0; x < m; ++ x) if(require[x] <= n) span.push_back(x);",
            "\treturn span;",
            "};"
        ],
        "description": "tranxuanbach"
    }
}