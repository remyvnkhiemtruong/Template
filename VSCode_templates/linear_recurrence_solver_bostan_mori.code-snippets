{
    "tranxuanbach": {
        "prefix": "linear_recurrence_solver_bostan_mori",
        "body": [
            "// Store the linear recurrence relation of form \\sum_{t<=i<t+n} coef[i-t] * init[i] = init[t+n]",
            "// T must be of modular type",
            "// Requires modular, number_theoric_transform, and rational_polynomial_single_term_extraction",
            "template<class T, class ntt>",
            "struct linear_recurrence_solver_bostan_mori{",
            "\tint n;",
            "\tvector<T> init, coef, p, q;",
            "\tlinear_recurrence_solver_bostan_mori(const vector<T> &init, const vector<T> &coef): n((int)coef.size()), init(init), coef(coef), p(n), q(n + 1, 1){",
            "\t\tassert(coef.size() == init.size());",
            "\t\tfor(auto i = 0; i < n; ++ i) q[n - i] = -coef[i];",
            "\t\tp = ntt::convolute(init, q);",
            "\t\tp.resize(n);",
            "\t}",
            "\t// Berlekamp Massey Algorithm",
            "\t// Find a minimum linear recurrence relation",
            "\t// T must ba a field",
            "\t// O(n^2 + n * log(mod)))",
            "\tlinear_recurrence_solver_bostan_mori(const vector<T> &s){",
            "\t\tint sz = (int)size(s);",
            "\t\tvector<T> b = {-1};",
            "\t\tcoef = {-1};",
            "\t\tT y = 1;",
            "\t\tfor(auto t = 1; t <= sz; ++ t){",
            "\t\t\tint l = (int)coef.size(), m = (int)b.size();",
            "\t\t\tT x = 0;",
            "\t\t\tfor(auto i = 0; i < l; ++ i) x += coef[i] * s[t - l + i];",
            "\t\t\tb.push_back(0);",
            "\t\t\t++ m;",
            "\t\t\tif(x == 0) continue;",
            "\t\t\tT freq = x / y;",
            "\t\t\tif(l < m){",
            "\t\t\t\tauto tmp = coef;",
            "\t\t\t\tcoef.insert(coef.begin(), m - l, 0);",
            "\t\t\t\tfor(auto i = 0; i < m; ++ i) coef[m - 1 - i] -= freq * b[m - 1 - i];",
            "\t\t\t\tb = tmp;",
            "\t\t\t\ty = x;",
            "\t\t\t}",
            "\t\t\telse for(auto i = 0; i < m; ++ i) coef[l - 1 - i] -= freq * b[m - 1 - i];",
            "\t\t}",
            "\t\tcoef.pop_back();",
            "\t\t*this = linear_recurrence_solver_bostan_mori(vector<T>(s.begin(), s.begin() + coef.size()), coef);",
            "\t}",
            "\t// O(n * log(n) * log(i))",
            "\ttemplate<class U>",
            "\tT operator[](U i) const{",
            "\t\tassert(0 <= i);",
            "\t\tif(i < n) return init[i];",
            "\t\treturn rational_polynomial_single_term_extraction<T, U, ntt>(p, q, i);",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}