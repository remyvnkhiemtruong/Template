{
    "tranxuanbach": {
        "prefix": "line_container",
        "body": [
            "// Source: KACTL",
            "template<class T, bool GET_MAX = true>",
            "struct line_container{",
            "\tstruct line_type{",
            "\t\tT k, d; // Constant term, Slope",
            "\t\tmutable T p;",
            "\t\tbool operator<(const line_type &otr) const{",
            "\t\t\treturn d < otr.d;",
            "\t\t}",
            "\t\tbool operator<(T x) const{",
            "\t\t\treturn p < x;",
            "\t\t}",
            "\t\tfriend ostream &operator<<(ostream &out, const line_type &L){",
            "\t\t\treturn out << \"{\" << L.d << \", \" << L.k << \", \" << L.p << \"}\";",
            "\t\t}",
            "\t};",
            "\tmultiset<line_type, less<>> data;",
            "\tT inf = numeric_limits<T>::max() / 2;",
            "\tT div(T a, T b){",
            "\t\tif constexpr(is_integral<T>::value) return a / b - ((a ^ b) < 0 && a % b);",
            "\t\telse return a / b;",
            "\t}",
            "\ttemplate<class It>",
            "\tbool isect(It x, It y){",
            "\t\tif(y == data.end()){",
            "\t\t\tx->p = inf;",
            "\t\t\treturn false;",
            "\t\t}",
            "\t\tif(x->d == y->d) x->p = x->k > y->k ? inf : -inf;",
            "\t\telse x->p = div(y->k - x->k, x->d - y->d);",
            "\t\treturn x->p >= y->p;",
            "\t}",
            "\tint size() const{",
            "\t\treturn (int)data.size();",
            "\t}",
            "\tbool empty() const{",
            "\t\treturn data.empty();",
            "\t}",
            "\tvoid clear(){",
            "\t\tdata.clear();",
            "\t}",
            "\t// O(log(n))",
            "\tvoid push(line_type L){",
            "\t\tif(!GET_MAX){",
            "\t\t\tL.d = -L.d;",
            "\t\t\tL.k = -L.k;",
            "\t\t}",
            "\t\tL.p = 0;",
            "\t\tauto z = data.insert(L), y = z ++, x = y;",
            "\t\twhile(isect(y, z)) z = data.erase(z);",
            "\t\tif(x != data.begin() && isect(-- x, y)) isect(x, y = data.erase(y));",
            "\t\twhile((y = x) != data.begin() && (-- x)->p >= y->p) isect(x, data.erase(y));",
            "\t}",
            "\t// O(log(n))",
            "\tT query(T x){",
            "\t\tassert(!data.empty());",
            "\t\tauto l = *data.lower_bound(x);",
            "\t\treturn (l.k + l.d * x) * (GET_MAX ? 1 : -1);",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}