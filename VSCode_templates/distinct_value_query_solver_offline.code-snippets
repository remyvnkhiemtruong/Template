{
    "tranxuanbach": {
        "prefix": "distinct_value_query_solver_offline",
        "body": [
            "template<class T = int>",
            "struct distinct_value_query_solver_offline{",
            "\tint n, sigma;",
            "\tvector<tuple<int, int, T>> event;",
            "\tvector<array<int, 3>> queries;",
            "\t// 0 <= a[i] < sigma must hold for all 0 <= i < n",
            "\t// O(n * log(n) + sigma)",
            "\tdistinct_value_query_solver_offline(const vector<int> &a, int sigma): distinct_value_query_solver_offline(a, vector<T>(sigma, 1)){ }",
            "\t// 0 <= a[i] < sigma must hold for all 0 <= i < n",
            "\t// O(n * log(n) + sigma)",
            "\tdistinct_value_query_solver_offline(const vector<int> &a, const vector<T> &w): n((int)a.size()), sigma((int)w.size()), event(n){",
            "\t\tfor(auto &x: a) assert(0 <= x && x < sigma);",
            "\t\tvector<int> last(w.size(), -1);",
            "\t\tfor(auto i = 0; i < n; ++ i){",
            "\t\t\tevent[i] = {last[a[i]], i, w[a[i]]};",
            "\t\t\tlast[a[i]] = i;",
            "\t\t}",
            "\t}",
            "\tdistinct_value_query_solver_offline &operator=(const distinct_value_query_solver_offline &dvq){",
            "\t\tn = dvq.n;",
            "\t\tsigma = dvq.sigma;",
            "\t\tevent = dvq.event;",
            "\t\tqueries = dvq.queries;",
            "\t\treturn *this;",
            "\t}",
            "\tvoid query(int qi, int ql, int qr){",
            "\t\tassert(0 <= ql && ql <= qr && qr <= n);",
            "\t\tqueries.push_back({ql, qr, qi});",
            "\t}",
            "\t// First, prepare a data structure of length sigma, initialized with identities",
            "\t// set(p, x): A[p] <- x, A[p] is always identity beforehand",
            "\t// query(l, r): return sum in A[l:r)",
            "\t// answer(qi, x): answer to query qi is sum of w[x] over all distinct values x in a[ql, qr)",
            "\t// O(n * (log(n) + update()) + q * (log(q) + query() + answer()))",
            "\tvoid solve(auto set, auto query, auto answer){",
            "\t\tsort(queries.begin(), queries.end());",
            "\t\tsort(event.begin(), event.end());",
            "\t\tint i = 0;",
            "\t\tfor(auto &q: queries){",
            "\t\t\twhile(i < (int)event.size() && get<0>(event[i]) < q[0]){",
            "\t\t\t\tset(get<1>(event[i]), get<2>(event[i]));",
            "\t\t\t\t++ i;",
            "\t\t\t}",
            "\t\t\tanswer(q[2], query(q[0], q[1]));",
            "\t\t}",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}