{
    "tranxuanbach": {
        "prefix": "monoid",
        "body": [
            "// Implicitly assumes that monoid() returns the additive identity.",
            "template<class T>",
            "struct monoid{",
            "\t// Modify begin",
            "\tT data = 0;",
            "\tbool operator==(const monoid &x) const{",
            "\t\treturn data == x.data;",
            "\t}",
            "\tmonoid &operator+=(const monoid &x){",
            "\t\tdata += x.data;",
            "\t\treturn *this;",
            "\t}",
            "\ttemplate<class U>",
            "\tmonoid &operator*=(U e){",
            "\t\tassert(e >= 0);",
            "\t\tmonoid res{};",
            "\t\tfor(; e; e >>= 1, *this = *this * *this) if(e & 1) res += *this;",
            "\t\treturn *this = res;",
            "\t}",
            "\ttemplate<class ostream_t>",
            "\tfriend ostream_t &operator<<(ostream_t &out, const monoid &x){",
            "\t\treturn out << x.data;",
            "\t}",
            "\t// Modify end",
            "\tbool operator!=(const monoid &x) const{",
            "\t\treturn !(*this == x);",
            "\t}",
            "\tmonoid operator+(const monoid &x) const{",
            "\t\treturn monoid(*this) += x;",
            "\t}",
            "\tmonoid operator+() const{",
            "\t\treturn *this;",
            "\t}",
            "\ttemplate<class U>",
            "\tmonoid operator*(U e) const{",
            "\t\treturn monoid(*this) *= e;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}