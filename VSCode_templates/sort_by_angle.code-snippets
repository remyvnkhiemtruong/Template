{
    "tranxuanbach": {
        "prefix": "sort_by_angle",
        "body": [
            "// Requires point",
            "template<class P>",
            "struct compare_by_angle{",
            "\tconst P origin;",
            "\tcompare_by_angle(const P &origin = P()): origin(origin){ }",
            "\tbool operator()(const P &p, const P &q) const{",
            "\t\treturn doubled_signed_area(origin, p, q) > 0;",
            "\t}",
            "};",
            "template<class It, class P>",
            "void sort_by_angle(It begin, It end, const P &origin){",
            "\tbegin = partition(begin, end, [&origin](const decltype(*begin) &point){ return point == origin; });",
            "\tauto pivot = partition(begin, end, [&origin](const decltype(*begin) &point) { return point > origin; });",
            "\tcompare_by_angle<P> cmp(origin);",
            "\tsort(begin, pivot, cmp), sort(pivot, end, cmp);",
            "}"
        ],
        "description": "tranxuanbach"
    }
}