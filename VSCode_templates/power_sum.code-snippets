{
    "tranxuanbach": {
        "prefix": "power_sum",
        "body": [
            "// Returns 0^n + ... + (base-1)^n",
            "// O(n * log(n) + inverse_in_T())",
            "template<class T>",
            "T power_sum(T base, int n){",
            "\tassert(n >= 0);",
            "\tvector<T> value(n + 2), fact(n + 2, 1), invfact(n + 2, 1), pref(n + 3, 1), suff(n + 3, 1);",
            "\tfor(auto x = 0; x <= n; ++ x){",
            "\t\tT temp = x;",
            "\t\tvalue[x + 1] = 1;",
            "\t\tfor(auto e = n; e; e >>= 1, temp *= temp) if(e & 1) value[x + 1] *= temp;",
            "\t\tvalue[x + 1] += value[x];",
            "\t\tfact[x + 1] = fact[x] * (x + 1);",
            "\t\tpref[x + 1] *= pref[x] * (base - x);",
            "\t}",
            "\tinvfact[n + 1] = 1 / fact[n + 1];",
            "\tfor(auto x = n; x >= 2; -- x) invfact[x] = invfact[x + 1] * (x + 1);",
            "\tfor(auto x = n + 1; x >= 0; -- x) suff[x] = suff[x + 1] * (base - x);",
            "\tT res = 0;",
            "\tfor(auto x = 0; x <= n + 1; ++ x) res += value[x] * pref[x] * suff[x + 1] * invfact[x] * invfact[n + 1 - x] * (n + 1 - x & 1 ? -1 : 1);",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}