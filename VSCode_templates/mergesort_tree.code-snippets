{
    "tranxuanbach": {
        "prefix": "mergesort_tree",
        "body": [
            "template<class T, class Compare = less<>>",
            "struct mergesort_tree{",
            "\tint n;",
            "\tCompare cmp;",
            "\tvector<vector<T>> data;",
            "\t// O(n * log(n))",
            "\tmergesort_tree(const vector<T> &a, Compare cmp = less<>()): n((int)a.size()), data(n << 1), cmp(cmp){",
            "\t\tfor(auto i = n; i < n << 1; ++ i) data[i] = {a[i - n]};",
            "\t\tfor(auto i = n - 1; i > 0; -- i) merge(data[i << 1].begin(), data[i << 1].end(), data[i << 1 | 1].begin(), data[i << 1 | 1].end(), back_inserter(data[i]), cmp);",
            "\t}",
            "\t// O(log^2(n))",
            "\tint count_less(int l, int r, T k) const{",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\tint res = 0;",
            "\t\tfor(l += n, r += n; l < r; l >>= 1, r >>= 1){",
            "\t\t\tif(l & 1) res += lower_bound(data[l].begin(), data[l].end(), k, cmp) - data[l].begin(), ++ l;",
            "\t\t\tif(r & 1) -- r, res += lower_bound(data[r].begin(), data[r].end(), k, cmp) - data[r].begin();",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// O(log^2(n))",
            "\tint count_equal_or_less(int l, int r, T k) const{",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\tint res = 0;",
            "\t\tfor(l += n, r += n; l < r; l >>= 1, r >>= 1){",
            "\t\t\tif(l & 1) res += upper_bound(data[l].begin(), data[l].end(), k, cmp) - data[l].begin(), ++ l;",
            "\t\t\tif(r & 1) -- r, res += upper_bound(data[r].begin(), data[r].end(), k, cmp) - data[r].begin();",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// O(log^2(n))",
            "\tint count_greater(int l, int r, T k) const{",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\tint res = 0;",
            "\t\tfor(l += n, r += n; l < r; l >>= 1, r >>= 1){",
            "\t\t\tif(l & 1) res += data[l].end() - upper_bound(data[l].begin(), data[l].end(), k, cmp), ++ l;",
            "\t\t\tif(r & 1) -- r, res += data[r].end() - upper_bound(data[r].begin(), data[r].end(), k, cmp);",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// O(log^2(n))",
            "\tint count_equal_or_greater(int l, int r, T k) const{",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\tint res = 0;",
            "\t\tfor(l += n, r += n; l < r; l >>= 1, r >>= 1){",
            "\t\t\tif(l & 1) res += data[l].end() - lower_bound(data[l].begin(), data[l].end(), k, cmp), ++ l;",
            "\t\t\tif(r & 1) -- r, res += data[r].end() - lower_bound(data[r].begin(), data[r].end(), k, cmp);",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// O(log^2(n))",
            "\tint count_within(int l, int r, T kl, T kr) const{",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\tint res = 0;",
            "\t\tfor(l += n, r += n; l < r; l >>= 1, r >>= 1){",
            "\t\t\tif(l & 1) res += lower_bound(data[l].begin(), data[l].end(), kr, cmp) - lower_bound(data[l].begin(), data[l].end(), kl, cmp), ++ l;",
            "\t\t\tif(r & 1) -- r, res += lower_bound(data[r].begin(), data[r].end(), kr, cmp) - lower_bound(data[r].begin(), data[r].end(), kl, cmp);",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// O(SZ * log(n)) where SZ is the size of the answer",
            "\tvector<T> get_sorted_list(int l, int r) const{",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\tvector<T> res;",
            "\t\tfor(l += n, r += n; l < r; l >>= 1, r >>= 1){",
            "\t\t\tif(auto sz = (int)res.size(); l & 1) res.insert(res.end(), data[l].begin(), data[l].end()), inplace_merge(res.begin(), res.begin() + sz, res.end(), cmp), ++ l;",
            "\t\t\tif(auto sz = (int)res.size(); r & 1) -- r, res.insert(res.begin(), data[r].begin(), data[r].end()), inplace_merge(res.begin(), res.end() - sz, res.end(), cmp);",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}