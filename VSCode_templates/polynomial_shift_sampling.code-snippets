{
    "tranxuanbach": {
        "prefix": "polynomial_shift_sampling",
        "body": [
            "// Given the unique polynomial P of degree < n with P(i)=p[i] for all 0<=i<n",
            "// Compute P(delta+i) for all 0<=i<m",
            "// O(polymul(max(n, m)) + max(n, m) * log(max(n, m)))",
            "// Requires modular and number_theoric_transform",
            "template<class T, class FFT = ntt>",
            "vector<T> polynomial_shift_sampling(const vector<T> &p, T delta, int m){",
            "\tint n = (int)p.size();",
            "\tassert(n >= 1 && m >= 0);",
            "\tvector<T> fact(n + 1, 1), invfact(n + 1, 1);",
            "\tfor(auto x = 2; x <= n; ++ x) fact[x] = fact[x - 1] * x;",
            "\tinvfact[n] = T(1) / fact[n];",
            "\tfor(auto x = n - 1; x >= 2; -- x) invfact[x] = invfact[x + 1] * (x + 1);",
            "\tvector<T> q(n), r(n + m);",
            "\tfor(auto i = 0; i < n; ++ i) q[i] = p[i] * invfact[i] * invfact[n - 1 - i] * (n - i & 1 ? 1 : -1);",
            "\tfor(auto i = 0; i < n + m; ++ i) r[i] = delta + i - (n - 1) ? T(1) / (delta + i - (n - 1)) : T(0);",
            "\tvector<T> res = FFT::convolute(q, r);",
            "\tres = vector<T>(res.begin() + n - 1, res.begin() + n - 1 + m);",
            "\tvector<T> seg(n + m << 1);",
            "\tfor(auto i = 0; i < n + m; ++ i) seg[n + m + i] = delta - (n - 1) + i;",
            "\tfor(auto i = n + m - 1; i; -- i) seg[i] = seg[i << 1] * seg[i << 1 | 1];",
            "\tfor(auto i = 0; i < m; ++ i){",
            "\t\tif((delta + i).data < n){",
            "\t\t\tres[i] = p[(delta + i).data];",
            "\t\t\tcontinue;",
            "\t\t}",
            "\t\tfor(auto l = n + m + i, r = 2 * n + m + i; l < r; l >>= 1, r >>= 1){",
            "\t\t\tif(l & 1) res[i] *= seg[l], ++ l;",
            "\t\t\tif(r & 1) -- r, res[i] *= seg[r];",
            "\t\t}",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}