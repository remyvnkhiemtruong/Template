{
    "tranxuanbach": {
        "prefix": "distinct_value_query_solver_online",
        "body": [
            "struct distinct_value_query_solver_online{",
            "\tint n;",
            "\t// 0 <= a[i] < sigma must hold for all 0 <= i < n",
            "\t// build(a): prepare a static data structure to process the following queries: given l, r, and k, count the number of elements in a[ql, qr) less than k",
            "\t// O(n * log(sigma) + sigma)",
            "\tdistinct_value_query_solver_online(const vector<int> &a, int sigma, auto build): n((int)a.size()){",
            "\t\tfor(auto &x: a) assert(0 <= x && x < sigma);",
            "\t\tvector<int> seen(sigma), aux(n);",
            "\t\tfor(auto i = 0; i < n; ++ i){",
            "\t\t\taux[i] = seen[a[i]];",
            "\t\t\tseen[a[i]] = i + 1;",
            "\t\t}",
            "\t\tbuild(aux);",
            "\t}",
            "\t// 0 <= a[i] < sigma must hold for all 0 <= i < n",
            "\t// build(a, w): prepare a static data structure to process the following queries: given ql, qr, and k, find the aggregate of w[i] over all indices i with ql <= i < qr and a[i] < k",
            "\t// O(n * log(sigma) + sigma)",
            "\ttemplate<class T>",
            "\tdistinct_value_query_solver_online(const vector<int> &a, const vector<T> &w, auto build): n((int)a.size()){",
            "\t\tint sigma = (int)w.size();",
            "\t\tfor(auto &x: a) assert(0 <= x && x < sigma);",
            "\t\tvector<int> seen(sigma), aux(n);",
            "\t\tvector<T> aux_w(n);",
            "\t\tfor(auto i = 0; i < n; ++ i){",
            "\t\t\taux[i] = seen[a[i]];",
            "\t\t\taux_w[i] = w[a[i]];",
            "\t\t\tseen[a[i]] = i + 1;",
            "\t\t}",
            "\t\tbuild(aux, w);",
            "\t}",
            "\t// Find the sum of w[x] over all distinct values x appearing in a[ql, qr)",
            "\t// _query(ql, qr, k): returns the answer to the query defined by (ql, qr, k)",
            "\t// O(log(n))",
            "\tint query(int ql, int qr, auto _query) const{",
            "\t\tassert(0 <= ql && ql <= qr && qr <= n);",
            "\t\treturn _query(ql, qr, ql + 1);",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}