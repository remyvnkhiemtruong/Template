{
    "tranxuanbach": {
        "prefix": "aho_corasic",
        "body": [
            "template<class Str, int lim = 128, class Str::value_type PCH = '$'>",
            "struct aho_corasic{",
            "\ttypedef class Str::value_type Char;",
            "\tstruct node{",
            "\t\tint par, link = -1, elink = -1;",
            "\t\tChar cpar;",
            "\t\tvector<int> next, go;",
            "\t\tbool isleaf = false;",
            "\t\tnode(int par = -1, Char pch = PCH): par(par), cpar(pch), next(lim, -1), go(lim, -1){ }",
            "\t\tlong long val = 0;",
            "\t\tbool mark = false;",
            "\t};",
            "\tvector<node> state = vector<node>(1);",
            "\tint insert(const Str &s){",
            "\t\tint u = 0;",
            "\t\tfor(auto &c: s){",
            "\t\t\tif(state[u].next[c] == -1){",
            "\t\t\t\tstate[u].next[c] = int(state.size());",
            "\t\t\t\tstate.emplace_back(u, c);",
            "\t\t\t}",
            "\t\t\tu = state[u].next[c];",
            "\t\t}",
            "\t\tstate[u].isleaf = true;",
            "\t\treturn u;",
            "\t}",
            "\tint get_link(int u){",
            "\t\tif(state[u].link == -1){",
            "\t\t\tif(!u || !state[u].par) state[u].link = 0;",
            "\t\t\telse state[u].link = go(get_link(state[u].par), state[u].cpar);",
            "\t\t}",
            "\t\treturn state[u].link;",
            "\t}",
            "\tint get_elink(int u){",
            "\t\tif(state[u].elink == -1){",
            "\t\t\tif(!u || !get_link(u)) state[u].elink = 0;",
            "\t\t\telse if(state[get_link(u)].isleaf) state[u].elink = get_link(u);",
            "\t\t\telse state[u].elink = get_elink(get_link(u));",
            "\t\t}",
            "\t\treturn state[u].elink;",
            "\t}",
            "\tint go(int u, const Char &c){",
            "\t\tif(state[u].go[c] == -1){",
            "\t\t\tif(state[u].next[c] != -1) state[u].go[c] = state[u].next[c];",
            "\t\t\telse state[u].go[c] = u ? go(get_link(u), c) : u;",
            "\t\t}",
            "\t\treturn state[u].go[c];",
            "\t}",
            "\tint go(const Str &s){",
            "\t\tint u = 0;",
            "\t\tfor(auto &c: s) u = go(u, c);",
            "\t\treturn u;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}