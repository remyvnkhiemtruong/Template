{
    "tranxuanbach": {
        "prefix": "centroids",
        "body": [
            "struct centroid_processor{",
            "\tint n;",
            "\tvector<int> size;",
            "\tvector<int> was;",
            "\tint attempt;",
            "\tvoid init(int n){",
            "\t\tassert(n >= 1);",
            "\t\tthis->n = n;",
            "\t\tsize.assign(n, -1);",
            "\t\twas.assign(n, -2);",
            "\t\tattempt = -1;",
            "\t}",
            "\t// g must be a forest",
            "\ttemplate<class T>",
            "\tint find_a_centroid(const graph<T> &g, int src){",
            "\t\tassert(g.n <= n);",
            "\t\tassert(0 <= src && src < n);",
            "\t\t++ attempt;",
            "\t\tauto dfs_size = [&](auto self, int u)->void{",
            "\t\t\twas[u] = attempt;",
            "\t\t\tsize[u] = 1;",
            "\t\t\tfor(auto id: g.adj[u]){",
            "\t\t\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\t\t\tint v = g(u, id);",
            "\t\t\t\tif(was[v] == attempt) continue;",
            "\t\t\t\tself(self, v);",
            "\t\t\t\tsize[u] += size[v];",
            "\t\t\t}",
            "\t\t};",
            "\t\tdfs_size(dfs_size, src);",
            "\t\tfor(auto u = src, pe = -1; ; ){",
            "\t\t\tfor(auto id: g.adj[u]){",
            "\t\t\t\tif(id == pe || g.ignore && g.ignore(id)) continue;",
            "\t\t\t\tint v = g(u, id);",
            "\t\t\t\tif(size[v] > size[src] >> 1){",
            "\t\t\t\t\tu = v, pe = id;",
            "\t\t\t\t\tgoto NEXT;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\treturn u;",
            "\t\t\tNEXT:;",
            "\t\t}",
            "\t\tassert(false);",
            "\t}",
            "\t// g must be a forest",
            "\ttemplate<class T>",
            "\tvector<int> find_all_centroids(const graph<T> &g, int src){",
            "\t\tassert(g.n <= n);",
            "\t\tassert(0 <= src && src < n);",
            "\t\tint u = find_a_centroid(g, src);",
            "\t\tfor(auto id: g.adj[u]){",
            "\t\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\t\tint v = g(u, id);",
            "\t\t\tassert(was[v] == attempt);",
            "\t\t\tif(size[u] < size[v]) continue;",
            "\t\t\tif(size[src] - size[v] <= size[src] >> 1) return {u, v};",
            "\t\t}",
            "\t\treturn {u};",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}