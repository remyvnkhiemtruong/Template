{
    "tranxuanbach": {
        "prefix": "mo_2d_hilbert_curve_ordering",
        "body": [
            "// WARNING: Outperformed by the regular Mo",
            "// Reorder N 2D points with max_x - min_x <= X, max_y - min_y <= Y",
            "// so that sum(abs(xi - x(i+1)) + abs(yi - y(i+1)) is small",
            "// and process queries on the new order.",
            "// O(2^level * sqrt(N)) inc_x, dec_x calls, inc_y, and dec_y calls",
            "// Requires hilbert_curve_2d",
            "struct mo_2d_hilbert_curve_ordering{",
            "\thilbert_curve_2d<int, long long> curve;",
            "\tvector<tuple<long long, int, int, int>> points;",
            "\tmo_2d_hilbert_curve_ordering(int level): curve(level){ }",
            "\tvoid query(int qi, int x, int y){",
            "\t\tpoints.push_back({curve.order(x, y), x, y, qi});",
            "\t}",
            "\t// starting from (0, 0), access each points and execute queries",
            "\tvoid solve(auto inc_x, auto dec_x, auto inc_y, auto dec_y, auto process){",
            "\t\tsort(points.begin(), points.end());",
            "\t\tint x = 0, y = 0;",
            "\t\tfor(auto &[ignore, qx, qy, qi]: points){",
            "\t\t\twhile(qx < x) dec_x(), -- x;",
            "\t\t\twhile(y < qy) inc_y(), ++ y;",
            "\t\t\twhile(x < qx) inc_x(), ++ x;",
            "\t\t\twhile(qy < y) dec_y(), -- y;",
            "\t\t\tprocess(qi);",
            "\t\t}",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}