{
    "tranxuanbach": {
        "prefix": "aho_corasic_automaton_unfixed",
        "body": [
            "// Note: construction of an AC-automaton is offline.",
            "// O(log(sigma) * (sum of length)) where sigma is the size of alphabets",
            "template<class Char_Type>",
            "struct aho_corasic_automaton_unfixed{",
            "\t// Begin States",
            "\tvector<int> len{0}, link{-1}, exit_link{-1}, is_terminal{false};",
            "\tvector<map<Char_Type, int>> next{{}};",
            "\t// End States",
            "\tint new_state(){",
            "\t\tlen.push_back(0);",
            "\t\tlink.push_back(-1);",
            "\t\texit_link.push_back(-1);",
            "\t\tis_terminal.push_back(false);",
            "\t\tnext.push_back({});",
            "\t\treturn (int)len.size() - 1;",
            "\t}",
            "\taho_corasic_automaton_unfixed(){ }",
            "\taho_corasic_automaton_unfixed(const vector<vector<Char_Type>> &patterns){",
            "\t\tfor(auto s: patterns){",
            "\t\t\tint u = 0;",
            "\t\t\tfor(auto c: s){",
            "\t\t\t\tif(!next[u].count(c)) next[u][c] = new_state(), len[next[u][c]] = len[u] + 1;",
            "\t\t\t\tu = next[u][c];",
            "\t\t\t}",
            "\t\t\tis_terminal[u] = true;",
            "\t\t}",
            "\t\tdeque<int> dq{0};",
            "\t\twhile(!dq.empty()){",
            "\t\t\tint u = dq.front(); dq.pop_front();",
            "\t\t\tfor(auto [c, v]: next[u]){",
            "\t\t\t\tlink[v] = next_state(link[u], c);",
            "\t\t\t\texit_link[v] = is_terminal[link[v]] ? link[v] : exit_link[link[v]];",
            "\t\t\t\tdq.push_back(v); ",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tint next_state(int u, Char_Type c){",
            "\t\twhile(~u && !next[u].count(c)) u = link[u];",
            "\t\treturn ~u ? next[u][c] : 0;",
            "\t}",
            "\tint size() const{ // # of states",
            "\t\treturn (int)len.size();",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}