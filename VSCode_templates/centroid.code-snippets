{
    "tranxuanbach": {
        "prefix": "centroid",
        "body": [
            "// Requires graph and dfs_tree",
            "template<typename T> // Returns a centroid of the tree starting from r, O(V)",
            "int centroid(dfs_tree<T> &dt, int sz, int u = 0, int pe = -1){ // dfs_tree.dfs(r) must be called before this.",
            "\tfor(auto id: dt.g->adj[u]){",
            "\t\tif(id == pe || dt.g->ignore && dt.g->ignore(id)){",
            "\t\t\tcontinue;",
            "\t\t}",
            "\t\tauto &e = dt.g->edges[id];",
            "\t\tint v = u ^ e.from ^ e.to;",
            "\t\tif(dt.sz[v] > sz / 2) return centroid(dt, sz, v, id);",
            "\t}",
            "\treturn u;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}