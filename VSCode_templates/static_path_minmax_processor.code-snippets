{
    "tranxuanbach": {
        "prefix": "static_path_minmax_processor",
        "body": [
            "// Requires graph, disjoint_set, and range_minmax_query_solver",
            "template<class T, class Compare = less<>>",
            "struct static_path_minmax_processor{",
            "\tint n, m;",
            "\tT minf;",
            "\tvector<int> pos;",
            "\trange_minmax_query_solver<pair<T, int>, Compare> rmq;",
            "\t// O((|V| + |E|) log |V|)",
            "\tstatic_path_minmax_processor(const graph<T> &g, Compare cmp = less<>(), T minf = numeric_limits<T>::min()): n(g.n), m((int)g.edge.size()), minf(minf), pos(n){",
            "\t\tvector<int> order(m);",
            "\t\tiota(order.begin(), order.end(), 0);",
            "\t\tif(g.ignore) order.erase(remove_if(order.begin(), order.end(), [&](int id){ return g.ignore(id); }), order.end());",
            "\t\tsort(order.rbegin(), order.rend(), [&](int i, int j){ return cmp(g.edge[i].cost, g.edge[j].cost); });",
            "\t\tvector<list<pair<int, pair<T, int>>>> lines(n);",
            "\t\tfor(auto u = 0; u < g.n; ++ u) lines[u].push_back({u, {minf, -1}});",
            "\t\tdisjoint_set dsu(n);",
            "\t\tfor(auto id: order){",
            "\t\t\tauto [u, v, w] = g.edge[id];",
            "\t\t\tu = dsu.root(u), v = dsu.root(v), dsu.merge(u, v);",
            "\t\t\tif(dsu.root(u) != u) swap(u, v);",
            "\t\t\tlines[u].back().second = {w, id}, lines[u].splice(lines[u].end(), lines[v]);",
            "\t\t}",
            "\t\tfor(auto u = 1; u < n; ++ u) lines[0].splice(lines[0].end(), lines[u]);",
            "\t\tvector<pair<T, int>> line(n);",
            "\t\tauto it = lines[0].begin();",
            "\t\tfor(auto i = 0; i < n; ++ i, ++ it) pos[it->first] = i, line[i] = it->second;",
            "\t\trmq = {line, cmp};",
            "\t}",
            "\t// Returns the minimum edge weight along the u-v path, assuming u and v lies on the same component",
            "\t// numeric_limits<T>::max() if u == v",
            "\t// O(1)",
            "\tpair<T, int> query(int u, int v) const{",
            "\t\ttie(u, v) = minmax(pos[u], pos[v]); ",
            "\t\treturn rmq.query(u, v);",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}