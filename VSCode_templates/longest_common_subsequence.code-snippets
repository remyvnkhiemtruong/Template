{
    "tranxuanbach": {
        "prefix": "longest_common_subsequence",
        "body": [
            "// Hirschburg's space optimization of LCS dp",
            "// O(n m / w) time (with about twice the constant factor)",
            "// O(n + m + Lim * m / w) space",
            "// Requires longest_common_subsequence_lengths",
            "template<class Char_Type, int Lim>",
            "vector<Char_Type> longest_common_subsequence(const vector<Char_Type> &s, const vector<Char_Type> &t){",
            "\tif(s.empty() || t.empty()) return {};",
            "\tint n = (int)s.size(), m = (int)t.size();",
            "\tvector<Char_Type> res;",
            "\tauto solve = [&](auto self, int il, int ir, int jl, int jr){",
            "\t\tif(jr - jl == 1){",
            "\t\t\tfor(auto p = il; p < ir; ++ p) if(s[p] == t[jl]){",
            "\t\t\t\tres.push_back(s[p]);",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "\t\t\treturn;",
            "\t\t}",
            "\t\tint jm = jl + (jr - jl >> 1);",
            "\t\tauto dp_left = longest_common_subsequence_lengths<Char_Type, Lim>({s.begin() + il, s.begin() + ir}, {t.begin() + jl, t.begin() + jm});",
            "\t\tauto dp_right = longest_common_subsequence_lengths<Char_Type, Lim>({s.rend() - ir, s.rend() - il}, {t.rend() - jr, t.rend() - jm});",
            "\t\tarray<int, 2> pos{dp_left[0] + dp_right[ir - il], 0};",
            "\t\tfor(auto l = 1; l <= ir - il; ++ l) pos = max(pos, array{dp_left[l] + dp_right[ir - il - l], l});",
            "\t\tint im = pos[1] + il;",
            "\t\tself(self, il, im, jl, jm), self(self, im, ir, jm, jr);",
            "\t};",
            "\tsolve(solve, 0, n, 0, m);",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}