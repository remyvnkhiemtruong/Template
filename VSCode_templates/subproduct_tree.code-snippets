{
    "tranxuanbach": {
        "prefix": "subproduct_tree",
        "body": [
            "// Requires modular, number_theoric_transform, and power_series",
            "template<class T, class FFT = ntt>",
            "struct subproduct_tree{",
            "private:",
            "\tvector<T> buffer1, buffer2;",
            "public:",
            "\t// O(n * log(n)^2)",
            "\tsubproduct_tree(const vector<T> &x): n((int)x.size()){",
            "\t\tlog = __lg(max(n - 1, 1)) + 1;",
            "\t\tsize = 1 << log;",
            "\t\tbuffer1 = vector<T>(size * (log + 1) << 1);",
            "\t\tbuffer2 = vector<T>(size << 2);",
            "\t\tdata.resize(size << 1);",
            "\t\tlength.resize(size << 1);",
            "\t\tfor(auto i = 1, j = 0; i < size << 1; ++ i){",
            "\t\t\tlength[i] = size >> __lg(i);",
            "\t\t\tdata[i] = buffer1.data() + j;",
            "\t\t\tj += length[i] << 1;",
            "\t\t}",
            "\t\tfor(auto i = 0; i < size; ++ i){",
            "\t\t\tT y = i < n ? x[i] : T{};",
            "\t\t\tdata[size + i][0] = -y + 1;",
            "\t\t\tdata[size + i][1] = -y - 1;",
            "\t\t}",
            "\t\tif(size == 1) data[1][1] = data[1][0];",
            "\t\tfor(auto i = size - 1; i >= 1; -- i){",
            "\t\t\tfor(auto j = 0; j < length[i]; ++ j){",
            "\t\t\t\tdata[i][j] = data[i << 1][j];",
            "\t\t\t\tbuffer2[j] = data[i << 1 | 1][j];",
            "\t\t\t}",
            "\t\t\tFFT::double_up(length[i], data[i]);",
            "\t\t\tFFT::double_up(length[i], buffer2.data());",
            "\t\t\tfor(auto j = 0; j < length[i] << 1; ++ j) data[i][j] *= buffer2[j];",
            "\t\t}",
            "\t\troot.resize(size << 1);",
            "\t\tcopy(data[1], data[1] + 2 * length[1], root.begin());",
            "\t\tFFT::transform(root, true);",
            "\t}",
            "\t// O(n * log(n)^2)",
            "\tvector<T> multipoint_evaluation(const power_series_base<T, FFT> &p){",
            "\t\tvector<T *> c(size << 1);",
            "\t\tbuffer2.assign(size << 1, T{});",
            "\t\tT *head;",
            "\t\tfor(auto i = 1; i < size << 1; ++ i){",
            "\t\t\tif((i & i - 1) == 0 && __lg(i) % 2 == 0) head = buffer2.data();",
            "\t\t\tc[i] = head;",
            "\t\t\thead += length[i];",
            "\t\t}",
            "\t\tpower_series_base<T, FFT> q = root.reverse(size + 1).inverse(p.size()).reverse(p.size()) * p;",
            "\t\tfor(auto i = 0; i < size; ++ i) c[1][i] = i < (int)p.size() ? q[(int)p.size() - 1 + i] : T{};",
            "\t\tvector<T> temp(size);",
            "\t\tfor(auto i = 1; i < size; ++ i){",
            "\t\t\tFFT::transform(length[i], c[i]);",
            "\t\t\tfor(auto k = 0; k < 2; ++ k){",
            "\t\t\t\ttemp.resize(length[i]);",
            "\t\t\t\tfor(auto j = 0; j < length[i]; ++ j) temp[j] = data[i << 1 | k ^ 1][j] * c[i][j];",
            "\t\t\t\tFFT::transform(temp, true);",
            "\t\t\t\tfor(auto j = 0; j < length[i] >> 1; ++ j) c[i << 1 | k][j] = temp[length[i] / 2 + j];",
            "\t\t\t}",
            "\t\t}",
            "\t\tvector<T> res(n);",
            "\t\tfor(auto i = 0; i < n; ++ i) res[i] = c[size + i][0];",
            "\t\treturn res;",
            "\t}",
            "\t// O(n * log(n)^2)",
            "\tpower_series_base<T, FFT> interpolation(const vector<T> &y){",
            "\t\tvector<T *> c(size << 1);",
            "\t\tbuffer2.assign(size << 1, T{});",
            "\t\tT *head;",
            "\t\tfor(auto i = 1; i < size << 1; ++ i){",
            "\t\t\tif((i & i - 1) == 0 && __lg(i) % 2 == 0) head = buffer2.data();",
            "\t\t\tc[i] = head;",
            "\t\t\thead += length[i] << 1;",
            "\t\t}",
            "\t\tvector<T> z = multipoint_evaluation(power_series_base<T, FFT>(root.begin() + size - (int)y.size(), root.begin() + size + 1).derivative());",
            "\t\tfor(auto i = 0; i < size; ++ i) c[size + i][0] = c[size + i][1] = i < (int)y.size() ? y[i] / z[i] : T{};",
            "\t\tfor(auto i = size - 1; i >= 1; -- i){",
            "\t\t\tfor(auto j = 0; j < length[i]; ++ j) c[i][j] = c[i << 1][j] * data[i << 1 | 1][j] + c[i << 1 | 1][j] * data[i << 1][j];",
            "\t\t\tFFT::double_up(length[i], c[i]);",
            "\t\t}",
            "\t\tFFT::transform(length[1] << 1, c[1], true);",
            "\t\treturn power_series_base<T, FFT>(c[1] + size - (int)y.size(), c[1] + size);",
            "\t}",
            "\tint n, size, log;",
            "\tvector<T *> data;",
            "\tvector<int> length;",
            "\tpower_series_base<T, FFT> root;",
            "};",
            "// O(n * log(n)^2)",
            "template<class T, class FFT = ntt>",
            "vector<T> multipoint_evaluation(const power_series_base<T, FFT> &p, const vector<T> &x){",
            "\treturn subproduct_tree(x).multipoint_evaluation(p);",
            "}",
            "// O(n * log(n)^2)",
            "template<class T, class FFT = ntt>",
            "power_series_base<T, FFT> interpolation(const vector<T> &x, const vector<T> &y){",
            "\tassert(x.size() == y.size());",
            "\treturn subproduct_tree(x).interpolation(y);",
            "}"
        ],
        "description": "tranxuanbach"
    }
}