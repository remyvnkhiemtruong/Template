{
    "tranxuanbach": {
        "prefix": "double_parallel_binary_search",
        "body": [
            "// For each of n items, return the first states which pred0 returns false and pred1 returns false",
            "// Binary search state lies within [low, high)",
            "// init(): set the state to low",
            "// advance(): increase the state by one",
            "// pred(i): check if item i satisfies the pred for current state (must be T, T, ..., T, F, ..., F)",
            "// O(log(high - low)) init() calls",
            "// O((high - low) * log(high - low)) advance() calls",
            "// O(n * log(high - low)) pred() calls",
            "array<vector<int>, 2> double_parallel_binary_search(int n, int low, int high, auto init, auto advance, auto pred0, auto pred1){",
            "\tassert(low <= high);",
            "\tvector<int> l0(n, low), r0(n, high);",
            "\tvector<vector<int>> update0(high - low);",
            "\tvector<int> l1(n, low), r1(n, high);",
            "\tvector<vector<int>> update1(high - low);",
            "\tinit();",
            "\tfor(auto i = 0; i < n; ++ i){",
            "\t\tif(!pred0(i)) r0[i] = low;",
            "\t\tif(!pred1(i)) r1[i] = low;",
            "\t}",
            "\twhile(true){",
            "\t\tbool done = true;",
            "\t\tfor(auto i = 0; i < n; ++ i){",
            "\t\t\tif(r0[i] - l0[i] >= 2){",
            "\t\t\t\tdone = false;",
            "\t\t\t\tupdate0[l0[i] + (r0[i] - l0[i] >> 1) - low].push_back(i);",
            "\t\t\t}",
            "\t\t\tif(r1[i] - l1[i] >= 2){",
            "\t\t\t\tdone = false;",
            "\t\t\t\tupdate1[l1[i] + (r1[i] - l1[i] >> 1) - low].push_back(i);",
            "\t\t\t}",
            "\t\t}",
            "\t\tif(done) break;",
            "\t\tfor(auto s = low; s < high; ++ s){",
            "\t\t\tfor(auto i: update0[s - low]) (pred0(i) ? l0 : r0)[i] = s;",
            "\t\t\tupdate0[s - low].clear();",
            "\t\t\tfor(auto i: update1[s - low]) (pred1(i) ? l1 : r1)[i] = s;",
            "\t\t\tupdate1[s - low].clear();",
            "\t\t\tif(s + 1 < high) advance(s);",
            "\t\t}",
            "\t\tinit();",
            "\t}",
            "\treturn {r0, r1};",
            "}"
        ],
        "description": "tranxuanbach"
    }
}