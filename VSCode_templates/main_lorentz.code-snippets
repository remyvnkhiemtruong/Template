{
    "tranxuanbach": {
        "prefix": "main_lorentz",
        "body": [
            "// Returns O(n * log(n)) tuples {l, r, len} indicating that [i, i + len) equals [i + len, i + 2 * len) for all i in [l, r)",
            "// O(n * log(n))",
            "template<class Char_Type, class SuffixArray_t, class RangeMinQuery_t>",
            "vector<array<int, 3>> main_lorentz(const vector<Char_Type> &s){",
            "\tint n = (int)s.size();",
            "\tSuffixArray_t sa(s), rsa(vector<int>{s.rbegin(), s.rend()});",
            "\tRangeMinQuery_t rmq(sa.lcp), rrmq(rsa.lcp);",
            "\tvector<array<int, 3>> res;",
            "\tfor(auto len = 1; len << 1 <= n; ++ len){",
            "\t\tfor(auto i = 0, last = -1; i + len <= n; i += len){",
            "\t\t\tint l = i - rsa.longest_common_prefix(n - i - len, n - i, rrmq), r = i - len + sa.longest_common_prefix(i, i + len, rmq);",
            "\t\t\tif(l > r || l == last) continue;",
            "\t\t\tres.push_back({last = l, r + 1, len});",
            "\t\t}",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}