{
    "tranxuanbach": {
        "prefix": "li_chao_tree",
        "body": [
            "// Data structure maintaining functions [th_low, th_high]->X such that",
            "// any two functions f and g are either equal, one is strictly above the other, or has a point p \\in [th_low, th_high] satisfying either",
            "// (f(x) < g(x) for all x<p, f(p) = g(p), and f(y) > g(y) for all p<=y) or",
            "// (f(x) > g(x) for all x<p, f(p) = g(p), and f(y) < g(y) for all p<=y).",
            "template<class T, class X, class F, class Compare = less<>>",
            "struct li_chao_tree{",
            "\tT th_low, th_high;",
            "\tvector<array<int, 2>> child{{-1, -1}};",
            "\tvector<int> data{-1}; // -1 denotes the function at -inf.",
            "\tF evaluate; // evaluate(i, p): value of function i at p",
            "\tCompare cmp;",
            "\tX minf;",
            "\tli_chao_tree(T th_low, T th_high, F evaluate, X _type_deducer, Compare cmp = less<>(), X minf = numeric_limits<X>::min()): th_low(th_low), th_high(th_high), evaluate(evaluate), cmp(cmp), minf(minf){ }",
            "\tli_chao_tree &operator=(const li_chao_tree &lct){",
            "\t\tth_low = lct.th_low;",
            "\t\tth_high = lct.th_high;",
            "\t\tchild = lct.child;",
            "\t\tdata = lct.data;",
            "\t}",
            "\t// function i is equal or higher than j on [l, r]",
            "\tbool majorize(int i, int j, T l, T r) const{",
            "\t\treturn !cmp(evaluate(i, l), evaluate(j, l)) && !cmp(evaluate(i, r), evaluate(j, r));",
            "\t}",
            "\t// Insert the function i.",
            "\t// O(log(n))",
            "\tvoid insert(int i){",
            "\t\tassert(i >= 0);",
            "\t\tif(!~data[0]){",
            "\t\t\tdata[0] = i;",
            "\t\t\treturn;",
            "\t\t}",
            "\t\tint u = 0;",
            "\t\tT l = th_low, r = th_high;",
            "\t\twhile(true){",
            "\t\t\tif(majorize(i, data[u], l, r)) swap(i, data[u]);",
            "\t\t\tif(majorize(data[u], i, l, r)) break;",
            "\t\t\tif(cmp(evaluate(data[u], l), evaluate(i, l))) swap(i, data[u]);",
            "\t\t\tT m = l + r >> 1;",
            "\t\t\tif(cmp(evaluate(data[u], m), evaluate(i, m))){",
            "\t\t\t\tswap(i, data[u]);",
            "\t\t\t\tif(!~child[u][0]){",
            "\t\t\t\t\tchild[u][0] = (int)child.size();",
            "\t\t\t\t\tchild.push_back({-1, -1});",
            "\t\t\t\t\tdata.push_back(i);",
            "\t\t\t\t\tbreak;",
            "\t\t\t\t}",
            "\t\t\t\tu = child[u][0];",
            "\t\t\t\tr = m;",
            "\t\t\t}",
            "\t\t\telse{",
            "\t\t\t\tif(!~child[u][1]){",
            "\t\t\t\t\tchild[u][1] = (int)child.size();",
            "\t\t\t\t\tchild.push_back({-1, -1});",
            "\t\t\t\t\tdata.push_back(i);",
            "\t\t\t\t\tbreak;",
            "\t\t\t\t}",
            "\t\t\t\tu = child[u][1];",
            "\t\t\t\tl = m;",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\t// Return the pair {evaluate(i, p), i} where i achieves the maximum evaluation at p among all functions in the data structure.",
            "\t// O(log(n))",
            "\tpair<X, int> query_max(T p) const{",
            "\t\tassert(th_low <= p && p <= th_high && ~data[0]);",
            "\t\tX optv = minf;",
            "\t\tint opti = -1, u = 0;",
            "\t\tT l = th_low, r = th_high;",
            "\t\twhile(true){",
            "\t\t\tif(X cv = evaluate(data[u], p); cv > optv){",
            "\t\t\t\toptv = cv;",
            "\t\t\t\topti = data[u];",
            "\t\t\t}",
            "\t\t\tT m = l + r >> 1;",
            "\t\t\tif(p < m){",
            "\t\t\t\tif(!~child[u][0]) break;",
            "\t\t\t\tu = child[u][0];",
            "\t\t\t\tr = m;",
            "\t\t\t}",
            "\t\t\telse{",
            "\t\t\t\tif(!~child[u][1]) break;",
            "\t\t\t\tu = child[u][1];",
            "\t\t\t\tl = m;",
            "\t\t\t}",
            "\t\t}",
            "\t\tassert(~opti);",
            "\t\treturn {optv, opti};",
            "\t}",
            "\tfriend ostream &operator<<(ostream &out, const li_chao_tree &lct){",
            "\t\tauto recurse = [&](auto self, int u, T l, T r)->void{",
            "\t\t\tout << \"Node \" << u << \" for range [\" << l << \", \" << r << \"]: \";",
            "\t\t\tout << \"{\";",
            "\t\t\tif(~lct.data[u]) out << lct.data[u] << \", \" << lct.evaluate(lct.data[u], l + r >> 1);",
            "\t\t\tout << \"}\\n\";;",
            "\t\t\tif(~lct.child[u][0]) self(self, lct.child[u][0], l, l + r >> 1);",
            "\t\t\tif(~lct.child[u][1]) self(self, lct.child[u][1], l + r >> 1, r);",
            "\t\t};",
            "\t\trecurse(recurse, 0, lct.th_low, lct.th_high);",
            "\t\treturn out;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}