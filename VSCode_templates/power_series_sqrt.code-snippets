{
    "tranxuanbach": {
        "prefix": "power_series_sqrt",
        "body": [
            "// O(polymul(n) * log(n))",
            "// Requires mod_sqrt and power_series",
            "template<class T, class FFT = ntt>",
            "optional<power_series_base<T, FFT>> power_series_sqrt(power_series_base<T, FFT> a, int length){",
            "\ta.resize(length);",
            "\tint zero_prefix = find_if(a.begin(), a.end(), [&](auto x){ return x != 0; }) - a.begin();",
            "\tif(zero_prefix == length) return power_series_base<T, FFT>(a.begin(), a.begin() + length);",
            "\tif(zero_prefix & 1) return {};",
            "\ta.erase(a.begin(), a.begin() + zero_prefix);",
            "\tlength -= zero_prefix >>= 1;",
            "\tT c;",
            "\tif(auto p = mod_sqrt(a[0])) c = *p, a /= a[0];",
            "\telse return {};",
            "\tT inv2 = T(1) / 2;",
            "\tpower_series_base<T, FFT> f{1}, g{1}, z{1};",
            "\tfor(auto s = 1; s < length; s <<= 1){",
            "\t\tz.inplace_dot_product(z);",
            "\t\tz.transform(true);",
            "\t\tpower_series_base<T, FFT> delta(s << 1), g2(s << 1), eps;",
            "\t\tfor(auto i = 0; i < s; ++ i) delta[s + i] = z[i] - a[i] - (s + i < length ? a[s + i] : T());",
            "\t\tdelta.transform();",
            "\t\tcopy(g.begin(), g.end(), g2.begin());",
            "\t\tg2.transform();",
            "\t\tdelta.inplace_dot_product(g2);",
            "\t\tdelta.transform(true);",
            "\t\tf.resize(s << 1);",
            "\t\tfor(auto i = s; i < s << 1; ++ i) f[i] = -inv2 * delta[i];",
            "\t\tif(s << 1 >= length) break;",
            "\t\tz = f;",
            "\t\tz.transform();",
            "\t\teps = g2;",
            "\t\teps.inplace_dot_product(z);",
            "\t\teps.transform(true);",
            "\t\teps.clear_range(0, s);",
            "\t\teps.transform();",
            "\t\teps.inplace_dot_product(g2);",
            "\t\teps.transform(true);",
            "\t\tg.resize(s << 1);",
            "\t\tfor(auto i = s; i < s << 1; ++ i) g[i] = -eps[i];",
            "\t}",
            "\tf.resize(length);",
            "\tfor(auto &x: f) x *= c;",
            "\tf.insert(f.begin(), zero_prefix, 0);",
            "\treturn f;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}