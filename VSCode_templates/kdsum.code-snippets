{
    "tranxuanbach": {
        "prefix": "kdsum",
        "body": [
            "// Requires kdarray",
            "// O(K * Product(n)) processing, O(2^K) per query",
            "template<class T, class BO = plus<>, class IO = minus<>>",
            "struct kdsum{",
            "\tBO bin_op;",
            "\tIO inv_op;",
            "\tT id;",
            "\tkdarray<T> val;",
            "\ttemplate<class U>",
            "\tkdsum(const kdarray<U> &arr, BO bin_op = plus<>{}, IO inv_op = minus<>{}, T id = 0LL): val(arr), bin_op(bin_op), inv_op(inv_op), id(id){",
            "\t\tvector<int> cur, from;",
            "\t\tfor(int t = 0, ncnt; t < val.K; ++ t){",
            "\t\t\tcur.assign(val.K, 0), from.assign(val.K, 0), -- from[t], ncnt = 1;",
            "\t\t\twhile(1){",
            "\t\t\t\tT &c = val[cur];",
            "\t\t\t\tc = bin_op(c, ncnt ? id : val[from]);",
            "\t\t\t\tfor(int i = val.K - 1; i >= 0; -- i){",
            "\t\t\t\t\tif(from[i] < 0) -- ncnt;",
            "\t\t\t\t\tif(++ from[i], ++ cur[i] < val.n[i]) break;",
            "\t\t\t\t\tif(!i) goto ESCAPE;",
            "\t\t\t\t\tcur[i] = 0, ncnt += (i == t) - (from[i] < 0), from[i] = (i != t) - 1;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\tESCAPE:;",
            "\t\t}",
            "\t}",
            "\tT query(const vector<int> &low, const vector<int> &high){",
            "\t\tT res = id;",
            "\t\tstatic vector<int> cur; cur.assign(val.K, 0);",
            "\t\tfor(int mask = 0, ncnt = 0; mask < 1 << val.K; ++ mask){",
            "\t\t\tfor(int bit = 0; bit < val.K; ++ bit){",
            "\t\t\t\tif(mask & 1 << bit){",
            "\t\t\t\t\tncnt += !low[bit] - !~cur[bit], cur[bit] = low[bit] - 1;",
            "\t\t\t\t\tbreak;",
            "\t\t\t\t}",
            "\t\t\t\telse ncnt += !high[bit] - !~cur[bit], cur[bit] = high[bit] - 1;",
            "\t\t\t}",
            "\t\t\tres = __builtin_popcount(mask) & 1 ? inv_op(res, ncnt ? id : val[cur]) : bin_op(res, ncnt ? id : val[cur]);",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\tT query(vector<int> high){",
            "\t\tfor(int d = 0; d < val.K; ++ d){",
            "\t\t\tif(high[d]) -- high[d];",
            "\t\t\telse return id;",
            "\t\t}",
            "\t\treturn val[high];",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}