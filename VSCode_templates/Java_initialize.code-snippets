{
    "tranxuanbach": {
        "prefix": "initialize",
        "body": [
            "import java.util.*;",
            "",
            "public class a{",
            "\tstatic Scanner sc = new Scanner(System.in);",
            " \tstatic class Pair{",
            "\t\tInteger x, y;",
            "\t\tpublic Pair(Integer _x, Integer _y){",
            "\t\t\tx = _x;",
            "\t\t\ty = _y;",
            "\t\t}",
            "\t\t@Override",
            "\t\tpublic String toString(){",
            "\t\t\treturn \"(\" + x + \", \" + y + \")\";",
            "\t\t}",
            "\t}",
            " \tstatic class Tuple3{",
            "\t\tInteger x, y, z;",
            "\t\tpublic Tuple3(Integer _x, Integer _y, Integer _z){",
            "\t\t\tx = _x;",
            "\t\t\ty = _y;",
            "\t\t\tz = _z;",
            "\t\t}",
            "\t\t@Override",
            "\t\tpublic String toString(){",
            "\t\t\treturn \"(\" + x + \", \" + y + \", \" + z + \")\";",
            "\t\t}",
            "\t}",
            "\tstatic Integer min(Integer x, Integer y){",
            "\t\treturn Math.min(x, y);",
            "\t}",
            "\tstatic Integer min3(Integer x, Integer y, Integer z){",
            "\t\treturn Math.min(Math.min(x, y), z);",
            "\t}",
            "\tstatic Integer max(Integer x, Integer y){",
            "\t\treturn Math.max(x, y);",
            "\t}",
            "\tstatic Integer max3(Integer x, Integer y, Integer z){",
            "\t\treturn Math.max(Math.max(x, y), z);",
            "\t}",
            "\tstatic Long min(Long x, Long y){",
            "\t\treturn Math.min(x, y);",
            "\t}",
            "\tstatic Long min3(Long x, Long y, Long z){",
            "\t\treturn Math.min(Math.min(x, y), z);",
            "\t}",
            "\tstatic Long max(Long x, Long y){",
            "\t\treturn Math.max(x, y);",
            "\t}",
            "\tstatic Long max3(Long x, Long y, Long z){",
            "\t\treturn Math.max(Math.max(x, y), z);",
            "\t}",
            " \tstatic class Tuple4{",
            "\t\tInteger x, y, z, w;",
            "\t\tpublic Tuple4(Integer _x, Integer _y, Integer _z, Integer _w){",
            "\t\t\tx = _x;",
            "\t\t\ty = _y;",
            "\t\t\tz = _z;",
            "\t\t\tw = _w;",
            "\t\t}",
            "\t}",
            "\tstatic final Integer mod = 1000000007;",
            "\tstatic Integer add(Integer x, Integer y){",
            "\t\tx += y;",
            "\t\tif(x >= mod){",
            "\t\t\tx -= mod;",
            "\t\t}",
            "\t\treturn x;",
            "\t}",
            "\tstatic Integer sub(Integer x, Integer y){",
            "\t\tx -= y;",
            "\t\tif(x < 0){",
            "\t\t\tx += mod;",
            "\t\t}",
            "\t\treturn x;",
            "\t}",
            "\tstatic Integer mul(Integer x, Integer y){",
            "\t\treturn (int)((long)(int)x * y % mod);",
            "\t}",
            "\tstatic Integer pow(Integer b, Integer e){",
            "\t\tInteger res = 1;",
            "\t\twhile(e > 0){",
            "\t\t\tif(e % 2 == 1) res = mul(res, b);",
            "\t\t\tb = mul(b, b);",
            "\t\t\te >>= 1;",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\tstatic Integer inv(Integer b){",
            "\t\treturn pow(b, mod - 2);",
            "\t}",
            "\tstatic Integer div(Integer x, Integer y){",
            "\t\treturn mul(x, inv(y));",
            "\t}",
            "\t////////////////////////////////////////////////////",
            "\tstatic Integer[] dsu;",
            "\tstatic void dsu_clear(){",
            "\t\tfor(Integer i = 0; i < dsu.length; ++ i){",
            "\t\t\tdsu[i] = -1;",
            "\t\t}",
            "\t}",
            "\tstatic Integer dsu_root(Integer u){",
            "\t\treturn dsu[u] >= 0 ? dsu[u] = dsu_root(dsu[u]) : u;",
            "\t}",
            "\tstatic Integer dsu_size(Integer u){",
            "\t\treturn -dsu[dsu_root(u)];",
            "\t}",
            "\tstatic Boolean dsu_share(Integer u, Integer v){",
            "\t\treturn dsu_root(u).equals(dsu_root(v));",
            "\t}",
            "\tstatic Boolean dsu_merge(Integer u, Integer v){",
            "\t\tu = dsu_root(u);",
            "\t\tv = dsu_root(v);",
            "\t\tif(u.equals(v)){",
            "\t\t\treturn false;",
            "\t\t}",
            "\t\tif(dsu[u] > dsu[v]){",
            "\t\t\tu ^= v;",
            "\t\t\tv ^= u;",
            "\t\t\tu ^= v;",
            "\t\t}",
            "\t\tdsu[u] += dsu[v];",
            "\t\tdsu[v] = u;",
            "\t\treturn true;",
            "\t}",
            "\tstatic ArrayList<Integer>[] adj;",
            "\tstatic Integer[] size, pv, depth;",
            "\tstatic Integer[][] lift;",
            "\tstatic Integer jump(Integer u, Integer d){",
            "\t\tfor(Integer bit = 0; bit < 20; ++ bit){",
            "\t\t\tif((d & 1 << bit) > 0){",
            "\t\t\t\tu = lift[bit][u];",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn u;",
            "\t}",
            "\tstatic Integer lca(Integer u, Integer v){",
            "\t\tif(depth[u] < depth[v]){",
            "\t\t\tu ^= v;",
            "\t\t\tv ^= u;",
            "\t\t\tu ^= v;",
            "\t\t}",
            "\t\tu = jump(u, depth[u] - depth[v]);",
            "\t\tif(u.equals(v)){",
            "\t\t\treturn u;",
            "\t\t}",
            "\t\tfor(Integer bit = 19; bit >= 0; -- bit){",
            "\t\t\tif(lift[bit][u] != lift[bit][v]){",
            "\t\t\t\tu = lift[bit][u];",
            "\t\t\t\tv = lift[bit][v];",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn lift[0][u];",
            "\t}",
            "\tstatic Integer tree_dist(Integer u, Integer v){",
            "\t\tInteger w = lca(u, v);",
            "\t\treturn depth[u] + depth[v] - 2 * depth[w];",
            "\t}",
            "\tstatic final Integer INF = 1000000000;",
            "\tstatic final Long LINF = 1000000000000000000l;",
            "\tstatic void dfs(Integer u, Integer p){",
            "\t\tif(p.equals(-1)){",
            "\t\t\tdepth[u] = 0;",
            "\t\t}",
            "\t\tfor(Integer v: adj[u]){",
            "\t\t\tif(!v.equals(p)){",
            "\t\t\t\tdepth[v] = depth[u] + 1;",
            "\t\t\t\tdfs(v, u);",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tstatic Pair[] dr = new Pair[]{new Pair(1, 0), new Pair(0, 1), new Pair(-1, 0), new Pair(0, -1)};",
            "\tstatic char[] drid = new char[]{'D', 'R', 'U', 'L'};",
            "\t////////////////////////////////////////////////////",
            "\t@SuppressWarnings(\"unchecked\")",
            "\tpublic static void main(String[] args){",
            "\t\t$0",
            "\t}",
            "}",
            "",
            "/*",
            "",
            "*/"
        ],
        "description": "tranxuanbach"
    }
}