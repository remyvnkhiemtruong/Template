{
    "tranxuanbach": {
        "prefix": "burrows_wheeler_transform",
        "body": [
            "// O(n log n)",
            "// Take all non-empty suffices of S+delim, sort it, then take the last characters.",
            "// Requires sparse_table and suffix_array",
            "template<class Char_Type>",
            "vector<Char_Type> burrows_wheeler_transform(const vector<Char_Type> &s, Char_Type delim = -1){",
            "\tauto sa = suffix_array(s);",
            "\tvector<Char_Type> res(s.size() + 1, delim);",
            "\tfor(auto i = 0; i <= (int)s.size(); ++ i) res[i] = sa.sa[i] ? s[sa.sa[i] - 1] : delim;",
            "\treturn res;",
            "}",
            "// Inverse Transform",
            "// O(n)",
            "// delim must be smaller than the characters on s",
            "template<class Char_Type, int Lim>",
            "vector<Char_Type> inverse_burrows_wheeler_transform(const vector<Char_Type> &s, Char_Type delim = -1){",
            "\tint n = (int)s.size();",
            "\tvector<int> t(lim), next(n);",
            "\tfor(auto &c: s) ++ t[c + 1];",
            "\tfor(auto i = 1; i < lim; ++ i) t[i] += t[i - 1];",
            "\tfor(auto i = 0; i < n; ++ i) next[t[s[i]] ++] = i;",
            "\tint cur = next[0];",
            "\tvector<Char_Type> res(n - 1, delim);",
            "\tfor(auto i = 0; i < n - 1; ++ i) res[i] = s[cur = next[cur]];",
            "\treturn move(res);",
            "};"
        ],
        "description": "tranxuanbach"
    }
}