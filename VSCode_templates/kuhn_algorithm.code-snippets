{
    "tranxuanbach": {
        "prefix": "kuhn_algorithm",
        "body": [
            "struct kuhn_algorithm: maximum_bipartite_matching_solver{",
            "\tkuhn_algorithm(int n, int m): was(n){",
            "\t\tthis->n = n;",
            "\t\tthis->m = m;",
            "\t\tadj.assign(n, {});",
            "\t\tpu.assign(n, -1);",
            "\t\tpv.assign(m, -1);",
            "\t}",
            "\tint insert(int from, int to){",
            "\t\tadj[from].push_back(to);",
            "\t\treturn (int)adj[from].size() - 1;",
            "\t}",
            "\tvoid clear(){",
            "\t\tadj.assign(n, {});",
            "\t\tpu.assign(n, -1);",
            "\t\tpv.assign(m, -1);",
            "\t}",
            "\tint it = 0;",
            "\tvector<int> was;",
            "\tbool dfs(int u){",
            "\t\twas[u] = it;",
            "\t\tfor(auto v: adj[u]) if(!~pv[v]){",
            "\t\t\tpu[u] = v, pv[v] = u;",
            "\t\t\treturn true;",
            "\t\t}",
            "\t\tfor(auto v: adj[u]) if(was[pv[v]] != it && dfs(pv[v])){",
            "\t\t\tpu[u] = v, pv[v] = u;",
            "\t\t\treturn true;",
            "\t\t}",
            "\t\treturn false;",
            "\t}",
            "\t// O((n + m) * (# of edges))",
            "\tint maximum_matching(){",
            "\t\tmt19937 rng(1564);",
            "\t\tfor(auto u = 0; u < n; ++ u) shuffle(adj[u].begin(), adj[u].end(), rng);",
            "\t\tint matching = 0;",
            "\t\twhile(true){",
            "\t\t\t++ it;",
            "\t\t\tint augment = 0;",
            "\t\t\tfor(auto u = 0; u < n; ++ u) if(!~pu[u] && dfs(u)) ++ augment;",
            "\t\t\tif(!augment) break;",
            "\t\t\tmatching += augment;",
            "\t\t}",
            "\t\treturn matching;",
            "\t}",
            "\tint run_once(int u){",
            "\t\tif(~pu[u]) return 0;",
            "\t\t++ it;",
            "\t\treturn dfs(u);",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}