{
    "tranxuanbach": {
        "prefix": "range_inversion_query_solver_offline",
        "body": [
            "// Requires sqrt_decomposition_heavy_point_update_light_range_query_commutative_group and mo_sweepline",
            "template<int BX>",
            "struct range_inversion_query_solver_offline{",
            "\tint n;",
            "\tvector<int> data;",
            "\tmo_sweepline_base<BX, long long, plus<>, minus<>> mo;",
            "\ttemplate<class T, class Compare = less<>>",
            "\trange_inversion_query_solver_offline(const vector<T> &a, Compare cmp = less<>()): n((int)a.size()), data((int)a.size()), mo(n, plus<>(), 0LL, minus<>()){",
            "\t\tvector<T> temp = a;",
            "\t\tsort(temp.begin(), temp.end(), cmp);",
            "\t\tfor(auto i = 0; i < n; ++ i) data[i] = lower_bound(temp.begin(), temp.end(), a[i]) - temp.begin();",
            "\t}",
            "\tvoid query(int qi, int ql, int qr){",
            "\t\tmo.query(qi, ql, qr);",
            "\t}",
            "\t// O(n*BX + qn*BX + n^2/BX)",
            "\tvector<long long> solve() const{",
            "\t\tsqrt_decomposition_heavy_point_update_light_range_query_commutative_group<BX, int, plus<>, minus<>> sqrtdecomp(n, plus<>(), 0, minus<>());",
            "\t\tauto insert = [&](int i)->void{",
            "\t\t\tsqrtdecomp.update(data[i], 1);",
            "\t\t};",
            "\t\tauto query_left = [&](int i)->int{",
            "\t\t\treturn sqrtdecomp.query(0, data[i]);",
            "\t\t};",
            "\t\tauto query_right = [&](int i)->int{",
            "\t\t\treturn sqrtdecomp.query(data[i] + 1, n);",
            "\t\t};",
            "\t\treturn mo.solve(insert, query_left, query_right);",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}