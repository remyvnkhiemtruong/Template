{
    "tranxuanbach": {
        "prefix": "dijkstra_dense",
        "body": [
            "template<class T>",
            "struct dijkstra_dense{",
            "\tint n;",
            "\tT base_dist;",
            "\tvector<T> dist;",
            "\tvector<int> pv;",
            "\tvector<int> order;",
            "\tvector<int> pos;",
            "\tvector<int> root_of;",
            "\tvector<int> root;",
            "\tvector<int> depth;",
            "\tvector<int> was;",
            "\tdijkstra_dense(T base_dist = T{0}): base_dist(base_dist){ }",
            "\tvoid init(int n){",
            "\t\tthis->n = n;",
            "\t\tdist.assign(n, base_dist);",
            "\t\tpv.assign(n, -1);",
            "\t\torder.clear();",
            "\t\tpos.assign(n, -1);",
            "\t\troot_of.assign(n, -1);",
            "\t\troot.clear();",
            "\t\tdepth.assign(n, -1);",
            "\t\twas.assign(n, -2);",
            "\t\tdone.assign(n, false);",
            "\t\tattempt = -1;",
            "\t}",
            "\tint attempt;",
            "\tvector<int> done;",
            "\t// act_greater(v, u): dist[v] has been updated to larger value by u",
            "\t// act_equal(v, u): dist[v] equals the length of shortest path to v through u",
            "\t// O(n^2)",
            "\ttemplate<class U>",
            "\tvoid _run(const vector<vector<U>> &edge_length, const vector<int> &src, auto act_greater, auto act_equal){",
            "\t\tint n = (int)edge_length.size();",
            "\t\tfor(auto u: src){",
            "\t\t\tif(was[u] == attempt) continue;",
            "\t\t\twas[u] = attempt;",
            "\t\t\tdone[u] = false;",
            "\t\t\tdist[u] = base_dist;",
            "\t\t\tdepth[u] = 0;",
            "\t\t\troot_of[u] = u;",
            "\t\t\troot.push_back(u);",
            "\t\t\tpv[u] = -1;",
            "\t\t}",
            "\t\twhile(true){",
            "\t\t\tint u = -1;",
            "\t\t\tfor(auto v = 0; v < n; ++ v) if(was[v] == attempt && !done[v] && (!~u || dist[u] > dist[v])) u = v;",
            "\t\t\tif(!~u) break;",
            "\t\t\tdone[u] = true;",
            "\t\t\tpos[u] = (int)order.size();",
            "\t\t\torder.push_back(u);",
            "\t\t\tfor(auto v = 0; v < n; ++ v) if(~edge_length[u][v]){",
            "\t\t\t\tif(was[v] != attempt || !done[v] && dist[u] + edge_length[u][v] < dist[v]){",
            "\t\t\t\t\tdist[v] = dist[u] + edge_length[u][v];",
            "\t\t\t\t\twas[v] = attempt;",
            "\t\t\t\t\tdone[v] = false;",
            "\t\t\t\t\tdepth[v] = depth[u] + 1;",
            "\t\t\t\t\tpv[v] = u;",
            "\t\t\t\t\troot_of[v] = root_of[u];",
            "\t\t\t\t\tact_greater(v, u);",
            "\t\t\t\t}",
            "\t\t\t\telse if(!done[v] && dist[u] + edge_length[u][v] == dist[v]) act_equal(v, u);",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\t// Requires graph",
            "\ttemplate<class Graph>",
            "\tvoid run(const Graph &g, const vector<int> &src, auto act_greater, auto act_equal){",
            "\t\tassert(g.n <= n);",
            "\t\tif(g.n == 0) return;",
            "\t\tfor(auto u: src) assert(0 <= u && u < g.n);",
            "\t\troot.clear(), order.clear();",
            "\t\t++ attempt;",
            "\t\tvector edge_length(g.n, vector<typename Graph::Weight_t>(g.n, -1));",
            "\t\tfor(auto u = 0; u < g.n; ++ u) for(auto id: g.adj[u]){",
            "\t\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\t\tassert(0 <= g.edge[id].cost);",
            "\t\t\tint v = g(u, id);",
            "\t\t\tedge_length[u][v] = ~edge_length[u][v] ? min(edge_length[u][v], g.edge[id].cost) : g.edge[id].cost;",
            "\t\t}",
            "\t\t_run(edge_length, src, act_greater, act_equal);",
            "\t}",
            "\t// Requires graph",
            "\ttemplate<class Graph>",
            "\tvoid run(const Graph &g, const vector<int> &src){",
            "\t\trun(g, src, [&](int, int){  }, [&](int, int){  });",
            "\t}",
            "\t// edge_length = -1 implies no edge",
            "\ttemplate<class U>",
            "\tvoid run(const vector<vector<U>> &edge_length, const vector<int> &src, auto act_greater, auto act_equal){",
            "\t\tint n = (int)edge_length.size();",
            "\t\tassert(n <= this->n);",
            "\t\tfor(const auto &row: edge_length) for(auto w: row) assert(-1 <= w);",
            "\t\tfor(auto u: src) assert(0 <= u && u < n);",
            "\t\troot.clear(), order.clear();",
            "\t\t++ attempt;",
            "\t\t_run(edge_length, src, act_greater, act_equal);",
            "\t}",
            "\t// edge_length = -1 implies no edge",
            "\ttemplate<class U>",
            "\tvoid run(const vector<vector<U>> &edge_length, const vector<int> &src){",
            "\t\trun(edge_length, src, [&](int, int){  }, [&](int, int){  });",
            "\t}",
            "\t// Check if u is visited during the last dijkstra-like call.",
            "\tbool visited(int u) const{",
            "\t\treturn was[u] == attempt;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}