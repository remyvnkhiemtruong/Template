{
    "tranxuanbach": {
        "prefix": "sqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid",
        "body": [
            "template<int B, class T, class F>",
            "struct sqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid{",
            "\tint n, nB;",
            "\tvector<T> data, dataB;",
            "\tF TT; // commutative monoid operation",
            "\tT T_id; // commutative monoid identity",
            "\t// O(n)",
            "\tsqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid(F TT, T T_id): TT(TT), T_id(T_id){ }",
            "\t// O(n)",
            "\tvoid build(int n){",
            "\t\tbuild(vector<T>(n, T_id));",
            "\t}",
            "\t// O(n)",
            "\tvoid build(int n, T x){",
            "\t\tbuild(vector<T>(n, x));",
            "\t}",
            "\t// O(n)",
            "\ttemplate<class U>",
            "\tvoid build(const vector<U> &a){",
            "\t\tn = (int)a.size();",
            "\t\tnB = (n + B - 1) / B;",
            "\t\tdata = a;",
            "\t\tdataB.assign(nB, T_id);",
            "\t\tfor(auto iB = 0; iB < nB; ++ iB) for(auto i = B * iB; i < min(n, B * (iB + 1)); ++ i) dataB[iB] = TT(dataB[iB], data[i]);",
            "\t}",
            "\t// O(1)",
            "\tvoid update(int p, T x){",
            "\t\tassert(0 <= p && p < n);",
            "\t\tdata[p] = TT(data[p], x);",
            "\t\tint pB = p / B;",
            "\t\tdataB[pB] = TT(dataB[pB], x);",
            "\t}",
            "\t// O(B + n/B)",
            "\tT query(int l, int r) const{",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\tif(l == r) return T_id;",
            "\t\tint lB = l / B, rB = (r - 1) / B;",
            "\t\tT res = T_id;",
            "\t\tif(lB == rB) for(auto i = l; i < r; ++ i) res = TT(res, data[i]);",
            "\t\telse{",
            "\t\t\tfor(auto i = l; i < B * (lB + 1); ++ i) res = TT(res, data[i]);",
            "\t\t\tfor(auto iB = lB + 1; iB < rB; ++ iB) res = TT(res, dataB[iB]);",
            "\t\t\tfor(auto i = B * rB; i < r; ++ i) res = TT(res, data[i]);",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\tfriend ostream &operator<<(ostream &out, const sqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid<B, T, F> &sqrt_decomp){",
            "\t\tout << \"{\";",
            "\t\tfor(auto i = 0; i < sqrt_decomp.n; ++ i){",
            "\t\t\tout << sqrt_decomp.data[i];",
            "\t\t\tif(i + 1 < sqrt_decomp.n) out << \", \";",
            "\t\t}",
            "\t\treturn out << \"}\";",
            "\t}",
            "};",
            "",
            "template<int B, class T, class F = plus<>>",
            "auto make_sqrt_decomposition_lpu_hrq(F TT = plus<>(), T T_id = 0){",
            "\treturn sqrt_decomposition_light_point_update_heavy_range_query_commutative_monoid(TT, T_id);",
            "}"
        ],
        "description": "tranxuanbach"
    }
}