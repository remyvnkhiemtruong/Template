{
    "tranxuanbach": {
        "prefix": "fast_walsh_hadamard_transform",
        "body": [
            "template<class T, char Conv = '^'>",
            "void fast_walsh_hadamard_transform(vector<T> &a, const bool invert = false){",
            "\tint n = (int)a.size();",
            "\tfor(int len = 1; len < n; len <<= 1){",
            "\t\tfor(int i = 0; i < n; i += len << 1){",
            "\t\t\tfor(int j = 0; j < len; ++ j){",
            "\t\t\t\tT u = a[i + j], v = a[i + j + len];",
            "\t\t\t\tif(Conv == '^') a[i + j] = u + v, a[i + j + len] = u - v;",
            "\t\t\t\tif(Conv == '|') a[i + j + len] += invert ? -u : u;",
            "\t\t\t\tif(Conv == '&') a[i + j] += invert ? -v : v;",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tif(Conv == '^' && invert){",
            "\t\tT inv_n = T(1) / n;",
            "\t\tfor(auto &x: a) x *= inv_n;",
            "\t}",
            "}",
            "template<class T, char Conv = '^'>",
            "vector<T> convolute(vector<T> p, vector<T> q){",
            "\tint n = max({(int)p.size(), (int)q.size() - 1, 1});",
            "\tif(__builtin_popcount(n) != 1) n = 1 << __lg(n) + 1;",
            "\tp.resize(n), q.resize(n);",
            "\tfast_walsh_hadamard_transform<Conv>(p), fast_walsh_hadamard_transform<Conv>(q);",
            "\tfor(int i = 0; i < n; ++ i) p[i] *= q[i];",
            "\tfast_walsh_hadamard_transform<Conv>(p, true);",
            "\treturn p;",
            "}",
            "template<class T>",
            "vector<T> subset_convolute(vector<T> p, vector<T> q){",
            "\tint n = max({(int)p.size(), (int)q.size() - 1, 1});",
            "\tif(__builtin_popcount(n) != 1) n = 1 << __lg(n) + 1;",
            "\tint w = __lg(n);",
            "\tp.resize(n), q.resize(n);",
            "\tvector a(w + 1, vector<Zp>(n)), b(a);",
            "\tfor(int i = 0; i < n; ++ i) a[__builtin_popcount(i)][i] = p[i];",
            "\tfor(int i = 0; i < n; ++ i) b[__builtin_popcount(i)][i] = q[i];",
            "\tfor(int bit = 0; bit <= w; ++ bit) fast_walsh_hadamard_transform<'|'>(a[bit]), fast_walsh_hadamard_transform<'|'>(b[bit]);",
            "\tvector<T> r(n);",
            "\tfor(int bit = 0; bit <= w; ++ bit){",
            "\t\tvector<T> c(n);",
            "\t\tfor(int lbit = 0; lbit <= bit; ++ lbit) for(int i = 0; i < n; ++ i) c[i] += a[lbit][i] * b[bit - lbit][i];",
            "\t\tfast_walsh_hadamard_transform<'|'>(c, true);",
            "\t\tfor(int i = 0; i < n; ++ i) if(__builtin_popcount(i) == bit) r[i] = c[i];",
            "\t}",
            "\treturn r;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}