{
    "tranxuanbach": {
        "prefix": "flow_network_weighted",
        "body": [
            "template<class T, class C>",
            "struct flow_network_weighted{",
            "\tstruct E{",
            "\t\tint from, to;",
            "\t\tT capacity, flow;",
            "\t\tC cost;",
            "\t};",
            "\tvector<vector<int>> adj;",
            "\tvector<E> edge;",
            "\tint n;",
            "\tC cost = 0;",
            "\tflow_network_weighted(int n): n(n), adj(n){ }",
            "\tvoid clear_flow(){",
            "\t\tfor(auto &e: edge) e.flow = 0;",
            "\t\tcost = 0;",
            "\t}",
            "\tint link(int from, int to, T cap, C cost){",
            "\t\tassert(0 <= min(from, to) && max(from, to) < n && cap >= 0 && cost >= 0);",
            "\t\tint ind = orient(from, to, cap, cost);",
            "\t\torient(to, from, cap, cost);",
            "\t\treturn ind;",
            "\t}",
            "\tint orient(int from, int to, T cap, C cost){",
            "\t\tassert(0 <= min(from, to) && max(from, to) < n && cap >= 0);",
            "\t\tint ind = (int)edge.size();",
            "\t\tadj[from].push_back((int)edge.size());",
            "\t\tedge.push_back({from, to, cap, 0, cost});",
            "\t\tadj[to].push_back((int)edge.size());",
            "\t\tedge.push_back({to, from, 0, 0, -cost});",
            "\t\treturn ind;",
            "\t}",
            "\tvoid add_flow(int i, T f){",
            "\t\tedge[i].flow += f;",
            "\t\tcost += f * edge[i].cost;",
            "\t\tedge[i ^ 1].flow -= f;",
            "\t}",
            "\tfriend ostream &operator<<(ostream &out, const flow_network_weighted &F){",
            "\t\tout << \"\\n\";",
            "\t\tfor(auto &e: F.edge){",
            "\t\t\tout << \"{\" << e.from << \" -> \" << e.to << \", \" << e.cost << \", \" << e.flow << \"/\" << e.capacity << \"}\\n\";",
            "\t\t}",
            "\t\treturn out;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}