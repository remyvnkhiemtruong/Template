{
    "tranxuanbach": {
        "prefix": "matroid",
        "body": [
            "struct colorful_matroid{",
            "\tvector<int> flag, color;",
            "\tcolorful_matroid(const vector<int> &color, int c): color(color), flag(c){ }",
            "\tbool check(int i){",
            "\t\treturn !flag[color[i]];",
            "\t}",
            "\tvoid insert(int i){",
            "\t\tflag[color[i]] = true;",
            "\t}",
            "\tvoid clear(){",
            "\t\tfill(flag.begin(), flag.end(), false);",
            "\t}",
            "};",
            "// Requires disjoint_set",
            "struct graphic_matroid{",
            "\tdisjoint_set<> dsu;",
            "\tvector<array<int, 2>> e;",
            "\tvector<int> init_state;",
            "\tgraphic_matroid(int n, const vector<array<int, 2>> &e): dsu(n), e(e), init_state(n, -1){ }",
            "\tgraphic_matroid(int n, const vector<array<int, 2>> &e, const vector<int> &init_state): dsu(n), e(e), init_state(init_state){ }",
            "\tbool check(int i){",
            "\t\treturn !dsu.share(e[i][0], e[i][1]);",
            "\t}",
            "\tvoid insert(int i){",
            "\t\tdsu.merge(e[i][0], e[i][1]);",
            "\t}",
            "\tvoid clear(){",
            "\t\tdsu.p = init_state;",
            "\t}",
            "};",
            "struct Z2_linear_matroid{",
            "\tvector<long long> elements, basis;",
            "\tZ2_linear_matroid(const vector<long long> &elements): elements(elements){ }",
            "\tlong long reduce(long long x){",
            "\t\tfor(auto y: basis) x = min(x, x ^ y);",
            "\t\treturn x;",
            "\t}",
            "\tbool check(int i){",
            "\t\treturn reduce(elements[i]);",
            "\t}",
            "\tvoid insert(int i){",
            "\t\tlong long x = reduce(elements[i]);",
            "\t\tassert(x);",
            "\t\tbasis.insert(lower_bound(basis.begin(), basis.end(), x, greater<>()), x);",
            "\t}",
            "\tvoid clear(){",
            "\t\tbasis.clear();",
            "\t}",
            "};",
            "struct partition_matroid{",
            "\tvector<int> rem, group, limit;",
            "\tpartition_matroid(const vector<int> &group, const vector<int> &limit): rem(limit), group(group), limit(limit){",
            "\t\tfor(auto &g: group) assert(0 <= g && g < (int)limit.size());",
            "\t}",
            "\tbool check(int i){",
            "\t\treturn rem[group[i]];",
            "\t}",
            "\tvoid insert(int i){",
            "\t\t-- rem[group[i]];",
            "\t}",
            "\tvoid clear(){",
            "\t\trem = limit;",
            "\t}",
            "};",
            "// Skeleton of oracle",
            "struct matroid{",
            "\tmatroid(){ }",
            "\tbool check(int i){",
            "",
            "\t}",
            "\t// Only gets called when the resulting set is independent",
            "\tvoid insert(int i){",
            "",
            "\t}",
            "\tvoid clear(){",
            "\t\t",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}