{
    "tranxuanbach": {
        "prefix": "treap",
        "body": [
            "template<bool HAS_QUERY, bool HAS_UPDATE, bool HAS_FLIP, bool IS_COMMUTATIVE, class T, class U, class F1, class F2, class F3, class F4>",
            "struct treap_base{",
            "#define ifQ if constexpr(HAS_QUERY)",
            "#define ifU if constexpr(HAS_UPDATE)",
            "#define ifF if constexpr(HAS_FLIP)",
            "#define ifNC if constexpr(!IS_COMMUTATIVE)",
            "\tvector<unsigned int> priority;",
            "\tvector<int> pv, left, right, internal_size, lazy_flip;",
            "\tvector<T> data, subtr_data;",
            "\tvector<U> lazy;",
            "\tF1 TT; // monoid operation (always adjacent)",
            "\tT T_id; // monoid identity",
            "\tF2 UU; // monoid operation (superset, subset)",
            "\tU U_id; // monoid identity",
            "\tF3 UT; // action of U on T (superset, subset)",
            "\tF4 FlipT;",
            "\ttreap_base(F1 TT, T T_id, F2 UU, U U_id, F3 UT, F4 FlipT = plus<>()): TT(TT), T_id(T_id), UU(UU), U_id(U_id), UT(UT), FlipT(FlipT){ }",
            "\tvoid push(int u){",
            "\t\tifU if(lazy[u] != U_id){",
            "\t\t\tif(auto v = left[u]; ~v){",
            "\t\t\t\tdata[v] = UT(lazy[u], data[v]);",
            "\t\t\t\tlazy[v]  = UU(lazy[u], lazy[v]);",
            "\t\t\t\tifQ subtr_data[v] = UT(lazy[u], subtr_data[v]);",
            "\t\t\t}",
            "\t\t\tif(auto w = right[u]; ~w){",
            "\t\t\t\tdata[w] = UT(lazy[u], data[w]);",
            "\t\t\t\tlazy[w]  = UU(lazy[u], lazy[w]);",
            "\t\t\t\tifQ subtr_data[w] = UT(lazy[u], subtr_data[w]);",
            "\t\t\t}",
            "\t\t\tlazy[u] = U_id;",
            "\t\t}",
            "\t\tifF if(lazy_flip[u]){",
            "\t\t\tif(auto v = left[u]; ~v){",
            "\t\t\t\tswap(left[v], right[v]);",
            "\t\t\t\tlazy_flip[v] ^= 1;",
            "\t\t\t\tifQ ifNC subtr_data[v] = FlipT(subtr_data[v]);",
            "\t\t\t}",
            "\t\t\tif(auto w = right[u]; ~w){",
            "\t\t\t\tswap(left[w], right[w]);",
            "\t\t\t\tlazy_flip[w] ^= 1;",
            "\t\t\t\tifQ ifNC subtr_data[w] = FlipT(subtr_data[w]);",
            "\t\t\t}",
            "\t\t\tlazy_flip[u] = false;",
            "\t\t}",
            "\t}",
            "\ttemplate<bool UPDATE_STRUCTURE = true>",
            "\tvoid refresh(int u){",
            "\t\tif constexpr(UPDATE_STRUCTURE) internal_size[u] = 1;",
            "\t\tifQ subtr_data[u] = T_id;",
            "\t\tif(auto v = left[u]; ~v){",
            "\t\t\tif constexpr(UPDATE_STRUCTURE){",
            "\t\t\t\tpv[v] = u;",
            "\t\t\t\tinternal_size[u] += internal_size[v];",
            "\t\t\t}",
            "\t\t\tifQ{",
            "\t\t\t\tauto x = subtr_data[v];",
            "\t\t\t\tifU if(lazy[u] != U_id) x = UT(lazy[u], x);",
            "\t\t\t\tifF ifNC if(lazy_flip[u]) x = FlipT(x);",
            "\t\t\t\tsubtr_data[u] = x;",
            "\t\t\t}",
            "\t\t}",
            "\t\tifQ subtr_data[u] = TT(subtr_data[u], data[u]);",
            "\t\tif(auto w = right[u]; ~w){",
            "\t\t\tif constexpr(UPDATE_STRUCTURE){",
            "\t\t\t\tpv[w] = u;",
            "\t\t\t\tinternal_size[u] += internal_size[w];",
            "\t\t\t}",
            "\t\t\tifQ{",
            "\t\t\t\tauto x = subtr_data[w];",
            "\t\t\t\tifU if(lazy[u] != U_id) x = UT(lazy[u], x);",
            "\t\t\t\tifF ifNC if(lazy_flip[u]) x = FlipT(x);",
            "\t\t\t\tsubtr_data[u] = TT(subtr_data[u], x);",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tvoid heapify(int u){",
            "\t\tif(~u){",
            "\t\t\tint v = u;",
            "\t\t\tif(~left[u] && priority[left[u]] > priority[v]) v = left[u];",
            "\t\t\tif(~right[u] && priority[right[u]] > priority[v]) v = right[u];",
            "\t\t\tif(u != v) swap(priority[u], priority[v]), heapify(v);",
            "\t\t}",
            "\t}",
            "\ttemplate<class output_stream>",
            "\toutput_stream &print(output_stream &out, int root){",
            "\t\t#ifdef LOCAL",
            "\t\tout << \"[\";",
            "\t\ttraverse(root, [&](int root){ out << data[root] << \", \"; });",
            "\t\tout << \"\\b\\b]\\n\";",
            "\t\t#endif",
            "\t\treturn out;",
            "\t}",
            "\tvector<int> dead_node;",
            "\tint new_node(const T &x, int v = -1, int w = -1){",
            "\t\t// Among all seeds in range [0, 1769666],",
            "\t\t// 72718 has the longest sequence of unique numbers, which is of length 362129.",
            "\t\tstatic mt19937 rng(72718);",
            "\t\tint u;",
            "\t\tif(dead_node.empty()){",
            "\t\t\tu = (int)data.size();",
            "\t\t\tpv.push_back(-1);",
            "\t\t\tleft.push_back(v);",
            "\t\t\tright.push_back(w);",
            "\t\t\tpriority.push_back(rng());",
            "\t\t\tinternal_size.push_back(1);",
            "\t\t\tdata.push_back(x);",
            "\t\t\tifQ subtr_data.push_back(x);",
            "\t\t\tifU lazy.push_back(U_id);",
            "\t\t\tifF lazy_flip.push_back(0);",
            "\t\t}",
            "\t\telse{",
            "\t\t\tu = dead_node.back();",
            "\t\t\tdead_node.pop_back();",
            "\t\t\tpv[u] = -1;",
            "\t\t\tleft[u] = v;",
            "\t\t\tright[u] = w;",
            "\t\t\tpriority[u] = rng();",
            "\t\t\tinternal_size[u] = 1;",
            "\t\t\tdata[u] = x;",
            "\t\t\tifQ subtr_data[u] = x;",
            "\t\t\tifU lazy[u] = U_id;",
            "\t\t\tifF lazy_flip[u] = 0;",
            "\t\t}",
            "\t\theapify(u);",
            "\t\trefresh(u);",
            "\t\treturn u;",
            "\t}",
            "\t// O(1)",
            "\tint size(int root) const{",
            "\t\treturn ~root ? internal_size[root] : 0;",
            "\t}",
            "\t// Split to [-inf, x), [x, inf)",
            "\t// Data must be sorted <",
            "\t// O(log(n))",
            "\tpair<int, int> split_by_key(int root, const T &x){",
            "\t\tif(!~root) return {-1, -1};",
            "\t\tpush(root);",
            "\t\tif(data[root] < x){",
            "\t\t\tauto [a, b] = split_by_key(right[root], x);",
            "\t\t\tright[root] = a, refresh(root);",
            "\t\t\treturn {root, b};",
            "\t\t}",
            "\t\telse{",
            "\t\t\tauto [a, b] = split_by_key(left[root], x);",
            "\t\t\tleft[root] = b, refresh(root);",
            "\t\t\treturn {a, root};",
            "\t\t}",
            "\t}",
            "\t// Split to [-inf, x), [x, inf)",
            "\t// Data must be sorted cmp",
            "\t// O(log(n))",
            "\ttemplate<class Compare>",
            "\tpair<int, int> split_by_key(int root, const T &x, Compare cmp){",
            "\t\tif(!~root) return {-1, -1};",
            "\t\tpush(root);",
            "\t\tif(cmp(data[root], x)){",
            "\t\t\tauto [a, b] = split_by_key(right[root], x, cmp);",
            "\t\t\tright[root] = a, refresh(root);",
            "\t\t\treturn {root, b};",
            "\t\t}",
            "\t\telse{",
            "\t\t\tauto [a, b] = split_by_key(left[root], x, cmp);",
            "\t\t\tleft[root] = b, refresh(root);",
            "\t\t\treturn {a, root};",
            "\t\t}",
            "\t}",
            "\t// Split into [0, pos), [pos, size(root))",
            "\t// O(log(n))",
            "\tpair<int, int> split_by_order(int root, int pos){",
            "\t\tif(!~root){",
            "\t\t\tassert(pos == 0);",
            "\t\t\treturn {-1, -1};",
            "\t\t}",
            "\t\tpush(root);",
            "\t\tif(size(left[root]) < pos){",
            "\t\t\tauto [a, b] = split_by_order(right[root], pos - size(left[root]) - 1);",
            "\t\t\tright[root] = a, refresh(root);",
            "\t\t\treturn {root, b};",
            "\t\t}",
            "\t\telse{",
            "\t\t\tauto [a, b] = split_by_order(left[root], pos);",
            "\t\t\tleft[root] = b, refresh(root);",
            "\t\t\treturn {a, root};",
            "\t\t}",
            "\t}",
            "\t// Split to [true Segment], [false Segment]",
            "\t// Data must be sorted by pred",
            "\t// O(log(n))",
            "\tpair<int, int> split_by_pred(int root, auto pred){",
            "\t\tif(!~root) return {-1, -1};",
            "\t\tpush(root);",
            "\t\tif(pred(root)){",
            "\t\t\tauto [a, b] = split_by_pred(right[root], pred);",
            "\t\t\tright[root] = a, refresh(root);",
            "\t\t\treturn {root, b};",
            "\t\t}",
            "\t\telse{",
            "\t\t\tauto [a, b] = split_by_pred(left[root], pred);",
            "\t\t\tleft[root] = b, refresh(root);",
            "\t\t\treturn {a, root};",
            "\t\t}",
            "\t}",
            "\t// Split into [0, l), [l, r), [r, size(root))",
            "\t// O(log(n))",
            "\tarray<int, 3> split_to_three(int u, int l, int r){",
            "\t\tassert(0 <= l && l <= r && r <= size(u));",
            "\t\tif(!~u) return {-1, -1, -1};",
            "\t\tint a, b, c;",
            "\t\ttie(a, b) = split_by_order(u, l);",
            "\t\ttie(b, c) = split_by_order(b, r - l);",
            "\t\treturn {a, b, c};",
            "\t}",
            "\t// Split into [0, pos[0]), [pos[0], pos[1]), ..., [pos[size(pos) - 1], size(root))",
            "\t// O(k * log(n))",
            "\tvector<int> split(int root, const vector<int> &pos){",
            "\t\tassert(is_sorted(pos.begin(), pos.end()));",
            "\t\tif(pos.empty()) return {root};",
            "\t\tassert(0 <= pos.front() && pos.back() <= size(root));",
            "\t\tif(!~root) return vector<int>((int)pos.size() + 1, -1);",
            "\t\tvector<int> res((int)pos.size() + 1);",
            "\t\tres[0] = root;",
            "\t\tfor(auto i = 0, last = 0; i < (int)pos.size(); ++ i){",
            "\t\t\ttie(res[i], res[i + 1]) = split_by_order(res[i], pos[i] - last);",
            "\t\t\tlast = pos[i];",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// Append u and v",
            "\t// O(log(n))",
            "\tint append(int u, int v){",
            "\t\tif(!~u || !~v) return ~u ? u : v;",
            "\t\tpush(u);",
            "\t\tpush(v);",
            "\t\tif(priority[v] < priority[u]){",
            "\t\t\tright[u] = append(right[u], v), refresh(u);",
            "\t\t\treturn u;",
            "\t\t}",
            "\t\telse{",
            "\t\t\tleft[v] = append(u, left[v]), refresh(v);",
            "\t\t\treturn v;",
            "\t\t}",
            "\t}",
            "\t// Append treaps in order",
            "\t// O((list length) * log(n))",
            "\tint append(const vector<int> &list){",
            "\t\treturn accumulate(list.begin(), list.end(), -1, [&](int u, int v){ return append(u, v); });",
            "\t}",
            "\t// Data must be sorted by <",
            "\t// O(log(n))",
            "\tint insert_node_by_key(int root, int u){",
            "\t\tif(!~root) return u;",
            "\t\tpush(root);",
            "\t\tif(priority[root] > priority[u]){",
            "\t\t\tif(data[root] < data[u]) right[root] = insert_node_by_key(right[root], u);",
            "\t\t\telse left[root] = insert_node_by_key(left[root], u);",
            "\t\t\trefresh(root);",
            "\t\t\treturn root;",
            "\t\t}",
            "\t\tauto [a, b] = split_by_key(root, data[u]);",
            "\t\tleft[u] = a, right[u] = b;",
            "\t\trefresh(u);",
            "\t\treturn u;",
            "\t}",
            "\t// Data must be sorted by <",
            "\t// O(log(n))",
            "\tint insert_by_key(int root, const T &x){",
            "\t\treturn insert_node_by_key(root, new_node(x));",
            "\t}",
            "\t// Data must be sorted by cmp",
            "\t// O(log(n))",
            "\ttemplate<class Compare>",
            "\tint insert_node_by_key(int root, int u, Compare cmp){",
            "\t\tif(!~root) return u;",
            "\t\tpush(root);",
            "\t\tif(priority[root] > priority[u]){",
            "\t\t\tif(cmp(data[root], data[u])) right[root] = insert_node_by_key(right[root], u, cmp);",
            "\t\t\telse left[root] = insert_node_by_key(left[root], u, cmp);",
            "\t\t\trefresh(root);",
            "\t\t\treturn root;",
            "\t\t}",
            "\t\tauto [a, b] = split_by_key(root, data[u], cmp);",
            "\t\tleft[u] = a, right[u] = b;",
            "\t\trefresh(u);",
            "\t\treturn u;",
            "\t}",
            "\t// Data must be sorted by cmp",
            "\t// O(log(n))",
            "\ttemplate<class Compare>",
            "\tint insert_by_key(int root, const T &x, Compare cmp){",
            "\t\treturn insert_node_by_key(root, new_node(x), cmp);",
            "\t}",
            "\t// O(log(n))",
            "\tint insert_node_by_order(int root, int pos, int u){",
            "\t\tif(!~root){",
            "\t\t\tassert(pos == 0);",
            "\t\t\treturn u;",
            "\t\t}",
            "\t\tpush(root);",
            "\t\tif(priority[root] > priority[u]){",
            "\t\t\tif(size(left[root]) < pos) right[root] = insert_node_by_order(right[root], pos - size(left[root]) - 1, u);",
            "\t\t\telse left[root] = insert_node_by_order(left[root], pos, u);",
            "\t\t\trefresh(root);",
            "\t\t\treturn root;",
            "\t\t}",
            "\t\tauto [a, b] = split_by_order(root, pos);",
            "\t\tleft[u] = a, right[u] = b;",
            "\t\trefresh(u);",
            "\t\treturn u;",
            "\t}",
            "\t// O(log(n))",
            "\tint insert_by_order(int root, int pos, const T &x){",
            "\t\treturn insert_node_by_order(root, pos, new_node(x));",
            "\t}",
            "\t// Data must be sorted by pred",
            "\t// O(log(n))",
            "\tint insert_node_by_pred(int root, auto pred, int u){",
            "\t\tif(!~root) return u;",
            "\t\tpush(root);",
            "\t\tif(priority[root] > priority[u]){",
            "\t\t\tif(pred(data[root])) right[root] = insert_node_by_pred(right[root], pred, u);",
            "\t\t\telse left[root] = insert_node_by_pred(left[root], pred, u);",
            "\t\t\trefresh(root);",
            "\t\t\treturn root;",
            "\t\t}",
            "\t\tauto [a, b] = split_by_pred(root, pred);",
            "\t\tleft[u] = a, right[u] = b;",
            "\t\trefresh(u);",
            "\t\treturn u;",
            "\t}",
            "\t// O(log(n))",
            "\tint insert_by_pred(int root, auto pred, const T &x){",
            "\t\treturn insert_node_by_pred(root, pred, new_node(x));",
            "\t}",
            "\t// Erase the smallest element >= x.",
            "\t// Return -2 when no such element exists",
            "\t// Data must be sorted by <",
            "\t// O(log(n))",
            "\tint erase_by_key(int root, const T &x){",
            "\t\tif(!~root) return -2;",
            "\t\tpush(root);",
            "\t\tif(data[root] < x){",
            "\t\t\tint u = erase_by_key(right[root], x);",
            "\t\t\tif(u == -2) return -2;",
            "\t\t\tright[root] = u;",
            "\t\t}",
            "\t\telse{",
            "\t\t\tint u = erase_by_key(left[root], x);",
            "\t\t\tif(u == -2){",
            "\t\t\t\tdead_node.push_back(root);",
            "\t\t\t\treturn append(left[root], right[root]);",
            "\t\t\t}",
            "\t\t\tleft[root] = u;",
            "\t\t}",
            "\t\trefresh(root);",
            "\t\treturn root;",
            "\t}",
            "\t// Erase the smallest element >= x.",
            "\t// Return -2 when no such element exists",
            "\t// Data must be sorted by cmp",
            "\t// O(log(n))",
            "\ttemplate<class Compare>",
            "\tint erase_by_key(int root, const T &x, Compare cmp){",
            "\t\tif(!~root) return -2;",
            "\t\tpush(root);",
            "\t\tif(cmp(data[root], x)){",
            "\t\t\tint u = erase_by_key(right[root], x, cmp);",
            "\t\t\tif(u == -2) return -2;",
            "\t\t\tright[root] = u;",
            "\t\t}",
            "\t\telse{",
            "\t\t\tint u = erase_by_key(left[root], x, cmp);",
            "\t\t\tif(u == -2){",
            "\t\t\t\tdead_node.push_back(root);",
            "\t\t\t\treturn append(left[root], right[root]);",
            "\t\t\t}",
            "\t\t\tleft[root] = u;",
            "\t\t}",
            "\t\trefresh(root);",
            "\t\treturn root;",
            "\t}",
            "\t// O(log(n))",
            "\tint erase_by_order(int root, int pos){",
            "\t\tassert(~root);",
            "\t\tpush(root);",
            "\t\tif(size(left[root]) == pos){",
            "\t\t\tdead_node.push_back(root);",
            "\t\t\treturn append(left[root], right[root]);",
            "\t\t}",
            "\t\tif(size(left[root]) < pos) right[root] = erase_by_order(right[root], pos - size(left[root]) - 1);",
            "\t\telse left[root] = erase_by_order(left[root], pos);",
            "\t\trefresh(root);",
            "\t\treturn root;",
            "\t}",
            "\t// Erase the smallest element x with !pred(x)",
            "\t// Return -2 when no such element exists",
            "\t// Data must be sorted by pred",
            "\t// O(log(n))",
            "\tint erase_by_pred(int root, auto pred){",
            "\t\tif(!~root) return -2;",
            "\t\tpush(root);",
            "\t\tif(pred(data[root])){",
            "\t\t\tint u = erase_by_pred(right[root], pred);",
            "\t\t\tif(u == -2) return -2;",
            "\t\t\tright[root] = u;",
            "\t\t}",
            "\t\telse{",
            "\t\t\tint u = erase_by_pred(left[root], pred);",
            "\t\t\tif(u == -2){",
            "\t\t\t\tdead_node.push_back(root);",
            "\t\t\t\treturn append(left[root], right[root]);",
            "\t\t\t}",
            "\t\t\tleft[root] = u;",
            "\t\t}",
            "\t\trefresh(root);",
            "\t\treturn root;",
            "\t}",
            "\t// O(# of elements erased)",
            "\tvoid erase(int root){",
            "\t\tif(!~root) return;",
            "\t\tdead_node.push_back(root);",
            "\t\tfor(auto beg = (int)dead_node.size() - 1; beg < (int)dead_node.size(); ++ beg){",
            "\t\t\tint u = dead_node[beg];",
            "\t\t\tif(~left[u]) dead_node.push_back(left[u]);",
            "\t\t\tif(~right[u]) dead_node.push_back(right[u]);",
            "\t\t}",
            "\t}",
            "\t// Data must be sorted by <",
            "\t// O(min(size(u), size(v)) * log(size ratio))",
            "\tint unite_by_key(int u, int v){",
            "\t\tif(!~u || !~v) return ~u ? u : v;",
            "\t\tif(priority[u] < priority[v]) swap(u, v);",
            "\t\tauto [a, b] = split_by_key(v, data[u]);",
            "\t\tpush(u);",
            "\t\tleft[u] = unite_by_key(left[u], a);",
            "\t\tright[u] = unite_by_key(right[u], b);",
            "\t\trefresh(u);",
            "\t\treturn u;",
            "\t}",
            "\t// Data must be sorted by cmp",
            "\t// O(min(size(u), size(v)) * log(size ratio))",
            "\ttemplate<class Compare>",
            "\tint unite_by_key(int u, int v, Compare cmp){",
            "\t\tif(!~u || !~v) return ~u ? u : v;",
            "\t\tif(priority[u] < priority[v]) swap(u, v);",
            "\t\tauto [a, b] = split_by_key(v, data[u], cmp);",
            "\t\tpush(u);",
            "\t\tleft[u] = unite_by_key(left[u], a, cmp);",
            "\t\tright[u] = unite_by_key(right[u], b, cmp);",
            "\t\trefresh(u);",
            "\t\treturn u;",
            "\t}",
            "\tvoid traverse(int root, auto f){",
            "\t\tif(~root){",
            "\t\t\tpush(root);",
            "\t\t\ttraverse(left[root], f);",
            "\t\t\tf(root);",
            "\t\t\ttraverse(right[root], f);",
            "\t\t\trefresh(root);",
            "\t\t}",
            "\t}",
            "\tint build(int n){",
            "\t\treturn build(vector<T>(n, T_id));",
            "\t}",
            "\tint build(int n, T init){",
            "\t\treturn build(vector<T>(n, init));",
            "\t}",
            "\ttemplate<class V>",
            "\tint build(const vector<V> &a){",
            "\t\tauto recurse = [&](auto self, int l, int r)->int{",
            "\t\t\tif(l == r) return -1;",
            "\t\t\tint m = l + (r - l >> 1);",
            "\t\t\treturn new_node(a[m], self(self, l, m), self(self, m + 1, r));",
            "\t\t};",
            "\t\treturn recurse(recurse, 0, (int)a.size());",
            "\t}",
            "\t// Data must be sorted by <",
            "\t// O(log(n))",
            "\tint order_of_key(int root, const T &x){",
            "\t\tint res = 0;",
            "\t\twhile(~root){",
            "\t\t\tpush(root);",
            "\t\t\tif(data[root] < x){",
            "\t\t\t\tres += size(left[root]) + 1;",
            "\t\t\t\troot = right[root];",
            "\t\t\t}",
            "\t\t\telse root = left[root];",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// Data must be sorted by cmp",
            "\t// O(log(n))",
            "\ttemplate<class Compare>",
            "\tint order_of_key(int root, const T &x, Compare cmp){",
            "\t\tint res = 0;",
            "\t\twhile(~root){",
            "\t\t\tpush(root);",
            "\t\t\tif(cmp(data[root], x)){",
            "\t\t\t\tres += size(left[root]) + 1;",
            "\t\t\t\troot = right[root];",
            "\t\t\t}",
            "\t\t\telse root = left[root];",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// O(log(n))",
            "\tint node_order(int root, int u){",
            "\t\tassert(~root && ~u);",
            "\t\tint res = size(left[u]);",
            "\t\twhile(root != u){",
            "\t\t\tpush(pv[u]);",
            "\t\t\tif(right[pv[u]] == u) res += size(left[pv[u]]) + 1;",
            "\t\t\tu = pv[u];",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// Data must be sorted by pred",
            "\t// O(log(n))",
            "\tint partition_point(int root, auto pred){",
            "\t\tint res = 0;",
            "\t\twhile(~root){",
            "\t\t\tpush(root);",
            "\t\t\tif(pred(data[root])){",
            "\t\t\t\tres += size(left[root]) + 1;",
            "\t\t\t\troot = right[root];",
            "\t\t\t}",
            "\t\t\telse root = left[root];",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// O(log(n))",
            "\tvoid set(int root, int p, const T &x){",
            "\t\tassert(0 <= p && p < size(root));",
            "\t\tint u = root;",
            "\t\twhile(true){",
            "\t\t\tpush(u);",
            "\t\t\tif(size(left[u]) == p){",
            "\t\t\t\tdata[u] = x;",
            "\t\t\t\trefresh<false>(u);",
            "\t\t\t\tbreak;",
            "\t\t\t}",
            "\t\t\tif(size(left[u]) > p) u = left[u];",
            "\t\t\telse{",
            "\t\t\t\tp -= size(left[u]) + 1;",
            "\t\t\t\tu = right[u];",
            "\t\t\t}",
            "\t\t}",
            "\t\twhile(u != root){",
            "\t\t\tu = pv[u];",
            "\t\t\trefresh<false>(u);",
            "\t\t}",
            "\t}",
            "\t// O(log(n))",
            "\tT query(int root, int p){",
            "\t\tassert(0 <= p && p < size(root));",
            "\t\twhile(true){",
            "\t\t\tpush(root);",
            "\t\t\tif(size(left[root]) == p) return data[root];",
            "\t\t\tif(size(left[root]) > p) root = left[root];",
            "\t\t\telse{",
            "\t\t\t\tp -= size(left[root]) + 1;",
            "\t\t\t\troot = right[root];",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tT _query(int root, int ql, int qr){",
            "\t\tstatic_assert(HAS_QUERY);",
            "\t\tif(!~root || qr <= 0 || size(root) <= ql) return T_id;",
            "\t\tif(ql <= 0 && size(root) <= qr) return subtr_data[root];",
            "\t\tpush(root);",
            "\t\tT res = T_id;",
            "\t\tif(ql < size(left[root])) res = _query(left[root], ql, qr);",
            "\t\tif(ql <= size(left[root]) && size(left[root]) + 1 <= qr) res = TT(res, data[root]);",
            "\t\tif(size(left[root]) + 1 < qr) res = TT(res, _query(right[root], ql - size(left[root]) - 1, qr - size(left[root]) - 1));",
            "\t\treturn res;",
            "\t}",
            "\t// O(log(n))",
            "\tT query(int root, int ql, int qr){",
            "\t\tstatic_assert(HAS_QUERY);",
            "\t\tassert(0 <= ql && ql <= qr && qr <= size(root));",
            "\t\treturn ql == qr ? T_id : _query(root, ql, qr);",
            "\t}",
            "\t// O(log(n))",
            "\tvoid update(int root, int p, const U &f){",
            "\t\tstatic_assert(HAS_UPDATE);",
            "\t\tassert(0 <= p && p < size(root));",
            "\t\tint u = root;",
            "\t\twhile(true){",
            "\t\t\tpush(u);",
            "\t\t\tif(size(left[u]) == p){",
            "\t\t\t\tdata[u] = UT(f, data[u]);",
            "\t\t\t\trefresh<false>(u);",
            "\t\t\t\tbreak;",
            "\t\t\t}",
            "\t\t\tif(size(left[u]) > p) u = left[u];",
            "\t\t\telse{",
            "\t\t\t\tp -= size(left[u]) + 1;",
            "\t\t\t\tu = right[u];",
            "\t\t\t}",
            "\t\t}",
            "\t\twhile(u != root){",
            "\t\t\tu = pv[u];",
            "\t\t\trefresh<false>(u);",
            "\t\t}",
            "\t}",
            "\t// O(log(n))",
            "\tvoid _update(int root, int ql, int qr, const U &f){",
            "\t\tstatic_assert(HAS_UPDATE);",
            "\t\tif(!~root || qr <= 0 || size(root) <= ql) return;",
            "\t\tif(ql <= 0 && size(root) <= qr){",
            "\t\t\tdata[root] = UT(f, data[root]);",
            "\t\t\tlazy[root] = UU(f, lazy[root]);",
            "\t\t\trefresh<false>(root);",
            "\t\t\treturn;",
            "\t\t}",
            "\t\tpush(root);",
            "\t\tif(ql < size(left[root])) _update(left[root], ql, qr, f);",
            "\t\tif(ql <= size(left[root]) && size(left[root]) + 1 <= qr) data[root] = UT(f, data[root]);",
            "\t\tif(size(left[root]) + 1 < qr) _update(right[root], ql - size(left[root]) - 1, qr - size(left[root]) - 1, f);",
            "\t\trefresh<false>(root);",
            "\t}",
            "\t// O(log(n))",
            "\tvoid update(int root, int ql, int qr, const U &f){",
            "\t\tstatic_assert(HAS_UPDATE);",
            "\t\tassert(0 <= ql && ql <= qr && qr <= size(root));",
            "\t\tif(ql == qr) return;",
            "\t\t_update(root, ql, qr, f);",
            "\t}",
            "\t// O(log(n))",
            "\tvoid _flip(int root, int ql, int qr){",
            "\t\tstatic_assert(HAS_FLIP);",
            "\t\tpush(root);",
            "\t\tif(qr <= size(left[root])){",
            "\t\t\t_flip(left[root], ql, qr);",
            "\t\t\trefresh<false>(root);",
            "\t\t}",
            "\t\telse if(size(left[root]) + 1 <= ql){",
            "\t\t\t_flip(right[root], ql - size(left[root]) - 1, qr - size(left[root]) - 1);",
            "\t\t\trefresh<false>(root);",
            "\t\t}",
            "\t\telse{",
            "\t\t\tauto [ar, br] = split_by_order(right[root], qr - size(left[root]) - 1);",
            "\t\t\tauto [al, bl] = split_by_order(left[root], ql);",
            "\t\t\tif(~bl){",
            "\t\t\t\tpush(bl);",
            "\t\t\t\tswap(left[bl], right[bl]);",
            "\t\t\t\tlazy_flip[bl] ^= 1;",
            "\t\t\t\trefresh<false>(bl);",
            "\t\t\t}",
            "\t\t\tif(~ar){",
            "\t\t\t\tpush(ar);",
            "\t\t\t\tswap(left[ar], right[ar]);",
            "\t\t\t\tlazy_flip[ar] ^= 1;",
            "\t\t\t\trefresh<false>(ar);",
            "\t\t\t}",
            "\t\t\tleft[root] = append(al, ar);",
            "\t\t\tright[root] = append(bl, br);",
            "\t\t\trefresh(root);",
            "\t\t}",
            "\t}",
            "\t// O(log(n))",
            "\tvoid flip(int root, int ql, int qr){",
            "\t\tstatic_assert(HAS_FLIP);",
            "\t\tassert(0 <= ql && ql <= qr && qr <= size(root));",
            "\t\tif(!~root || qr - ql <= 1) return;",
            "\t\t_flip(root, ql, qr);",
            "\t}",
            "\t// pred(sum[ql, r)) is T, T, ..., T, F, F, ..., F",
            "\t// Returns max r with T",
            "\t// O(log(n))",
            "\tint max_pref(int u, int ql, auto pred){",
            "\t\tstatic_assert(HAS_QUERY);",
            "\t\tint n = size(u);",
            "\t\tassert(0 <= ql && ql <= n && pred(T_id));",
            "\t\tif(ql == n) return n;",
            "\t\tT sum = T_id;",
            "\t\tauto recurse = [&](auto self, int u, int l)->int{",
            "\t\t\tint r = l + size(u);",
            "\t\t\tif(!~u || r <= ql) return n;",
            "\t\t\tif(ql <= l && pred(TT(sum, subtr_data[u]))){",
            "\t\t\t\tsum = TT(sum, subtr_data[u]);",
            "\t\t\t\treturn n;",
            "\t\t\t}",
            "\t\t\tpush(u);",
            "\t\t\tif(auto p = self(self, left[u], l); p < n) return p;",
            "\t\t\tl += size(left[u]);",
            "\t\t\treturn ql <= l && !pred(sum = TT(sum, data[u])) ? l : self(self, right[u], l + 1);",
            "\t\t};",
            "\t\treturn recurse(recurse, u, 0);",
            "\t}",
            "\t// pred(sum[l, qr)) is F, F, ..., F, T, T, ..., T",
            "\t// Returns min l with T",
            "\t// O(log(n))",
            "\tint max_suff(int u, int qr, auto pred){",
            "\t\tstatic_assert(HAS_QUERY);",
            "\t\tint n = size(u);",
            "\t\tassert(0 <= qr && qr <= n && pred(T_id));",
            "\t\tif(qr == 0) return 0;",
            "\t\tT sum = T_id;",
            "\t\tauto recurse = [&](auto self, int u, int r)->int{",
            "\t\t\tint l = r - size(u);",
            "\t\t\tif(!~u || qr <= l) return 0;",
            "\t\t\tif(r <= qr && pred(TT(subtr_data[u], sum))){",
            "\t\t\t\tsum = TT(subtr_data[u], sum);",
            "\t\t\t\treturn 0;",
            "\t\t\t}",
            "\t\t\tpush(u);",
            "\t\t\tif(auto p = self(self, right[u], r); p > 0) return p;",
            "\t\t\tr -= size(right[u]);",
            "\t\t\treturn r <= qr && !pred(sum = TT(data[u], sum)) ? r : self(self, left[u], r - 1);",
            "\t\t};",
            "\t\treturn recurse(recurse, u, n);",
            "\t}",
            "#undef ifQ",
            "#undef ifU",
            "#undef ifF",
            "#undef ifNC",
            "};",
            "",
            "template<class T>",
            "auto make_treap(){",
            "\tusing U = int;",
            "\tauto _TT = [&](T, T)->T{ return T{}; };",
            "\tauto _UU = [&](U, U)->U{ return U{}; };",
            "\tauto _UT = [&](U, T)->T{ return T{}; };",
            "\tauto _FlipT = [&](T)->T{ return T{}; };",
            "\treturn treap_base<false, false, false, false, T, U, decltype(_TT), decltype(_UU), decltype(_UT), decltype(_FlipT)>(_TT, T{}, _UU, U{}, _UT, _FlipT);",
            "}",
            "// Supports flip",
            "template<class T, class F1>",
            "auto make_F_treap(F1 FlipT){",
            "\tusing U = int;",
            "\tauto _TT = [&](T, T)->T{ return T{}; };",
            "\tauto _UU = [&](U, U)->U{ return U{}; };",
            "\tauto _UT = [&](U, T)->T{ return T{}; };",
            "\treturn treap_base<false, false, true, false, T, U, decltype(_TT), decltype(_UU), decltype(_UT), F1>(_TT, T{}, _UU, U{}, _UT, FlipT);",
            "}",
            "// Supports query",
            "template<class T, class F1>",
            "auto make_Q_treap(F1 TT, T T_id){",
            "\tusing U = int;",
            "\tauto _UU = [&](U, U)->U{ return U{}; };",
            "\tauto _UT = [&](U, T)->T{ return T{}; };",
            "\tauto _FlipT = [&](T)->T{ return T{}; };",
            "\treturn treap_base<true, false, false, false, T, U, F1, decltype(_UU), decltype(_UT), decltype(_FlipT)>(TT, T_id, _UU, U{}, _UT, _FlipT);",
            "}",
            "// Supports query and update",
            "template<class T, class F1, class F2, class U, class F3>",
            "auto make_QU_treap(F1 TT, T T_id, F2 UU, U U_id, F3 UT){",
            "\tauto _FlipT = [&](T)->T{ return T{}; };",
            "\treturn treap_base<true, true, false, false, T, U, F1, F2, F3, decltype(_FlipT)>(TT, T_id, UU, U_id, UT, _FlipT);",
            "}",
            "// Supports commutative query, update, and flip",
            "template<class T, class U, class F1, class F2, class F3>",
            "auto make_cQUF_treap(F1 TT, T T_id, F2 UU, U U_id, F3 UT){",
            "\tauto _FlipT = [&](T)->T{ return T{}; };",
            "\treturn treap_base<true, true, true, true, T, U, F1, F2, F3, decltype(_FlipT)>(TT, T_id, UU, U_id, UT, _FlipT);",
            "}",
            "// Supports query, update, and flip",
            "template<class T, class U, class F1, class F2, class F3, class F4>",
            "auto make_QUF_treap(F1 TT, T T_id, F2 UU, U U_id, F3 UT, F4 FlipT){",
            "\treturn treap_base<true, true, true, false, T, U, F1, F2, F3, F4>(TT, T_id, UU, U_id, UT, FlipT);",
            "}"
        ],
        "description": "tranxuanbach"
    }
}