{
    "tranxuanbach": {
        "prefix": "range_mex_query_solver_offline",
        "body": [
            "struct range_mex_query_solver_offline{",
            "\tint n;",
            "\tvector<int> a;",
            "\tvector<array<int, 3>> queries;",
            "\trange_mex_query_solver_offline(const vector<int> &a): n((int)a.size()), a(a){",
            "\t\tfor(auto x: a) assert(x >= 0);",
            "\t}",
            "\tvoid query(int qi, int l, int r){",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\tqueries.push_back({l, r, qi});",
            "\t}",
            "\t// f(query id, answer)",
            "\t// O((n + q) * log(n))",
            "\tvoid solve(auto f){",
            "\t\tsort(queries.begin(), queries.end());",
            "\t\tint size = 1;",
            "\t\twhile(size <= n) size <<= 1;",
            "\t\tint log = __lg(size);",
            "\t\tvector<int> seg(size << 1, n);",
            "\t\twhile(!queries.empty() && queries.back()[0] == n){",
            "\t\t\tf(queries.back()[2], 0);",
            "\t\t\tqueries.pop_back();",
            "\t\t}",
            "\t\tfor(auto l = n - 1; l >= 0; -- l){",
            "\t\t\tint x = size + min(a[l], n);",
            "\t\t\tseg[x] = l;",
            "\t\t\tfor(auto i = 1; i <= log; ++ i) seg[x >> i] = max(",
            "\t\t\t\tseg[(x >> i) << 1], seg[(x >> i) << 1 | 1]);",
            "\t\t\twhile(!queries.empty() && queries.back()[0] == l){",
            "\t\t\t\tint mx = -1, ql = size;",
            "\t\t\t\tdo{",
            "\t\t\t\t\twhile(~ql & 1) ql >>= 1;",
            "\t\t\t\t\tif(max(mx, seg[ql]) >= queries.back()[1]){",
            "\t\t\t\t\t\twhile(ql < size){",
            "\t\t\t\t\t\t\tql <<= 1;",
            "\t\t\t\t\t\t\tif(max(mx, seg[ql]) < queries.back()[1]) mx = max(mx, seg[ql ++]);",
            "\t\t\t\t\t\t}",
            "\t\t\t\t\t\tf(queries.back()[2], ql - size);",
            "\t\t\t\t\t\tgoto _RANGE_MEX_QUERY_SOLVER_NEXT;",
            "\t\t\t\t\t}",
            "\t\t\t\t\tmx = max(mx, seg[ql]);",
            "\t\t\t\t\t++ ql;",
            "\t\t\t\t}while((ql & -ql) != ql);",
            "\t\t\t\tf(queries.back()[2], n + 1);",
            "\t\t\t\t_RANGE_MEX_QUERY_SOLVER_NEXT:;",
            "\t\t\t\tqueries.pop_back();",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}