{
    "tranxuanbach": {
        "prefix": "block_minmax_processor_2d",
        "body": [
            "// Block min by default. Set cmp = greater for block max",
            "// Returns indices",
            "// O(n m)",
            "template<class T, class Compare = less<>>",
            "vector<vector<array<int, 2>>> block_minmax_processor_2d(const vector<vector<T>> &a, int xblock, int yblock, Compare cmp = less<>()){",
            "\tint n = (int)a.size(), m = (int)a[0].size();",
            "\tassert(1 <= xblock && xblock <= n && 1 <= yblock && yblock <= m);",
            "\tvector<vector<int>> res_x(n, vector<int>(m - yblock + 1));",
            "\tfor(auto i = 0; i < n; ++ i){",
            "\t\tdeque<int> dq;",
            "\t\tfor(auto j = 0; j < yblock - 1; ++ j){",
            "\t\t\twhile(!dq.empty() && !cmp(a[i][dq.back()], a[i][j])) dq.pop_back();",
            "\t\t\tdq.push_back(j);",
            "\t\t}",
            "\t\tfor(auto j = yblock - 1; j < m; ++ j){",
            "\t\t\twhile(!dq.empty() && !cmp(a[i][dq.back()], a[i][j])) dq.pop_back();",
            "\t\t\tdq.push_back(j);",
            "\t\t\tres_x[i][j - yblock + 1] = dq.front();",
            "\t\t\tif(dq.front() == j - yblock + 1) dq.pop_front();",
            "\t\t}",
            "\t}",
            "\tvector<vector<array<int, 2>>> res(n - xblock + 1, vector<array<int, 2>>(m - yblock + 1));",
            "\tfor(auto y = 0; y <= m - yblock; ++ y){",
            "\t\tdeque<array<int, 2>> dq;",
            "\t\tfor(auto x = 0; x < xblock - 1; ++ x){",
            "\t\t\twhile(!dq.empty() && !cmp(a[dq.back()[0]][res_x[dq.back()[0]][y]], a[x][res_x[x][y]])) dq.pop_back();",
            "\t\t\tdq.push_back({x, res_x[x][y]});",
            "\t\t}",
            "\t\tfor(auto x = xblock - 1; x < n; ++ x){",
            "\t\t\twhile(!dq.empty() && !cmp(a[dq.back()[0]][res_x[dq.back()[0]][y]], a[x][res_x[x][y]])) dq.pop_back();",
            "\t\t\tdq.push_back({x, res_x[x][y]});",
            "\t\t\tres[x - xblock + 1][y] = dq.front();",
            "\t\t\tif(dq.front()[0] == x - xblock + 1) dq.pop_front();",
            "\t\t}",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}