{
    "tranxuanbach": {
        "prefix": "prufer_code",
        "body": [
            "// O(n)",
            "vector<array<int, 2>> prufer_decode(vector<int> code){",
            "\tint n = (int)code.size() + 2;",
            "\tvector<int> deg(n, 1);",
            "\tfor(auto u: code){",
            "\t\tassert(0 <= u && u < n);",
            "\t\t++ deg[u];",
            "\t}",
            "\tcode.push_back(n - 1);",
            "\tvector<array<int, 2>> edge;",
            "\tfor(auto i = 0, ptr = 0, leaf = 0; i < n - 1; ++ i){",
            "\t\twhile(leaf == n - 1 || deg[leaf] != 1) leaf = ++ ptr;",
            "\t\tedge.push_back({code[i], leaf});",
            "\t\t-- deg[leaf];",
            "\t\t-- deg[leaf = code[i]];",
            "\t}",
            "\treturn edge;",
            "}",
            "// O(n)",
            "vector<int> prufer_encode(int n, const vector<array<int, 2>> &edge){",
            "\tvector<vector<int>> adj(n);",
            "\tfor(auto [u, v]: edge){",
            "\t\tassert(0 <= min(u, v) && max(u, v) < n);",
            "\t\tadj[u].push_back(v), adj[v].push_back(u);",
            "\t}",
            "\tvector<int> pv(n, -2), deg(n);",
            "\tauto dfs = [&](auto self, int u, int p)->void{",
            "\t\tassert(pv[u] == -2);",
            "\t\tpv[u] = p;",
            "\t\tfor(auto v: adj[u]) if(v != p){",
            "\t\t\t++ deg[u], ++ deg[v];",
            "\t\t\tself(self, v, u);",
            "\t\t}",
            "\t};",
            "\tdfs(dfs, n - 1, -1);",
            "\tfor(auto u = 0; u < n; ++ u) assert(pv[u] != -2);",
            "\tvector<int> code(n - 2);",
            "\tfor(auto i = 0, ptr = 0, leaf = 0; i < n - 2; ++ i){",
            "\t\twhile(leaf == n - 1 || deg[leaf] != 1) leaf = ++ ptr;",
            "\t\t-- deg[leaf];",
            "\t\t-- deg[code[i] = leaf = pv[leaf]];",
            "\t}",
            "\treturn code;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}