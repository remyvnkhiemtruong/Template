{
    "tranxuanbach": {
        "prefix": "blossom_maximum_unweighted_matching",
        "body": [
            "// Requires graph",
            "template<class T> // O(V^3)",
            "vector<int> blossom_maximum_unweighted_matching(const graph<T> &g){",
            "\tvector<int> mate(g.n, -1), label(g.n), parent(g.n), orig(g.n);",
            "\tqueue<int> q;",
            "\tvector<int> aux(g.n, -1);",
            "\tint aux_time = -1;",
            "\tauto lca = [&](int x, int y){",
            "\t\t++ aux_time;",
            "\t\twhile(true){",
            "\t\t\tif(x != -1){",
            "\t\t\t\tif(aux[x] == aux_time) return x;",
            "\t\t\t\taux[x] = aux_time;",
            "\t\t\t\tif(mate[x] == -1) x = -1;",
            "\t\t\t\telse x = orig[parent[mate[x]]];",
            "\t\t\t}",
            "\t\t\tswap(x, y);",
            "\t\t}",
            "\t};",
            "\tauto blossom = [&](int v, int w, int a){",
            "\t\twhile(orig[v] != a){",
            "\t\t\tparent[v] = w, w = mate[v];",
            "\t\t\tif(label[w] == 1) label[w] = 0, q.push(w);",
            "\t\t\torig[v] = orig[w] = a, v = parent[w];",
            "\t\t}",
            "\t};",
            "\tauto augment = [&](int v){",
            "\t\twhile(v != -1){",
            "\t\t\tint pv = parent[v], nv = mate[pv];",
            "\t\t\tmate[v] = pv, mate[pv] = v, v = nv;",
            "\t\t}",
            "\t};",
            "\tauto bfs = [&](int root){",
            "\t\tfill(label.begin(), label.end(), -1);",
            "\t\tiota(orig.begin(), orig.end(), 0);",
            "\t\twhile(!q.empty()) q.pop();",
            "\t\tq.push(root);",
            "\t\tlabel[root] = 0;",
            "\t\twhile(!q.empty()){",
            "\t\t\tint v = q.front(); q.pop();",
            "\t\t\tfor(auto id : g.adj[v]){",
            "\t\t\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\t\t\tauto &e = g.edge[id];",
            "\t\t\t\tint x = e.from ^ e.to ^ v;",
            "\t\t\t\tif(label[x] == -1){",
            "\t\t\t\t\tlabel[x] = 1, parent[x] = v;",
            "\t\t\t\t\tif(mate[x] == -1){",
            "\t\t\t\t\t\taugment(x);",
            "\t\t\t\t\t\treturn true;",
            "\t\t\t\t\t}",
            "\t\t\t\t\tlabel[mate[x]] = 0, q.push(mate[x]);",
            "\t\t\t\t\tcontinue;",
            "\t\t\t\t}",
            "\t\t\t\tif(label[x] == 0 && orig[v] != orig[x]){",
            "\t\t\t\t\tint a = lca(orig[v], orig[x]);",
            "\t\t\t\t\tblossom(x, v, a), blossom(v, x, a);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn false;",
            "\t};",
            "\tauto greedy = [&](){",
            "\t\tvector<int> order(g.n);",
            "\t\tiota(order.begin(), order.end(), 0);",
            "\t\tshuffle(order.begin(), order.end(), mt19937(787788));",
            "\t\tfor(auto i: order) if(mate[i] == -1) for(auto id: g.adj[i]){",
            "\t\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\t\tauto &e = g.edge[id];",
            "\t\t\tint to = e.from ^ e.to ^ i;",
            "\t\t\tif(mate[to] == -1){",
            "\t\t\t\tmate[i] = to, mate[to] = i;",
            "\t\t\t\tbreak;",
            "\t\t\t}",
            "\t\t}",
            "\t};",
            "\tgreedy();",
            "\tfor(auto i = 0; i < g.n; ++ i) if(mate[i] == -1) bfs(i);",
            "\treturn mate;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}