{
    "tranxuanbach": {
        "prefix": "count_convex_polygon",
        "body": [
            "// Implementation of https://page.mi.fu-berlin.de/rote/Papers/pdf/Counting+convex+polygons+in+planar+point+sets.pdf",
            "// Points must be distinct",
            "// O(n^3)",
            "// Requires point",
            "template<class T, class U>",
            "U count_convex_polygon(vector<point<T>> a){",
            "\tint n = (int)a.size();",
            "\tsort(a.begin(), a.end());",
            "\tassert(unique(a.begin(), a.end()) == a.end());",
            "\tif(n <= 2) return 0;",
            "\tvector<vector<int>> order(n, vector<int>(n)), init_order(n);",
            "\tfor(auto i = 0; i < n; ++ i){",
            "\t\tinit_order[i].resize(n - 1 - i);",
            "\t\tiota(init_order[i].begin(), init_order[i].end(), i + 1);",
            "\t\tsort(init_order[i].begin(), init_order[i].end(), [&](int j, int k){ return counterclockwise(a[i], a[j], a[k]); });",
            "\t\tiota(order[i].begin(), order[i].end(), 0);",
            "\t\torder[i].erase(order[i].begin() + i);",
            "\t\tauto pivot = partition(order[i].begin(), order[i].end(), [&](int j){ return a[j] > a[i]; });",
            "\t\tsort(order[i].begin(), pivot, [&](int j, int k){ return counterclockwise(a[i], a[j], a[k]); });",
            "\t\tsort(pivot, order[i].end(), [&](int j, int k){ return counterclockwise(a[i], a[j], a[k]); });",
            "\t}",
            "\tU res = 0;",
            "\tvector<vector<U>> dp(n, vector<U>(n));",
            "\tfor(auto s = 0; s < n; ++ s){",
            "\t\tfor(auto u = s + 1; u < n; ++ u) order[u].erase(find(order[u].begin(), order[u].end(), s));",
            "\t\tfor(auto q: init_order[s]){",
            "\t\t\tauto d = a[q] - a[s];",
            "\t\t\trotate(order[q].begin(), max_element(order[q].begin(), order[q].end(), [&](int i, int j){",
            "\t\t\t\tint typei = (d ^ a[i] - a[s]) > 0;",
            "\t\t\t\tint typej = (d ^ a[j] - a[s]) > 0;",
            "\t\t\t\treturn typei != typej ? typei < typej : clockwise(a[q], a[i], a[j]);",
            "\t\t\t}), order[q].end());",
            "\t\t\t{",
            "\t\t\t\tint i = (int)order[q].size();",
            "\t\t\t\twhile(i > 0 && counterclockwise(a[s], a[q], a[order[q][i - 1]]) && colinear(a[q], a[order[q][0]], a[order[q][i - 1]])) -- i;",
            "\t\t\t\trotate(order[q].begin(), order[q].begin() + i, order[q].end());",
            "\t\t\t}",
            "\t\t\tint l1 = 0, r1 = 0, l2, r2;",
            "\t\t\twhile(r1 < (int)order[q].size() && counterclockwise(a[s], a[q], a[order[q][r1]])) ++ r1;",
            "\t\t\tif(l1 == r1) continue;",
            "\t\t\tl2 = r1;",
            "\t\t\twhile(l2 < (int)order[q].size() && colinear(a[s], a[q], a[order[q][l2]])) ++ l2;",
            "\t\t\tr2 = l2;",
            "\t\t\twhile(r2 < (int)order[q].size() && counterclockwise(a[s], a[order[q][r2]], a[q]))\t++ r2;",
            "\t\t\tdp[q][order[q][0]] = 1;",
            "\t\t\tfor(auto i = l2; i < r2; ++ i) if(counterclockwise(a[order[q][i]], a[q], a[order[q][0]])) dp[q][order[q][0]] += dp[order[q][i]][q];",
            "\t\t\tres += dp[q][order[q][0]];",
            "\t\t\tfor(auto i = l1 + 1, j = l2; i < r1; ++ i){",
            "\t\t\t\tdp[q][order[q][i]] = dp[q][order[q][i - 1]];",
            "\t\t\t\twhile(j < r2 && counterclockwise(a[order[q][j]], a[q], a[order[q][i - 1]])) ++ j;",
            "\t\t\t\twhile(j < r2 && counterclockwise(a[order[q][j]], a[q], a[order[q][i]])){",
            "\t\t\t\t\tdp[q][order[q][i]] += dp[order[q][j]][q];",
            "\t\t\t\t\t++ j;",
            "\t\t\t\t}",
            "\t\t\t\tres += dp[q][order[q][i]];",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}