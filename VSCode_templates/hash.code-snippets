{
    "tranxuanbach": {
        "prefix": "hash",
        "body": [
            "// Requires modular",
            "template<class modular_t, class len_t, bool ALLOW_BINEXP>",
            "struct hash_base{",
            "#ifdef LOCAL",
            "\t#define ASSERT(c) assert(c)",
            "#else",
            "\t#define ASSERT(c) 42",
            "#endif",
            "\tstatic modular_t _base, _inv_base;",
            "\ttemplate<class T = int>",
            "\tstatic void setup(T base = 0){",
            "\t\tif constexpr(modular_t::VARIATE_MOD_FLAG) modular_t::setup((unsigned long long)1e18 + 9);",
            "\t\tif(!base) base = mt19937(chrono::high_resolution_clock::now().time_since_epoch().count())() % 100'000'000 + 100'000'000;",
            "\t\t_base = base, _inv_base = modular_t(1) / base;",
            "\t}",
            "\tstatic vector<modular_t> _power, _inv_power;",
            "\tstatic void setup_power(size_t len){",
            "\t\tif(_power.empty()) _power.push_back(1), _inv_power.push_back(1);",
            "\t\twhile((int)_power.size() <= len){",
            "\t\t\t_power.push_back(_power.back() * _base);",
            "\t\t\t_inv_power.push_back(_inv_power.back() * _inv_base);",
            "\t\t}",
            "\t}",
            "\tstatic modular_t power(len_t e){",
            "\t\tassert(e >= 0);",
            "\t\tif constexpr(ALLOW_BINEXP) return e < (int)_power.size() ? _power[e] : _base.power(e);",
            "\t\telse{",
            "\t\t\tif((int)_power.size() <= e) setup_power(e);",
            "\t\t\treturn _power[e];",
            "\t\t}",
            "\t}",
            "\tstatic modular_t inv_power(len_t e){",
            "\t\tassert(e >= 0);",
            "\t\tif constexpr(ALLOW_BINEXP) return e < (int)_inv_power.size() ? _inv_power[e] : _inv_base.power(e);",
            "\t\telse{",
            "\t\t\tif((int)_power.size() <= e) setup_power(e);",
            "\t\t\treturn _inv_power[e];",
            "\t\t}",
            "\t}",
            "\thash_base(){ ASSERT(_base >= 1); }",
            "\thash_base(const modular_t &x, len_t len): data(x), len(len){ ASSERT(_base >= 1); }",
            "\ttemplate<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>",
            "\thash_base(T x): data(x), len(1){ ASSERT(_base >= 1); }",
            "\ttemplate<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>",
            "\thash_base(const vector<T> &s){",
            "\t\tASSERT(_base >= 1);",
            "\t\tfor(auto c: s) *this += hash_base(c);",
            "\t}",
            "\thash_base(const string &s){",
            "\t\tASSERT(_base >= 1);",
            "\t\tfor(auto c: s) *this += hash_base(c);",
            "\t}",
            "\thash_base &operator=(const hash_base &x){",
            "\t\tdata = x.data, len = x.len;",
            "\t\treturn *this;",
            "\t}",
            "\thash_base &operator+=(const hash_base &x){",
            "\t\tdata = power(x.len) * data + x.data;",
            "\t\tlen += x.len;",
            "\t\treturn *this;",
            "\t}",
            "\thash_base operator+(const hash_base &x) const{ return hash_base(*this) += x; }",
            "\thash_base &inplace_append_right(const hash_base &x){ return *this += x; }",
            "\thash_base append_right(const hash_base &x) const{ return hash_base(*this).inplace_append_right(x); }",
            "\thash_base &inplace_append_left(const hash_base &x){",
            "\t\tdata += power(len) * x.data;",
            "\t\tlen += x.len;",
            "\t\treturn *this;",
            "\t}",
            "\thash_base append_left(const hash_base &x) const{ return hash_base(*this).inplace_append_left(x); }",
            "\thash_base &inplace_pop_right(const hash_base &x){",
            "\t\tassert(len >= x.len);",
            "\t\tdata = inv_power(x.len) * (data - x.data);",
            "\t\tlen -= x.len;",
            "\t\treturn *this;",
            "\t}",
            "\thash_base pop_right(const hash_base &x) const{ return hash_base(*this).inplace_pop_right(x); }",
            "\thash_base &inplace_pop_left(const hash_base &x){",
            "\t\tassert(len >= x.len);",
            "\t\tdata -= power(len - x.len) * x.data;",
            "\t\tlen -= x.len;",
            "\t\treturn *this;",
            "\t}",
            "\thash_base pop_left(const hash_base &x) const{ return hash_base(*this).inplace_pop_left(x); }",
            "\ttemplate<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>",
            "\thash_base &inplace_update(len_t pos, T x){",
            "\t\tassert(0 <= pos && pos < len);",
            "\t\tdata += power(len - pos - 1) * x;",
            "\t\treturn *this;",
            "\t}",
            "\ttemplate<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>",
            "\thash_base update(len_t pos, T x) const{ return hash_base(*this).inplace_update(pos, x); }",
            "\thash_base &inplace_update(len_t pos, const hash_base &x){",
            "\t\tassert(0 <= pos && pos + x.len <= len);",
            "\t\tdata += power(len - pos - x.len) * x.data;",
            "\t\treturn *this;",
            "\t}",
            "\thash_base update(len_t pos, const hash_base &x) const{ return hash_base(*this).inplace_update(pos, x); }",
            "#define COMPARE_OP(op)\\",
            "bool operator op(const hash_base &x) const{ return data op x.data; }",
            "\tCOMPARE_OP(==) COMPARE_OP(!=) COMPARE_OP(<) COMPARE_OP(<=) COMPARE_OP(>) COMPARE_OP(>=)",
            "#undef COMPARE_OP",
            "\ttemplate<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>",
            "\thash_base &operator*=(T x){",
            "\t\tassert(x >= 0);",
            "\t\tif(x == 0) return *this = {};",
            "\t\tif(x == 1) return *this;",
            "\t\thash_base res{};",
            "\t\tfor(auto e = x; e; e >>= 1){",
            "\t\t\tif(e & 1) res += *this;",
            "\t\t\t*this += *this;",
            "\t\t}",
            "\t\treturn *this = res;",
            "\t}",
            "\ttemplate<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>",
            "\thash_base operator*(T x) const{ return hash_base(*this) *= x; }",
            "\ttemplate<class T, typename enable_if<is_integral_v<T>>::type* = nullptr>",
            "\tfriend hash_base operator*(T x, const hash_base &h){ return hash_base(h) *= x; }",
            "\tfriend ostream &operator<<(ostream &out, const hash_base &x){ return out << \"{\" << x.data << \", \" << x.len << \"}\"; }",
            "\tmodular_t data = 0;",
            "\tlen_t len = 0;",
            "#undef ASSERT",
            "};",
            "template<class modular_t, class len_t, bool ALLOW_BINEXP> modular_t hash_base<modular_t, len_t, ALLOW_BINEXP>::_base;",
            "template<class modular_t, class len_t, bool ALLOW_BINEXP> modular_t hash_base<modular_t, len_t, ALLOW_BINEXP>::_inv_base;",
            "template<class modular_t, class len_t, bool ALLOW_BINEXP> vector<modular_t> hash_base<modular_t, len_t, ALLOW_BINEXP>::_power{1};",
            "template<class modular_t, class len_t, bool ALLOW_BINEXP> vector<modular_t> hash_base<modular_t, len_t, ALLOW_BINEXP>::_inv_power{1};",
            "",
            "using hash_t = hash_base<modular_fixed_base<unsigned long long, (unsigned long long)1e18 + 9>, int, false>;"
        ],
        "description": "tranxuanbach"
    }
}