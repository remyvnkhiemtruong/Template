{
    "tranxuanbach": {
        "prefix": "counting_iterator",
        "body": [
            "template<class T>",
            "struct counting_iterator{",
            "\tT value = 0;",
            "\tusing iterator_category = random_access_iterator_tag;",
            "\tusing value_type = T;",
            "\tusing difference_type = T;",
            "\tusing pointer = T *;",
            "\tusing reference = T &;",
            "\tcounting_iterator(){ }",
            "\tcounting_iterator(const T &value): value(value){ }",
            "\tcounting_iterator(const counting_iterator &it): value(it.value){ }",
            "\tT &operator*(){ return value; }",
            "\tT operator-(const counting_iterator &it) const{ return value - it.value; }",
            "\tcounting_iterator &operator++(){ return ++ value, *this; }",
            "\tcounting_iterator &operator--(){ return -- value, *this; }",
            "\tcounting_iterator &operator+=(const T &x){ return value += x, *this; }",
            "\tbool operator==(const counting_iterator &otr) const{ return value == otr.value; }",
            "};",
            "using iterint = counting_iterator<int>;",
            "using iterll = counting_iterator<long long>;",
            "using iterlll = counting_iterator<__int128_t>;"
        ],
        "description": "tranxuanbach"
    }
}