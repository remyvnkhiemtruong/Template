{
    "tranxuanbach": {
        "prefix": "circular_longest_common_subsequence",
        "body": [
            "// O(n * m)",
            "template<class Char_Type>",
            "vector<Char_Type> circular_longest_common_subsequence(vector<Char_Type> s, const vector<Char_Type> &t){",
            "\tint n = (int)s.size(), m = (int)t.size();",
            "\ts.insert(s.end(), s.begin(), s.end());",
            "\tvector dp(2 * n + 1, vector<int>(m + 1, -1));",
            "\tdp[0][0] = 0;",
            "\tvector prev(2 * n + 1, vector<int>(m + 1, -1));",
            "\tstatic const vector<array<int, 3>> dr{{0, 1, 0}, {1, 1, 1}, {1, 0, 0}};",
            "\tfor(auto i = 0; i <= 2 * n; ++ i) for(auto j = 0; j <= m; ++ j) if(i || j){",
            "\t\tfor(auto d = 0; d < 3; ++ d){",
            "\t\t\tauto [di, dj, w] = dr[d];",
            "\t\t\tint pi = i - di, pj = j - dj;",
            "\t\t\tif(0 <= pi && 0 <= pj && (d != 1 || s[pi] == t[pj]) && dp[i][j] < dp[pi][pj] + w){",
            "\t\t\t\tdp[i][j] = dp[pi][pj] + w;",
            "\t\t\t\tprev[i][j] = d;",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tvector<Char_Type> res;",
            "\tfor(auto r = 0; r < n; ++ r){",
            "\t\tvector<Char_Type> cur_res;",
            "\t\tfor(auto i = r + n, j = m; i && j; ){",
            "\t\t\tauto [di, dj, w] = dr[prev[i][j]];",
            "\t\t\tint pi = i - di, pj = j - dj;",
            "\t\t\tif(w) cur_res.push_back(s[pi]);",
            "\t\t\ti = pi, j = pj;",
            "\t\t}",
            "\t\tif((int)res.size() < (int)cur_res.size()) swap(res, cur_res);",
            "\t\tfor(auto c = 1; c <= m; ++ c) if(prev[r + 1][c] == 1){",
            "\t\t\tprev[r + 1][c] = 0;",
            "\t\t\tfor(auto i = r + 2, j = c; i <= 2 * n && j <= m; ++ i){",
            "\t\t\t\tif(prev[i][j] == 2) prev[i][j] = 0;",
            "\t\t\t\telse{",
            "\t\t\t\t\t++ j;",
            "\t\t\t\t\twhile(j <= m && !prev[i][j]) ++ j;",
            "\t\t\t\t\tif(j <= m) prev[i][j] = 0;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}