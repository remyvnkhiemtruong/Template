{
    "tranxuanbach": {
        "prefix": "polyhash",
        "body": [
            "template<class Str> // O(n) processing, O(log n) for lcp, O(n) for search, O(1) for query",
            "struct polyhash: vector<vector<long long>>{",
            "\tconst int lim;",
            "\tconst long long base, mod;",
            "\tvector<long long> p;",
            "\tpolyhash(int lim, long long mod): lim(lim), p(lim, 1), mod(mod), base(rngll() % (long long)(0.4 * mod) + 0.3 * mod){",
            "\t\tfor(int i = 1; i < lim; ++ i) p[i] = p[i - 1] * base % mod;",
            "\t}",
            "\tvoid insert(const Str &s){",
            "\t\tthis->emplace_back(s.size() + 1);",
            "\t\tfor(int i = 0; i < int(s.size()); ++ i) this->back()[i + 1] = (this->back()[i] * base + s[i]) % mod;",
            "\t}",
            "\tvoid extend(class Str::value_type c, int i = 0){",
            "\t\t(*this)[i].push_back(((*this)[i].back() * base + c) % mod);",
            "\t}",
            "\tlong long query(int ql, int qr, int i = 0){",
            "\t\treturn ((*this)[i][qr] - (*this)[i][ql] * p[qr - ql] % mod + mod) % mod;",
            "\t}",
            "\tint lcp(int i, int j, int posi = 0, int posj = 0){ // returns the length",
            "\t\tint low = 0, high = min(int((*this)[i].size()) - posi, int((*this)[j].size()) - posj);",
            "\t\twhile(high - low > 1){",
            "\t\t\tint mid = low + (high - low >> 1);",
            "\t\t\tquery(posi, posi + mid, i) == query(posj, posj + mid, j) ? low = mid : high = mid;",
            "\t\t}",
            "\t\treturn low;",
            "\t}",
            "\tint lcs(int i, int j, int posi, int posj){",
            "\t\tint low = 0, high = min(posi, posj) + 1;",
            "\t\twhile(high - low > 1){",
            "\t\t\tint mid = low + (high - low >> 1);",
            "\t\t\tquery(posi - mid, posi, i) == query(posj - mid, posj, j) ? low = mid : high = mid;",
            "\t\t}",
            "\t\treturn low;",
            "\t}",
            "\tvector<int> search(const Str &s, bool FIND_ALL = true, int i = 0){",
            "\t\tint len = s.size();",
            "\t\tlong long v = 0;",
            "\t\tfor(auto c: s) v = (v * base + c) % mod;",
            "\t\tvector<int> res;",
            "\t\tfor(int j = 0; j + len < (*this)[i].size(); ++ j) if(v == query(j, j + len, i)){",
            "\t\t\tres.push_back(j);",
            "\t\t\tif(!FIND_ALL) break;",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "};",
            "template<class Str>",
            "struct double_polyhash{",
            "\tpair<polyhash<Str>, polyhash<Str>> h;",
            "\tdouble_polyhash(int N, long long mod): h{polyhash<Str>(N, mod), polyhash<Str>(N, mod)}{ }",
            "\tvoid insert(const Str &s){",
            "\t\th.first.insert(s), h.second.insert(s);",
            "\t}",
            "\tvoid extend(class Str::value_type c, int i = 0){",
            "\t\th.first.extend(c, i), h.second.extend(c, i);",
            "\t}",
            "\tpair<long long, long long> query(int ql, int qr, int i = 0){",
            "\t\treturn {h.first.query(ql, qr, i), h.second.query(ql, qr, i)};",
            "\t}",
            "\tint lcp(int i, int j, int posi = 0, int posj = 0){ // returns the length",
            "\t\tint low = 0, high = min(int(h.first[i].size()) - posi, int(h.first[j].size()) - posj);",
            "\t\twhile(high - low > 1){",
            "\t\t\tint mid = low + high >> 1;",
            "\t\t\tquery(posi, posi + mid, i) == query(posj, posj + mid, j) ? low = mid : high = mid;",
            "\t\t}",
            "\t\treturn low;",
            "\t}",
            "\tvector<int> search(const Str &s, bool FIND_ALL = true, int i = 0){",
            "\t\tint len = s.size();",
            "\t\tpair<long long, long long> v;",
            "\t\tfor(auto c: s) v = {(v.first * h.first.base + c) % h.first.mod, (v.second * h.second.base + c) % h.second.mod};",
            "\t\tvector<int> res;",
            "\t\tfor(int j = 0; j + len < h.first[i].size(); ++ j) if(v == query(j, j + len, i)){",
            "\t\t\tres.push_back(j);",
            "\t\t\tif(!FIND_ALL) break;",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}