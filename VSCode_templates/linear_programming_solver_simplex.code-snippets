{
    "tranxuanbach": {
        "prefix": "linear_programming_solver_simplex",
        "body": [
            "// Solves the canonical form: maximize c^T x, subject to ax <= b and x >= 0.",
            "// T must be of floating type",
            "template<class T>",
            "struct linear_programming_solver_simplex{",
            "\tint m, n;",
            "\tvector<int> nn, bb;",
            "\tvector<vector<T>> mat;",
            "\tstatic constexpr T eps = 1e-8;",
            "\tlinear_programming_solver_simplex(const vector<vector<T>> &a, const vector<T> &b, const vector<T> &c): m((int)b.size()), n((int)c.size()), nn(n + 1), bb(m), mat(m + 2, vector<T>(n + 2)){",
            "\t\tfor(auto i = 0; i < m; ++ i) for(auto j = 0; j < n; ++ j) mat[i][j] = a[i][j];",
            "\t\tfor(auto i = 0; i < m; ++ i) bb[i] = n + i, mat[i][n] = -1, mat[i][n + 1] = b[i];",
            "\t\tfor(auto j = 0; j < n; ++ j) nn[j] = j, mat[m][j] = -c[j];",
            "\t\tnn[n] = -1, mat[m + 1][n] = 1;",
            "\t}",
            "\tvoid pivot(int r, int s){",
            "\t\tT *a = mat[r].data(), inv = 1 / a[s];",
            "\t\tfor(auto i = 0; i < m + 2; ++ i) if(i != r && abs(mat[i][s]) > eps){",
            "\t\t\tT *b = mat[i].data(), inv2 = b[s] * inv;",
            "\t\t\tfor(auto j = 0; j < n + 2; ++ j) b[j] -= a[j] * inv2;",
            "\t\t\tb[s] = a[s] * inv2;",
            "\t\t}",
            "\t\tfor(auto j = 0; j < n + 2; ++ j) if(j != s) mat[r][j] *= inv;",
            "\t\tfor(auto i = 0; i < m + 2; ++ i) if(i != r) mat[i][s] *= -inv;",
            "\t\tmat[r][s] = inv;",
            "\t\tswap(bb[r], nn[s]);",
            "\t}",
            "\tbool simplex(int phase){",
            "\t\tfor(auto x = m + phase - 1; ; ){",
            "\t\t\tint s = -1;",
            "\t\t\tfor(auto j = 0; j < n + 1; ++ j) if(nn[j] != -phase) if(s == -1 || pair(mat[x][j], nn[j]) < pair(mat[x][s], nn[s])) s = j;",
            "\t\t\tif(mat[x][s] >= -eps) return true;",
            "\t\t\tint r = -1;",
            "\t\t\tfor(auto i = 0; i < m; ++ i){",
            "\t\t\t\tif(mat[i][s] <= eps) continue;",
            "\t\t\t\tif(r == -1 || pair(mat[i][n + 1] / mat[i][s], bb[i]) < pair(mat[r][n + 1] / mat[r][s], bb[r])) r = i;",
            "\t\t\t}",
            "\t\t\tif(r == -1) return false;",
            "\t\t\tpivot(r, s);",
            "\t\t}",
            "\t}",
            "\t// Returns -inf if no solution, {inf, a vector satisfying the constraints} if there are abritrarily good solutions, or {maximum c^T x, x} otherwise.",
            "\t// O(n * m * (# of pivots)), O(2^n) in general.",
            "\tpair<T, vector<T>> solve(){",
            "\t\tint r = 0;",
            "\t\tfor(auto i = 1; i < m; ++ i) if(mat[i][n + 1] < mat[r][n + 1]) r = i;",
            "\t\tif(mat[r][n + 1] < -eps){",
            "\t\t\tpivot(r, n);",
            "\t\t\tif(!simplex(2) || mat[m + 1][n + 1] < -eps) return {numeric_limits<T>::min(), {}};",
            "\t\t\tfor(auto i = 0; i < m; ++ i) if(bb[i] == -1){",
            "\t\t\t\tint s = 0;",
            "\t\t\t\tfor(auto j = 1; j < n + 1; ++ j) if(s == -1 || pair(mat[i][j], nn[j]) < pair(mat[i][s], nn[s]));",
            "\t\t\t\tpivot(i, s);",
            "\t\t\t}",
            "\t\t}",
            "\t\tbool ok = simplex(1);",
            "\t\tvector<T> x(n);",
            "\t\tfor(auto i = 0; i < m; ++ i) if(bb[i] < n) x[bb[i]] = mat[i][n + 1];",
            "\t\treturn {ok ? mat[m][n + 1] : numeric_limits<T>::max(), x};",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}