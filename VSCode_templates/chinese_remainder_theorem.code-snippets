{
    "tranxuanbach": {
        "prefix": "chinese_remainder_theorem",
        "body": [
            "// (rem, mod)",
            "// Requires inv_gcd",
            "pair<long long, long long> chinese_remainder_theorem(const vector<long long> &r, const vector<long long> &m){",
            "\tassert(r.size() == m.size());",
            "\tint n = (int)r.size();",
            "\tlong long r0 = 0, m0 = 1;",
            "\tfor(int i = 0; i < n; ++ i){",
            "\t\tassert(1 <= m[i]);",
            "\t\tlong long r1 = r[i] % m[i], m1 = m[i];",
            "\t\tif(r1 < 0) r1 += m[i];",
            "\t\tif(m0 < m1) swap(r0, r1), swap(m0, m1);",
            "\t\tif(m0 % m1 == 0){",
            "\t\t\tif(r0 % m1 != r1) return {0, 0};",
            "\t\t\tcontinue;",
            "\t\t}",
            "\t\tlong long g, im;",
            "\t\ttie(g, im) = inv_gcd(m0, m1);",
            "\t\tlong long u1 = (m1 / g);",
            "\t\tif ((r1 - r0) % g) return {0, 0};",
            "\t\tlong long x = (r1 - r0) / g % u1 * im % u1;",
            "\t\tr0 += x * m0, m0 *= u1;  // -> lcm(m0, m1)",
            "\t\tif(r0 < 0) r0 += m0;",
            "\t}",
            "\treturn {r0, m0};",
            "}"
        ],
        "description": "tranxuanbach"
    }
}