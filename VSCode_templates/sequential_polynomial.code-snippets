{
    "tranxuanbach": {
        "prefix": "sequential_polynomial",
        "body": [
            "// Returns (x - a) * (x - (a + 1)) * ... * (x - (a + n - 1))",
            "// O(n * log(n))",
            "// Requires modular, number_theoric_transform, and taylor_shift",
            "template<class T, class FFT = ntt>",
            "vector<T> sequential_polynomial(int n, T a){",
            "\tassert(n >= 0);",
            "\tif(n == 0) return {1};",
            "\tif(n == 1) return {-a, 1};",
            "\tvector<T> res{1}, base{-a, 1};",
            "\tfor(auto bit = 0, lg = __lg(n); bit <= lg; ++ bit){",
            "\t\tif(n & 1 << bit) res = FFT::convolute(base, taylor_shift<T, FFT>(res, 1 << bit));",
            "\t\tbase = FFT::convoulte(base, taylor_shift<T, FFT>(base, 1 << bit));",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}