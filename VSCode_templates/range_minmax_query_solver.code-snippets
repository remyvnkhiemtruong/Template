{
    "tranxuanbach": {
        "prefix": "range_minmax_query_solver",
        "body": [
            "// Specialization of sparse_table",
            "// Range min query by default. Set cmp = greater for max query",
            "template<class T, class Compare = less<>>",
            "struct range_minmax_query_solver{",
            "\tint n;",
            "\tvector<vector<T>> data;",
            "\tCompare cmp;",
            "\tT T_id;",
            "\trange_minmax_query_solver(){ }",
            "\t// O(n * log(n))",
            "\trange_minmax_query_solver(const vector<T> &a, Compare cmp = less<>(), T T_id = numeric_limits<T>::max()): n((int)a.size()), cmp(cmp), T_id(T_id), data({a}){",
            "\t\tfor(auto p = 1, i = 1; p << 1 <= n; p <<= 1, ++ i){",
            "\t\t\tdata.emplace_back(n - (p << 1) + 1);",
            "\t\t\tfor(auto j = 0; j < (int)data[i].size(); ++ j) data[i][j] = cmp(data[i - 1][j], data[i - 1][j + p]) ? data[i - 1][j] : data[i - 1][j + p];",
            "\t\t}",
            "\t}",
            "\t// O(1)",
            "\tT query(int l, int r) const{",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\tif(l == r) return T_id;",
            "\t\tint d = __lg(r - l);",
            "\t\treturn cmp(data[d][l], data[d][r - (1 << d)]) ? data[d][l] : data[d][r - (1 << d)];",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}