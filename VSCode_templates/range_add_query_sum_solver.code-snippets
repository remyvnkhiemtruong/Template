{
    "tranxuanbach": {
        "prefix": "range_add_query_sum_solver",
        "body": [
            "template<class T>",
            "struct range_add_query_sum_solver{",
            "\tint n;",
            "\tvector<T> data0, data1;",
            "\trange_add_query_sum_solver(){ }",
            "\t// O(n)",
            "\trange_add_query_sum_solver(int n): n(n), data0(n), data1(n){ }",
            "\t// O(n)",
            "\trange_add_query_sum_solver(int n, T init): range_add_query_sum_solver(vector<T>(n, init)){ }",
            "\t// O(n)",
            "\trange_add_query_sum_solver(const vector<T> &v): n((int)v.size()), data0(n), data1(v){",
            "\t\tfor(auto i = 1; i <= n; ++ i) if(i + (i & -i) <= n) data1[i + (i & -i) - 1] += data1[i - 1];",
            "\t}",
            "\tvoid update(int ql, int qr, T x){",
            "\t\tassert(0 <= ql && ql <= qr && qr <= n);",
            "\t\tif(ql == qr) return;",
            "\t\tfor(auto l = ql + 1; l <= n; l += l & -l) data0[l - 1] += x, data1[l - 1] -= ql * x;",
            "\t\tfor(auto r = qr + 1; r <= n; r += r & -r) data0[r - 1] -= x, data1[r - 1] += qr * x;",
            "\t}",
            "\tT prefix(int qr) const{",
            "\t\tassert(0 <= qr && qr <= n);",
            "\t\tT sum0 = {}, sum1 = {};",
            "\t\tfor(auto r = qr; r > 0; r -= r & -r) sum0 += data0[r - 1], sum1 += data1[r - 1];",
            "\t\treturn qr * sum0 + sum1;",
            "\t}",
            "\tT query(int l, int r) const{",
            "\t\tassert(0 <= l && l <= r && r <= n);",
            "\t\treturn prefix(r) - prefix(l);",
            "\t}",
            "\ttemplate<class output_stream>",
            "\tfriend output_stream &operator<<(output_stream &out, const range_add_query_sum_solver &solver){",
            "\t\tout << \"[\";",
            "\t\tfor(auto i = 0; i < solver.n; ++ i){",
            "\t\t\tout << solver.query(i, i + 1);",
            "\t\t\tif(i != solver.n - 1) out << \", \";",
            "\t\t}",
            "\t\treturn out << ']';",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}