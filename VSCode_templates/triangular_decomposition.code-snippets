{
    "tranxuanbach": {
        "prefix": "triangular_decomposition",
        "body": [
            "// Given a polygonal region bounded by outer polygon and a set of inner polygonal holes strictly contained in the outer polygon, where none of the polygons intersect, find all triangles in a triangulation.",
            "// The outer polygon is given in CCW while the inner ones are in CW.",
            "// Returns the list of triangles",
            "// where a triangle given by the tuple {{i0, j0}, {i1, j1}, {i2, j2}} is defined by three vertices P(i0, j0), P(i1, j1), P(i2, j2) where P(i, j) is the j-th vertex of the i-th polygon (i=0 denotes the outer one).",
            "// O(n * log(n)) where n is the total number of vertices",
            "// Requires point",
            "template<class T>",
            "vector<array<array<int, 2>, 3>> triangular_decomposition(const vector<vector<point<T>>> &a){",
            "\tassert(!a.empty());",
            "\tassert(doubled_signed_area(a[0]) >= 0);",
            "\tfor(auto i = 1; i < (int)a.size(); ++ i) assert(doubled_signed_area(a[i]) <= 0);",
            "\tvector<array<int, 2>> order;",
            "\tfor(auto i = 0; i < (int)a.size(); ++ i) for(auto j = 0; j < (int)a[i].size(); ++ j) order.push_back({i, j});",
            "\tsort(order.begin(), order.end(), [&](auto i, auto j){ return a[i[0]][i[1]] < a[j[0]][j[1]]; });",
            "\tT sweep;",
            "\tstruct key_type{ // stores the line p-q",
            "\t\tmutable point<T> p, q;",
            "\t};",
            "\tauto cmp = [&](const key_type &a, const key_type &b)->bool{",
            "\t\tauto ya = a.p.x == a.q.x ? array{max(a.p.y, a.q.y), T(1)} : array{a.p.y * (a.q.x - sweep) + a.q.y * (sweep - a.p.x), a.q.x - a.p.x};",
            "\t\tauto yb = b.p.x == b.q.x ? array{min(b.p.y, b.q.y), T(1)} : array{b.p.y * (b.q.x - sweep) + b.q.y * (sweep - b.p.x), b.q.x - b.p.x};",
            "\t\tif(ya[1] < 0) ya = {-ya[0], -ya[1]};",
            "\t\tif(yb[1] < 0) yb = {-yb[0], -yb[1]};",
            "\t\treturn ya[0] * yb[1] < yb[0] * ya[1];",
            "\t};",
            "\tstruct mapped_type{",
            "\t\tarray<int, 2> endpoint, helper;",
            "\t};",
            "\tmap<key_type, mapped_type, decltype(cmp)> events(cmp);",
            "\tvector<array<int, 2>> roots, id;",
            "\tvector<int> next;",
            "\tauto new_node = [&](int i, int j)->int{",
            "\t\tid.push_back({i, j}), next.push_back(-1);",
            "\t\treturn (int)id.size() - 1;",
            "\t};",
            "\t// partition polygon into monotone polygons",
            "\tfor(auto [i, j]: order){",
            "\t\tauto &b = a[i];",
            "\t\tsweep = b[j].x;",
            "\t\tint pj = (j + (int)b.size() - 1) % (int)b.size();",
            "\t\tint nj = (j + 1) % (int)b.size();",
            "\t\tif(b[j] < b[pj] && b[j] < b[nj]){",
            "\t\t\tif(doubled_signed_area(b[pj], b[j], b[nj]) > 0){ // Start",
            "\t\t\t\tint u = new_node(i, j), v = new_node(i, j);",
            "\t\t\t\tevents.insert({{b[j], b[pj]}, {{u, v}, {u, -1}}});",
            "\t\t\t\troots.insert(roots.end(), {u, v});",
            "\t\t\t}",
            "\t\t\telse{ // Split",
            "\t\t\t\tauto it = events.lower_bound({b[j], b[j]});",
            "\t\t\t\tint u = new_node(i, j), v = new_node(i, j);",
            "\t\t\t\tif(~it->second.helper[0] && ~it->second.helper[1]){",
            "\t\t\t\t\tnext[it->second.helper[0]] = u;",
            "\t\t\t\t\tnext[it->second.helper[1]] = v;",
            "\t\t\t\t\tevents.insert({{b[j], b[pj]}, {{it->second.endpoint[0], u}, {-1, u}}});",
            "\t\t\t\t\tit->second = {{v, it->second.endpoint[1]}, {v, -1}};",
            "\t\t\t\t}",
            "\t\t\t\telse if(~it->second.helper[0]){",
            "\t\t\t\t\tint k = it->second.helper[0];",
            "\t\t\t\t\tint w1 = new_node(id[k][0], id[k][1]);",
            "\t\t\t\t\tint w2 = new_node(id[k][0], id[k][1]);",
            "\t\t\t\t\troots.push_back({w1, w2});",
            "\t\t\t\t\tnext[w2] = u;",
            "\t\t\t\t\tnext[it->second.endpoint[0]] = v;",
            "\t\t\t\t\tevents.insert(it, {{b[j], b[pj]}, {{w1, u}, {-1, u}}});",
            "\t\t\t\t\tit->second = {{v, it->second.endpoint[1]}, {v, -1}};",
            "\t\t\t\t}",
            "\t\t\t\telse{",
            "\t\t\t\t\tint k = it->second.helper[1];",
            "\t\t\t\t\tint w1 = new_node(id[k][0], id[k][1]);",
            "\t\t\t\t\tint w2 = new_node(id[k][0], id[k][1]);",
            "\t\t\t\t\troots.push_back({w1, w2});",
            "\t\t\t\t\tnext[w1] = v;",
            "\t\t\t\t\tnext[it->second.endpoint[1]] = u;",
            "\t\t\t\t\tevents.insert(it, {{b[j], b[pj]}, {{it->second.endpoint[0], u}, {-1, u}}});",
            "\t\t\t\t\tit->first.p = a[id[k][0]][id[k][1]], it->first.q = a[id[k][0]][(id[k][1] + (int)a[id[k][0]].size() - 1) % (int)a[id[k][0]].size()];",
            "\t\t\t\t\tit->second = {{v, w2}, {v, -1}};",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t\telse if(b[j] > b[pj] && b[j] > b[nj]){ ",
            "\t\t\tif(doubled_signed_area(b[pj], b[j], b[nj]) > 0){ // End",
            "\t\t\t\tauto it = events.lower_bound({b[j], b[j]});",
            "\t\t\t\tint u = new_node(i, j);",
            "\t\t\t\tfor(auto v: it->second.endpoint) next[v] = u;",
            "\t\t\t\tfor(auto v: it->second.helper) if(~v) next[v] = u;",
            "\t\t\t\tevents.erase(it);",
            "\t\t\t}",
            "\t\t\telse{ // Merge",
            "\t\t\t\tauto l = events.lower_bound({b[j], b[j]}), r = std::next(l);",
            "\t\t\t\tint u = new_node(i, j), v = new_node(i, j);",
            "\t\t\t\tif(~l->second.helper[0] && ~l->second.helper[1]){",
            "\t\t\t\t\tint w = new_node(i, j);",
            "\t\t\t\t\tnext[l->second.helper[0]] = u;",
            "\t\t\t\t\tnext[l->second.helper[1]] = w;",
            "\t\t\t\t\tnext[l->second.endpoint[1]] = w;",
            "\t\t\t\t}",
            "\t\t\t\telse next[l->second.endpoint[1]] = u;",
            "\t\t\t\tif(~r->second.helper[0] && ~r->second.helper[1]){",
            "\t\t\t\t\tint w = new_node(i, j);",
            "\t\t\t\t\tnext[r->second.endpoint[0]] = w;",
            "\t\t\t\t\tnext[r->second.helper[0]] = w;",
            "\t\t\t\t\tnext[r->second.helper[1]] = v;",
            "\t\t\t\t}",
            "\t\t\t\telse next[r->second.endpoint[0]] = v;",
            "\t\t\t\tr->second = {{l->second.endpoint[0], r->second.endpoint[1]}, {u, v}};",
            "\t\t\t\tevents.erase(l);",
            "\t\t\t}",
            "\t\t}",
            "\t\telse{ // Regular",
            "\t\t\tauto it = events.lower_bound({b[j], b[j]});",
            "\t\t\tint u = new_node(i, j);",
            "\t\t\tif(b[pj] < b[j]){ // Left",
            "\t\t\t\tif(~it->second.helper[0] && ~it->second.helper[1]){",
            "\t\t\t\t\tint v = new_node(i, j);",
            "\t\t\t\t\tnext[it->second.endpoint[0]] = v;",
            "\t\t\t\t\tnext[it->second.helper[0]] = v;",
            "\t\t\t\t\tnext[it->second.helper[1]] = u;",
            "\t\t\t\t}",
            "\t\t\t\telse{",
            "\t\t\t\t\tnext[it->second.endpoint[0]] = u;",
            "\t\t\t\t}",
            "\t\t\t\tit->second = {{u, it->second.endpoint[1]}, {u, -1}};",
            "\t\t\t}",
            "\t\t\telse{ // Right",
            "\t\t\t\tif(~it->second.helper[0] && ~it->second.helper[1]){",
            "\t\t\t\t\tint v = new_node(i, j);",
            "\t\t\t\t\tnext[it->second.helper[0]] = u;",
            "\t\t\t\t\tnext[it->second.helper[1]] = v;",
            "\t\t\t\t\tnext[it->second.endpoint[1]] = v;",
            "\t\t\t\t}",
            "\t\t\t\telse{",
            "\t\t\t\t\tnext[it->second.endpoint[1]] = u;",
            "\t\t\t\t}",
            "\t\t\t\tit->first.p = b[j], it->first.q = b[pj];",
            "\t\t\t\tit->second = {{it->second.endpoint[0], u}, {-1, u}};",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\t// triangulate each monotone polygons",
            "\tvector<array<array<int, 2>, 3>> res;",
            "\tfor(auto [p, q]: roots){",
            "\t\tbool stack_type;",
            "\t\tvector<array<int, 2>> stack{id[p]};",
            "\t\tauto push = [&](bool side, array<int, 2> i)->void{",
            "\t\t\tif((int)stack.size() == 1){",
            "\t\t\t\tstack.push_back(i);",
            "\t\t\t\tstack_type = side;",
            "\t\t\t\treturn;",
            "\t\t\t}",
            "\t\t\tauto last = stack.back(), j = last;",
            "\t\t\tstack.pop_back();",
            "\t\t\twhile(!stack.empty() && doubled_signed_area(a[stack.back()[0]][stack.back()[1]], stack_type ? a[i[0]][i[1]] : a[j[0]][j[1]], stack_type ? a[j[0]][j[1]] : a[i[0]][i[1]]) > 0){",
            "\t\t\t\tres.push_back({stack.back(), stack_type ? i : j, stack_type ? j : i});",
            "\t\t\t\tj = stack.back();",
            "\t\t\t\tstack.pop_back();",
            "\t\t\t}",
            "\t\t\tstack.insert(stack.end(), {side == stack_type ? j : last, i});",
            "\t\t\tstack_type = side;",
            "\t\t};",
            "\t\tp = next[p], q = next[q];",
            "\t\twhile(p != q){",
            "\t\t\tbool side;",
            "\t\t\tarray<int, 2> i;",
            "\t\t\tif(a[id[p][0]][id[p][1]] < a[id[q][0]][id[q][1]]) side = false, i = id[p], p = next[p];",
            "\t\t\telse side = true, i = id[q], q = next[q];",
            "\t\t\tpush(side, i);",
            "\t\t}",
            "\t\tpush(!stack_type, id[p]);",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}