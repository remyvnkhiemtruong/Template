{
    "tranxuanbach": {
        "prefix": "priority_queue_with_update",
        "body": [
            "template<class Compare>",
            "struct priority_queue_with_update{",
            "\tvector<int> pos; // pos[id]: position of id in the heap",
            "\tvector<int> heap; // heap[i]: id of the heap data",
            "\tCompare cmp;",
            "\tpriority_queue_with_update(Compare cmp): cmp(cmp){ }",
            "\t// O(size(init))",
            "\tpriority_queue_with_update(int n, Compare cmp = less<>()): pos(n), heap(n), cmp(cmp){",
            "\t\tiota(pos.begin(), pos.end(), 0);",
            "\t\tiota(heap.begin(), heap.end(), 0);",
            "\t\tfor(auto i = n - 1; i > 0; -- i){",
            "\t\t\tint j = i - 1 >> 1;",
            "\t\t\tif(cmp(heap[j], heap[i])){",
            "\t\t\t\tswap(pos[heap[i]], pos[heap[j]]);",
            "\t\t\t\tswap(heap[i], heap[j]);",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\t// Clear all info",
            "\tvoid clear(){",
            "\t\tpos.clear();",
            "\t\theap.clear();",
            "\t}",
            "\t// Clear the heap",
            "\tvoid clear_heap(){",
            "\t\theap.clear();",
            "\t}",
            "\t// O(log n)",
            "\tint push(){",
            "\t\tint id = (int)pos.size();",
            "\t\tpos.push_back((int)heap.size());",
            "\t\theap.push_back(id);",
            "\t\tfor(auto i = (int)heap.size() - 1; i; ){",
            "\t\t\tint j = i - 1 >> 1;",
            "\t\t\tif(!cmp(heap[j], heap[i])) break;",
            "\t\t\tswap(pos[heap[i]], pos[heap[j]]);",
            "\t\t\tswap(heap[i], heap[j]);",
            "\t\t\ti = j;",
            "\t\t}",
            "\t\treturn id;",
            "\t}",
            "\t// Returns the id of the max element",
            "\t// O(1)",
            "\tint top(){",
            "\t\tassert(!heap.empty());",
            "\t\treturn heap.front();",
            "\t}",
            "\t// Returns the id of the max element and erase it from heap",
            "\t// O(log n)",
            "\tint pop(){",
            "\t\tassert(!heap.empty());",
            "\t\tint id = heap.front();",
            "\t\theap.front() = heap.back();",
            "\t\tpos[heap.front()] = 0;",
            "\t\theap.pop_back();",
            "\t\tfor(auto i = 0; ; ){",
            "\t\t\tint l = i << 1 | 1, r = l + 1, opt = i;",
            "\t\t\tif(l < (int)heap.size() && cmp(heap[opt], heap[l])) opt = l;",
            "\t\t\tif(r < (int)heap.size() && cmp(heap[opt], heap[r])) opt = r;",
            "\t\t\tif(opt == i) break;",
            "\t\t\tswap(pos[heap[i]], pos[heap[opt]]);",
            "\t\t\tswap(heap[i], heap[opt]);",
            "\t\t\ti = opt;",
            "\t\t}",
            "\t\treturn id;",
            "\t}",
            "\t// Modify the priority of id and update the heap",
            "\t// O(log n)",
            "\tvoid update(int id){",
            "\t\tfor(auto i = pos[id]; i; ){",
            "\t\t\tint j = i - 1 >> 1;",
            "\t\t\tif(!cmp(heap[j], heap[i])) break;",
            "\t\t\tswap(pos[heap[i]], pos[heap[j]]);",
            "\t\t\tswap(heap[i], heap[j]);",
            "\t\t\ti = j;",
            "\t\t}",
            "\t\tfor(auto i = pos[id]; ; ){",
            "\t\t\tint l = i << 1 | 1, r = l + 1, opt = i;",
            "\t\t\tif(l < (int)heap.size() && cmp(heap[opt], heap[l])) opt = l;",
            "\t\t\tif(r < (int)heap.size() && cmp(heap[opt], heap[r])) opt = r;",
            "\t\t\tif(opt == i) break;",
            "\t\t\tswap(pos[heap[i]], pos[heap[opt]]);",
            "\t\t\tswap(heap[i], heap[opt]);",
            "\t\t\ti = opt;",
            "\t\t}",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}