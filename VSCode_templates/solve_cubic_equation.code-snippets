{
    "tranxuanbach": {
        "prefix": "solve_cubic_equation",
        "body": [
            "// Implementation of https://en.wikipedia.org/wiki/Cubic_equation#General_cubic_formula",
            "// T must be of floating or complex type",
            "// Solve the equation of form",
            "// a*X^3 + b*X^2 + c*X + d = 0",
            "// Returns {true, set of solution} if finite solutions",
            "// Returns {false, empty set} otherwise",
            "template<class T>",
            "optional<vector<complex<long double>>> solve_cubic_equation(T a, T b, T c, T d, const long double &eps = 1e-10){",
            "\tusing ld = long double;",
            "\tusing cld = complex<ld>;",
            "\tif(abs(a) > eps){",
            "\t\tcld D0 = b * b - 3.0l * a * c;",
            "\t\tcld D1 = 2.0l * b * b * b - 9.0l * a * b * c + 27.0l * a * a * d;",
            "\t\tcld C = pow((D1 + sqrt(D1 * D1 - 4.0l * D0 * D0 * D0)) / 2.0l, 1.0l / 3.0l);",
            "\t\tvector<cld> res;",
            "\t\tfor(auto zeta: {cld(1.0l), -0.5l + sqrtl(3) * 0.5il, -0.5l - sqrtl(3.0l) * 0.5il}){",
            "\t\t\tres.push_back(-1 / (3.0l * a) * (b + (abs(C) > eps ? zeta * C + D0 / (zeta * C) : 0.0l)));",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\telse if(abs(b) > eps){",
            "\t\tcld D = c * c - 4.0l * b * d;",
            "\t\treturn {{(-c + sqrt(D)) / (2.0l * b), (-c - sqrt(D)) / (2.0l * b)}};",
            "\t}",
            "\telse if(abs(c) > eps) return {{-d / c}};",
            "\telse if(abs(d) > eps) return vector<complex<long double>>{};",
            "\telse return {};",
            "}"
        ],
        "description": "tranxuanbach"
    }
}