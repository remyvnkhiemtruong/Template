{
    "tranxuanbach": {
        "prefix": "count_primes",
        "body": [
            "long long count_primes(long long N){ // Number of primes up to N",
            "\tif(N <= 1) return 0;",
            "\tif(N == 2) return 1;",
            "\tconst int v = sqrtl(N);",
            "\tint s = (v + 1) / 2;",
            "\tvector<int> smalls(s), roughs(s);",
            "\tvector<long long> larges(s);",
            "\tfor(int i = 0; i < s; ++ i) smalls[i] = i, roughs[i] = 2 * i + 1, larges[i] = (N / (2 * i + 1) - 1) / 2;",
            "\tvector<bool> skip(v + 1);",
            "\tconst auto divide = [](long long n, long long d){ return int(n / d); };",
            "\tconst auto half = [](int n){ return n - 1 >> 1; };",
            "\tint pc = 0;",
            "\tfor(int p = 3; p <= v; p += 2) if(!skip[p]){",
            "\t\tint q = p * p;",
            "\t\tif((long long)(q) * q > N) break;",
            "\t\tskip[p] = true;",
            "\t\tfor(int i = q; i <= v; i += 2 * p) skip[i] = true;",
            "\t\tint ns = 0;",
            "\t\tfor(int k = 0; k < s; ++ k){",
            "\t\t\tint i = roughs[k];",
            "\t\t\tif(skip[i]) continue;",
            "\t\t\tlong long d = (long long)(i) * p;",
            "\t\t\tlarges[ns] = larges[k] - (d <= v ? larges[smalls[d >> 1] - pc] : smalls[half(divide(N, d))]) + pc;",
            "\t\t\troughs[ns ++] = i;",
            "\t\t}",
            "\t\ts = ns;",
            "\t\tfor(int i = half(v), j = v / p - 1 | 1; j >= p; j -= 2){",
            "\t\t\tint c = smalls[j >> 1] - pc;",
            "\t\t\tfor(int e = j * p >> 1; i >= e; --i) smalls[i] -= c;",
            "\t\t}",
            "\t\t++ pc;",
            "\t}",
            "\tlarges[0] += (long long)(s + 2 * (pc - 1)) * (s - 1) / 2;",
            "\tfor(int k = 1; k < s; ++ k) larges[0] -= larges[k];",
            "\tfor(int l = 1; l < s; ++ l){",
            "\t\tint q = roughs[l];",
            "\t\tlong long M = N / q, t = 0;",
            "\t\tint e = smalls[half(M / q)] - pc;",
            "\t\tif(e < l + 1) break;",
            "\t\tfor(int k = l + 1; k <= e; ++ k) t += smalls[half(divide(M, roughs[k]))];",
            "\t\tlarges[0] += t - (long long)(e - l) * (pc + l - 1);",
            "\t}",
            "\treturn larges[0] + 1;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}