{
    "tranxuanbach": {
        "prefix": "find_dominators",
        "body": [
            "// Requries graph",
            "template<class T>",
            "vector<int> find_dominators(const graph<T> &g, int root){",
            "\tint n = g.n;",
            "\tvector<int> pos(n, -1), order, parent(n, -1);",
            "\tauto dfs = [&](auto dfs, int u)->void{",
            "\t\tpos[u] = (int)order.size();",
            "\t\torder.push_back(u);",
            "\t\tfor(auto id : g.adj[u]){",
            "\t\t\tif(g.ignore != nullptr && g.ignore(id)) continue;",
            "\t\t\tauto &e = g.edge[id];",
            "\t\t\tint v = e.to;",
            "\t\t\tif(!~pos[v]){",
            "\t\t\t\tparent[v] = u;",
            "\t\t\t\tdfs(dfs, v);",
            "\t\t\t}",
            "\t\t}",
            "\t};",
            "\tdfs(dfs, root);",
            "\tvector<int> p(n), best(n), sdom = pos;",
            "\tiota(p.begin(), p.end(), 0), iota(best.begin(), best.end(), 0);",
            "\tauto find_best = [&](auto find_best, int x)->int{",
            "\t\tif(p[x] != x){",
            "\t\t\tint u = find_best(find_best, p[x]);",
            "\t\t\tif(sdom[u] < sdom[best[x]]) best[x] = u;",
            "\t\t\tp[x] = p[p[x]];",
            "\t\t}",
            "\t\tif(sdom[best[p[x]]] < sdom[best[x]]) best[x] = best[p[x]];",
            "\t\treturn best[x];",
            "\t};",
            "\tgraph<int> rg = g.transpose();",
            "\tvector<int> idom(n, -1), link(n, -1);",
            "\tvector<vector<int>> bucket(n);",
            "\tfor(auto it = (int)order.size() - 1; it >= 0; -- it){",
            "\t\tint w = order[it];",
            "\t\tfor(auto id: rg.adj[w]){",
            "\t\t\tif(rg.ignore && rg.ignore(id)) continue;",
            "\t\t\tauto &e = rg.edge[id];",
            "\t\t\tint u = e.to;",
            "\t\t\tif(~pos[u]) sdom[w] = min(sdom[w], sdom[find_best(find_best, u)]);",
            "\t\t}",
            "\t\tidom[w] = order[sdom[w]];",
            "\t\tfor(auto u: bucket[w]) link[u] = find_best(find_best, u);",
            "\t\tfor(auto id: g.adj[w]){",
            "\t\t\tif(g.ignore != nullptr && g.ignore(id)) continue;",
            "\t\t\tauto &e = g.edge[id];",
            "\t\t\tint u = e.to;",
            "\t\t\tif(parent[u] == w) p[u] = w;",
            "\t\t}",
            "\t\tbucket[order[sdom[w]]].push_back(w);",
            "\t}",
            "\tfor(auto it = 1; it < (int)order.size(); ++ it) idom[order[it]] = idom[link[order[it]]];",
            "\treturn idom; // idom[i] -- immediate dominator for vertex i",
            "}"
        ],
        "description": "tranxuanbach"
    }
}