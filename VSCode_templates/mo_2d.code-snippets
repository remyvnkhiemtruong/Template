{
    "tranxuanbach": {
        "prefix": "mo_2d",
        "body": [
            "// Reorder N 2D points with max_x - min_x <= X, max_y - min_y <= Y",
            "// so that sum(abs(xi - x(i+1)) + abs(yi - y(i+1)) is small",
            "// and process queries on the new order.",
            "// X * BX inc_x and dec_x calls, X * Y / BX inc_y and dec_y calls at max",
            "// set BX = sqrt(X Y / N) to achieve sqrt(X Y N) calls at max",
            "template<int BX>",
            "struct mo_2d{",
            "\tvector<array<int, 3>> points;",
            "\tvoid query(int qi, int x, int y){",
            "\t\tpoints.push_back({x, y, qi});",
            "\t}",
            "\t// Access each points starting from (0, 0)",
            "\t// Each functions acts as if [x, y) is an interval",
            "\tvoid solve(auto dec_x, auto inc_y, auto inc_x, auto dec_y, auto process){",
            "\t\tauto cmp = [&](const auto &p, const auto &q)->bool{",
            "\t\t\treturn p[0] / BX != q[0] / BX ? p < q : p[0] / BX & 1 ? p[1] < q[1] : p[1] > q[1];",
            "\t\t};",
            "\t\tsort(points.begin(), points.end(), cmp);",
            "\t\tint x = 0, y = 0;",
            "\t\tfor(auto &[qx, qy, qi]: points){",
            "\t\t\twhile(qx < x) dec_x(-- x); // Insertion",
            "\t\t\twhile(y < qy) inc_y(y ++); // Insertion",
            "\t\t\twhile(x < qx) inc_x(x ++); // Deletion",
            "\t\t\twhile(qy < y) dec_y(-- y); // Deletion",
            "\t\t\tprocess(qi);",
            "\t\t}",
            "\t}",
            "};",
            "/*",
            "// Insert a[i] from left",
            "\tauto dec_x = [&](int i)->void{",
            "\t\t",
            "\t};",
            "\t// Insert a[i] from right",
            "\tauto inc_y = [&](int i)->void{",
            "",
            "\t};",
            "\t// Erase a[i] from left",
            "\tauto inc_x = [&](int i)->void{",
            "",
            "\t};",
            "\t// Erase a[i] from right",
            "\tauto dec_y = [&](int i)->void{",
            "",
            "\t};",
            "\tauto process = [&](int qi)->void{",
            "",
            "\t};",
            "\tmo.solve(dec_x, inc_y, inc_x, dec_y, process);",
            "*/"
        ],
        "description": "tranxuanbach"
    }
}