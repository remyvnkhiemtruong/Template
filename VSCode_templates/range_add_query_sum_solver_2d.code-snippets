{
    "tranxuanbach": {
        "prefix": "range_add_query_sum_solver_2d",
        "body": [
            "template<class T>",
            "struct range_add_query_sum_solver_2d{",
            "\tint n, m;",
            "\tvector<vector<T>> data0, data1, data2, data3;",
            "\trange_add_query_sum_solver_2d(){ }",
            "\t// O(n * m)",
            "\trange_add_query_sum_solver_2d(int n, int m): n(n), m(m), data0(n, vector<T>(m)), data1(n, vector<T>(m)), data2(n, vector<T>(m)), data3(n, vector<T>(m)){ }",
            "\t// O(n * m)",
            "\trange_add_query_sum_solver_2d(int n, int m, T init): range_add_query_sum_solver_2d(vector<vector<T>>(n, vector<T>(m, init))){ }",
            "\t// O(n * m)",
            "\trange_add_query_sum_solver_2d(const vector<vector<T>> &v): n((int)v.size()), m((int)v[0].size()), data0(n, vector<T>(m)), data1(n, vector<T>(m)), data2(n, vector<T>(m)), data3(v){",
            "\t\tfor(auto i = 1; i <= n; ++ i) if(i + (i & -i) <= n) for(auto j = 0; j < m; ++ j) data3[i + (i & -i) - 1][j] += data3[i - 1][j];",
            "\t\tfor(auto i = 0; i < n; ++ i) for(auto j = 1; j <= m; ++ j) if(j + (j & -j) <= m) data3[i][j + (j & -j) - 1] += data3[i][j - 1];",
            "\t}",
            "\t// O(log(n) * log(m))",
            "\tvoid update(int xl, int xr, int yl, int yr, T x){",
            "\t\tassert(0 <= xl && xl <= xr && xr <= n);",
            "\t\tassert(0 <= yl && yl <= yr && yr <= m);",
            "\t\tif(xl == xr || yl == yr) return;",
            "\t\tfor(auto i = xl + 1; i <= n; i += i & -i) for(auto j = yl + 1; j <= m; j += j & -j){",
            "\t\t\tdata0[i - 1][j - 1] += x;",
            "\t\t\tdata1[i - 1][j - 1] -= xl * x;",
            "\t\t\tdata2[i - 1][j - 1] -= yl * x;",
            "\t\t\tdata3[i - 1][j - 1] += xl * (yl * x);",
            "\t\t}",
            "\t\tfor(auto i = xl + 1; i <= n; i += i & -i) for(auto j = yr + 1; j <= m; j += j & -j){",
            "\t\t\tdata0[i - 1][j - 1] -= x;",
            "\t\t\tdata1[i - 1][j - 1] += xl * x;",
            "\t\t\tdata2[i - 1][j - 1] += yr * x;",
            "\t\t\tdata3[i - 1][j - 1] -= xl * (yr * x);",
            "\t\t}",
            "\t\tfor(auto i = xr + 1; i <= n; i += i & -i) for(auto j = yl + 1; j <= m; j += j & -j){",
            "\t\t\tdata0[i - 1][j - 1] -= x;",
            "\t\t\tdata1[i - 1][j - 1] += xr * x;",
            "\t\t\tdata2[i - 1][j - 1] += yl * x;",
            "\t\t\tdata3[i - 1][j - 1] -= xr * (yl * x);",
            "\t\t}",
            "\t\tfor(auto i = xr + 1; i <= n; i += i & -i) for(auto j = yr + 1; j <= m; j += j & -j){",
            "\t\t\tdata0[i - 1][j - 1] += x;",
            "\t\t\tdata1[i - 1][j - 1] -= xr * x;",
            "\t\t\tdata2[i - 1][j - 1] -= yr * x;",
            "\t\t\tdata3[i - 1][j - 1] += xr * (yr * x);",
            "\t\t}",
            "\t}",
            "\t// O(log(n) * log(m))",
            "\tT prefix(int xr, int yr) const{",
            "\t\tassert(0 <= xr && xr <= n);",
            "\t\tassert(0 <= yr && yr <= m);",
            "\t\tT sum0 = {}, sum1 = {}, sum2 = {}, sum3 = {};",
            "\t\tfor(auto x = xr; x > 0; x -= x & -x) for(auto y = yr; y > 0; y -= y & -y){",
            "\t\t\tsum0 += data0[x - 1][y - 1];",
            "\t\t\tsum1 += data1[x - 1][y - 1];",
            "\t\t\tsum2 += data2[x - 1][y - 1];",
            "\t\t\tsum3 += data3[x - 1][y - 1];",
            "\t\t}",
            "\t\treturn xr * (yr * sum0) + yr * sum1 + xr * sum2 + sum3;",
            "\t}",
            "\t// O(log(n) * log(m))",
            "\tT query(int xl, int xr, int yl, int yr) const{",
            "\t\tassert(0 <= xl && xl <= xr && xr <= n);",
            "\t\tassert(0 <= yl && yl <= yr && yr <= m);",
            "\t\tif(xl == xr || yl == yr) return {};",
            "\t\treturn prefix(xl, yl) - prefix(xl, yr) - prefix(xr, yl) + prefix(xr, yr);",
            "\t}",
            "\ttemplate<class output_stream>",
            "\tfriend output_stream &operator<<(output_stream &out, const range_add_query_sum_solver_2d &solver){",
            "\t\tfor(auto i = 0; i < solver.n; ++ i){",
            "\t\t\tout << \"\\n[\";",
            "\t\t\tfor(auto j = 0; j < solver.m; ++ j){",
            "\t\t\t\tout << solver.query(i, i + 1, j, j + 1);",
            "\t\t\t\tif(j != solver.m - 1) out << \", \";",
            "\t\t\t}",
            "\t\t\tout << \"]\\n\";",
            "\t\t}",
            "\t\treturn out;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}