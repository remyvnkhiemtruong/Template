{
    "tranxuanbach": {
        "prefix": "mo_2d_rectilinear_spanning_tree_ordering",
        "body": [
            "// WARNING: VERY VERY SLOW",
            "// Reorder N 2D points with max_x - min_x <= X, max_y - min_y <= Y",
            "// so that sum(abs(xi - x(i+1)) + abs(yi - y(i+1)) is small and process queries on the new order.",
            "// Requires point, disjoint_set, and rectilinear_minimum_spanning_tree",
            "struct mo_2d_rectilinear_spanning_tree_ordering{",
            "\tvector<point<int>> points{{0, 0}};",
            "\tvector<int> ind{-1};",
            "\tvoid query(int qi, int x, int y){",
            "\t\tpoints.push_back({x, y}), ind.push_back(qi);",
            "\t}",
            "\t// Access each points and execute queries.",
            "\tvoid solve(auto inc_x, auto dec_x, auto inc_y, auto dec_y, auto process){",
            "\t\tint n = (int)points.size();",
            "\t\tvector<vector<int>> adj(n);",
            "\t\tfor(auto [ignore, i, j]: rectilinear_minimum_spanning_tree<int>(points)) adj[i].push_back(j), adj[j].push_back(i);",
            "\t\tint x = 0, y = 0;",
            "\t\tauto dfs = [&](auto self, int u, int p)->void{",
            "\t\t\tfor(auto v: adj[u]){",
            "\t\t\t\tif(v != p){",
            "\t\t\t\t\tauto [qx, qy] = points[v];",
            "\t\t\t\t\twhile(qx < x) dec_x(), -- x;",
            "\t\t\t\t\twhile(y < qy) inc_y(), ++ y;",
            "\t\t\t\t\twhile(x < qx) inc_x(), ++ x;",
            "\t\t\t\t\twhile(qy < y) dec_y(), -- y;",
            "\t\t\t\t\tprocess(ind[v]);",
            "\t\t\t\t\tself(self, v, u);",
            "\t\t\t\t\tqx = points[u].x, qy = points[u].y;",
            "\t\t\t\t\twhile(qx < x) dec_x(), -- x;",
            "\t\t\t\t\twhile(y < qy) inc_y(), ++ y;",
            "\t\t\t\t\twhile(x < qx) inc_x(), ++ x;",
            "\t\t\t\t\twhile(qy < y) dec_y(), -- y;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t};",
            "\t\tdfs(dfs, 0, -1);",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}