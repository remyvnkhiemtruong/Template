{
    "tranxuanbach": {
        "prefix": "circle",
        "body": [
            "// T must be able to hold up to max(abs(x), abs(y), abs(r))^2",
            "// Requires point",
            "template<class T>",
            "struct circle{",
            "\tpoint<T> center;",
            "\tT radius;",
            "\tcircle(): center{}, radius{}{}",
            "\ttemplate<class U, class V, class W>",
            "\tcircle(U x, V y, W r): center(x, y), radius(r){ }",
            "\ttemplate<class U>",
            "\tcircle(const circle<U> &c): center(c.center), radius(c.radius){ }",
            "\tfriend istream &operator>>(istream &in, circle &c){",
            "\t\treturn in >> c.center >> c.radius;",
            "\t}",
            "\tbool operator==(const circle &c) const{",
            "\t\treturn center == c.center && radius == c.radius;",
            "\t}",
            "\tbool operator!=(const circle &c) const{",
            "\t\treturn center != c.center || radius != c.radius;",
            "\t}",
            "\ttemplate<class U>",
            "\tU square(U x) const{",
            "\t\treturn x * x;",
            "\t}",
            "\tbool contains(const point<T> &p = {}) const{",
            "\t\treturn squared_distance(center, p) <= square(radius);",
            "\t}",
            "\tbool strictly_contains(const point<T> &p = {}) const{",
            "\t\treturn squared_distance(center, p) < square(radius);",
            "\t}",
            "\tbool contains(const circle &c) const{",
            "\t\treturn c.radius <= radius && squared_distance(center, c.center) <= square(radius - c.radius);",
            "\t}",
            "\tbool strictly_contains(const circle &c) const{",
            "\t\treturn c.radius < radius && squared_distance(center, c.center) < square(radius - c.radius);",
            "\t}",
            "\tbool intersect(const circle &c) const{",
            "\t\tauto d = squared_distance(center, c.center);",
            "\t\treturn square(radius - c.radius) <= d && d <= square(radius + c.radius);",
            "\t}",
            "\tbool intersect_at_one_point(const circle &c) const{",
            "\t\tauto d = squared_distance(center, c.center);",
            "\t\treturn *this != c && (square(radius - c.radius) == d || d == square(radius + c.radius));",
            "\t}",
            "\tbool intersect_at_two_points(const circle &c) const{",
            "\t\tauto d = squared_distance(center, c.center);",
            "\t\treturn square(radius - c.radius) < d && d < square(radius + c.radius);",
            "\t}",
            "\t// In case of returning two points, center->list forms a positive orientation",
            "\tvector<point<double>> tangent_points(const point<T> &p = {}) const{",
            "\t\tassert(p != center || abs(radius) > T(1e-9));",
            "\t\tif(abs(radius) <= T(1e-9)) return {center};",
            "\t\tauto d = squared_distance(center, p);",
            "\t\tif(d < radius * radius) return {};",
            "\t\tif(d == radius * radius) return {p};",
            "\t\tauto l = radius * radius / sqrt(d), r = sqrt(d) - l;",
            "\t\tauto mid = (r * point<double>(center) + l * point<double>(p)) / (l + r);",
            "\t\tauto h = sqrt(radius * radius - l * l) * (mid - center).perp().unit();",
            "\t\treturn {mid - h, mid + h};",
            "\t}",
            "\t// In case of returning two points, center->list forms a positive orientation",
            "\tvector<point<long double>> tangent_pointsl(const point<T> &p = {}) const{",
            "\t\tassert(p != center || abs(radius) > T(1e-9));",
            "\t\tif(abs(radius) <= T(1e-9)) return {center};",
            "\t\tauto d = squared_distance(center, p);",
            "\t\tif(d < radius * radius) return {};",
            "\t\tif(d == radius * radius) return {p};",
            "\t\tauto l = radius * radius / sqrtl(d), r = sqrtl(d) - l;",
            "\t\tauto mid = (r * point<long double>(center) + l * point<long double>(p)) / (l + r);",
            "\t\tauto h = sqrtl(radius * radius - l * l) * (mid - center).perp().unitl();",
            "\t\treturn {mid - h, mid + h};",
            "\t}",
            "};",
            "",
            "using circleint = circle<int>;",
            "using circlell = circle<long long>;",
            "using circlelll = circle<__int128_t>;",
            "using circled = circle<double>;",
            "using circleld = circle<long double>;"
        ],
        "description": "tranxuanbach"
    }
}