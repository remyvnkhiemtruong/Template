{
    "tranxuanbach": {
        "prefix": "characteristic_polynomial_commutative_ring",
        "body": [
            "// Implementation of \"Determinant: Combinatorics, Algorithms, and Complexity\" by Meena Mahajan",
            "// Returns det(xI - a) if not flip otherwise det(a - xI)",
            "// T must be a commutative ring",
            "// O(n^4)",
            "template<class T>",
            "vector<T> characteristic_polynomial_commutative_ring(const vector<vector<T>> &M, T T_id_add = 0, T T_id_mul = 1, bool flip = false){",
            "\tif(M.empty()) return {T_id_mul};",
            "\tint n = (int)M.size();",
            "\tassert((int)M[0].size() == n);",
            "\tvector<vector<T>> dp(n, vector<T>(n, T_id_add));",
            "\tauto dp_next = dp;",
            "\tvector<T> res(n + 1, T_id_add);",
            "\tres[n] = n & 1 ? -T_id_mul : T_id_mul;",
            "\tfor(auto i = 0; i < n; ++ i) dp[i][i] = n & 1 ? T_id_mul : -T_id_mul;",
            "\tfor(auto l = 0; ; ++ l){",
            "\t\tfor(auto i = 0; i < n; ++ i) for(auto j = i; j < n; ++ j) res[n - 1 - l] += dp[i][j] * M[j][i];",
            "\t\tif(l == n - 1) break;",
            "\t\tfor(auto &r: dp_next) fill(r.begin(), r.end(), T_id_add);",
            "\t\tfor(auto i = 0; i < n; ++ i) for(auto j = 0; j <= i; ++ j){",
            "\t\t\tT x = dp[j][i];",
            "\t\t\tfor(auto k = j + 1; k < n; ++ k) dp_next[j][k] += x * M[i][k];",
            "\t\t\tif(j + 1 < n) dp_next[j + 1][j + 1] -= dp[j][i] * M[i][j];",
            "\t\t}",
            "\t\tfor(auto i = 0; i < n - 1; ++ i) dp_next[i + 1][i + 1] += dp_next[i][i];",
            "\t\tswap(dp, dp_next);",
            "\t}",
            "\tif(!flip && n & 1) for(auto &x: res) x = -x;",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}