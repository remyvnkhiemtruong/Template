{
    "tranxuanbach": {
        "prefix": "recognize_cographs",
        "body": [
            "// implementation of https://www.researchgate.net/publication/220753117_A_Simple_Linear_Time_LexBFS_Cograph_Recognition_Algorithm",
            "// O(|V| + |E|)",
            "// Requires graph and lexicographical_bfs_forest",
            "template<class T>",
            "bool recognize_cographs(const graph<T> &g){",
            "\tint n = g.n;",
            "\tlexicographical_bfs_forest lbf(n);",
            "\tlbf.bfs(g);",
            "\t// check NSP",
            "\tvector<list<int>> adj(n); // sorted adj list",
            "\tfor(auto u: lbf.order) for(auto id: g.adj[u]){",
            "\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\tadj[g(u, id)].push_back(u);",
            "\t}",
            "\tfor(auto u: lbf.order){",
            "\t\t// S(u) = order[pos[u], pos[u] + slice_size[u])",
            "\t\tif(lbf.pos[u] == n - 1) continue;",
            "\t\tint L = lbf.pos[u];",
            "\t\tint M = lbf.pos[u] + 1 + lbf.slice_size[lbf.order[lbf.pos[u] + 1]];",
            "\t\tint R = lbf.pos[u] + lbf.slice_size[u];",
            "\t\tif(R <= M) continue;",
            "\t\twhile(!adj[u].empty() && lbf.pos[adj[u].front()] < L) adj[u].pop_front();",
            "\t\tif(adj[u].empty() || R <= lbf.pos[adj[u].front()]) continue;",
            "\t\tint i = M;",
            "\t\tvector<int> A;",
            "\t\twhile(!adj[lbf.order[i]].empty() && lbf.pos[adj[lbf.order[i]].front()] < L) adj[lbf.order[i]].pop_front();",
            "\t\twhile(!adj[lbf.order[i]].empty() && lbf.pos[adj[lbf.order[i]].front()] < i){",
            "\t\t\tA.push_back(adj[lbf.order[i]].front());",
            "\t\t\tassert(L <= lbf.pos[A.back()]);",
            "\t\t\tadj[lbf.order[i]].pop_front();",
            "\t\t}",
            "\t\tfor(auto sz: lbf.cell_sizes[u]){",
            "\t\t\tint j = i + sz;",
            "\t\t\tif(R <= j) break;",
            "\t\t\tvector<int> B;",
            "\t\t\twhile(!adj[lbf.order[j]].empty() && lbf.pos[adj[lbf.order[j]].front()] < L) adj[lbf.order[j]].pop_front();",
            "\t\t\twhile(!adj[lbf.order[j]].empty() && lbf.pos[adj[lbf.order[j]].front()] < j){",
            "\t\t\t\tB.push_back(adj[lbf.order[j]].front());",
            "\t\t\t\tassert(L <= lbf.pos[B.back()]);",
            "\t\t\t\tadj[lbf.order[j]].pop_front();",
            "\t\t\t}",
            "\t\t\tint t = 0;",
            "\t\t\tfor(auto y: B){",
            "\t\t\t\twhile(t < (int)A.size() && A[t] != y) ++ t;",
            "\t\t\t\tif(t == (int)A.size()) return false;",
            "\t\t\t}",
            "\t\t\ti = j, A = B;",
            "\t\t}",
            "\t}",
            "\tlbf.bfs(g, vector<int>(lbf.order), true);",
            "\t// check NSP",
            "\tfor(auto &v: adj) v.clear();",
            "\tfor(auto u: lbf.order){",
            "\t\tfor(auto id: g.adj[u]){",
            "\t\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\t\tauto &e = g.edge[id];",
            "\t\t\tint v = u ^ e.from ^ e.to;",
            "\t\t\tadj[v].push_back(u);",
            "\t\t}",
            "\t}",
            "\tfor(auto u: lbf.order){",
            "\t\t// S(u) = order[pos[u], pos[u] + slice_size[u])",
            "\t\tif(lbf.pos[u] == n - 1) continue;",
            "\t\tint L = lbf.pos[u];",
            "\t\tint M = lbf.pos[u] + 1 + lbf.slice_size[lbf.order[lbf.pos[u] + 1]];",
            "\t\tint R = lbf.pos[u] + lbf.slice_size[u];",
            "\t\tif(R <= M) continue;",
            "\t\twhile(!adj[u].empty() && lbf.pos[adj[u].front()] < L) adj[u].pop_front();",
            "\t\tif(adj[u].empty() || R <= lbf.pos[adj[u].front()]) continue;",
            "\t\tint i = M;",
            "\t\tvector<int> A;",
            "\t\twhile(!adj[lbf.order[i]].empty() && lbf.pos[adj[lbf.order[i]].front()] < L) adj[lbf.order[i]].pop_front();",
            "\t\twhile(!adj[lbf.order[i]].empty() && lbf.pos[adj[lbf.order[i]].front()] < i){",
            "\t\t\tA.push_back(adj[lbf.order[i]].front());",
            "\t\t\tassert(L <= lbf.pos[A.back()]);",
            "\t\t\tadj[lbf.order[i]].pop_front();",
            "\t\t}",
            "\t\tfor(auto sz: lbf.cell_sizes[u]){",
            "\t\t\tint j = i + sz;",
            "\t\t\tif(R <= j) break;",
            "\t\t\tvector<int> B;",
            "\t\t\twhile(!adj[lbf.order[j]].empty() && lbf.pos[adj[lbf.order[j]].front()] < L) adj[lbf.order[j]].pop_front();",
            "\t\t\twhile(!adj[lbf.order[j]].empty() && lbf.pos[adj[lbf.order[j]].front()] < j){",
            "\t\t\t\tB.push_back(adj[lbf.order[j]].front());",
            "\t\t\t\tassert(L <= lbf.pos[B.back()]);",
            "\t\t\t\tadj[lbf.order[j]].pop_front();",
            "\t\t\t}",
            "\t\t\tfor(auto t = i; t < j; ++ t) A.push_back(lbf.order[t]);",
            "\t\t\tint t = 0;",
            "\t\t\tfor(auto x: A){",
            "\t\t\t\twhile(t < (int)B.size() && B[t] != x){",
            "\t\t\t\t\t++ t;",
            "\t\t\t\t}",
            "\t\t\t\tif(t == (int)B.size()){",
            "\t\t\t\t\treturn false;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\ti = j, A = B;",
            "\t\t}",
            "\t}",
            "\treturn true;",
            "}",
            "// TODO: construct the cotree if true, find an induced P4 otherwise."
        ],
        "description": "tranxuanbach"
    }
}