{
    "tranxuanbach": {
        "prefix": "modexp",
        "body": [
            "// 156485479_1_1",
            "// Modular Exponentiation, Modular Inverse and Geometric Sum",
            "// O(log e)",
            "long long modexp(long long b, long long e, const long long &mod){",
            "\tlong long res = 1;",
            "\tfor(; e; b = b * b % mod, e >>= 1) if(e & 1) res = res * b % mod;",
            "\treturn res;",
            "}",
            "long long modinv(long long a, const long long &mod){",
            "\treturn modexp(a, mod - 2, mod);",
            "}",
            "long long modgeo(long long b, long long e, const long long &mod){",
            "\tif(e < 2) return e;",
            "\tlong long res = 1;",
            "\tfor(long long bit = 1 << 30 - __builtin_clz(e), p = 1; bit; bit >>= 1){",
            "\t\tres = res * (1 + p * b % mod) % mod, p = p * p % mod * b % mod;",
            "\t\tif(bit & e) res = (res + (p = p * b % mod)) % mod;",
            "\t}",
            "\treturn res;",
            "}",
            "template<typename T>",
            "T binexp(T b, long long e){",
            "\tT res = 1;",
            "\tfor(; e; b *= b, e >>= 1) if(e & 1) res *= b;",
            "\treturn res;",
            "}",
            "template<typename T>",
            "T bingeo(const T &b, long long e){",
            "\tif(e < 2) return e;",
            "\tT res = 1, p = 1;",
            "\tfor(long long bit = 1 << 30 - __builtin_clz(e); bit; bit >>= 1){",
            "\t\tres *= 1 + p * b, p *= p * b;",
            "\t\tif(bit & e) res += (p *= b);",
            "\t}",
            "\treturn res;",
            "}",
            "template<typename T, typename BO>",
            "T binexp(T b, long long e, BO bin_op, const T &id){",
            "\tT res = id;",
            "\tfor(; e; b = bin_op(b, b), e >>= 1) if(e & 1) res = bin_op(res, b);",
            "\treturn res;",
            "}",
            "template<typename T, typename AO, typename MO>",
            "T bingeo(const T &b, long long e, AO add_op, const T &add_id, MO mul_op, const T &mul_id){",
            "\tif(e < 2) return e ? mul_id : add_id;",
            "\tT res = mul_id, p = mul_id;",
            "\tfor(long long bit = 1 << 30 - __builtin_clz(e); bit; bit >>= 1){",
            "\t\tres = mul_op(res, add_op(mul_id, mul_op(p, b))), p = mul_op(mul_op(p, p), b);",
            "\t\tif(bit & e) res = add_op(res, p = mul_op(p, b));",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}