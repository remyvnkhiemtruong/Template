{
    "tranxuanbach": {
        "prefix": "string_processor",
        "body": [
            "// Type 0: lower case, 1: upper case, 2: lower and upper case",
            "template<int Type> int character_converter(int c){",
            "\tif(Type == 0) return c - 'a';",
            "\telse if(Type == 1) return c - 'A';",
            "\telse return islower(c) ? c - 'a' : c - 'A' + 26;",
            "}",
            "template<int Type> int inverse_character_converter(int x){",
            "\tif(Type == 0) return x + 'a';",
            "\telse if(Type == 1) return x + 'A';",
            "\telse return x < 26 ? x + 'a' : x - 26 + 'A';",
            "}",
            "template<int Type> istream &read_string(istream &in){ return in; }",
            "template<int Type, class Head, class... Tail>",
            "istream &read_string(istream &in, Head &H, Tail &...T){",
            "\tstring temp;",
            "\tin >> temp;",
            "\tH.resize((int)temp.size());",
            "\tfor(auto i = 0; i < (int)temp.size(); ++ i) H[i] = character_converter<Type>(temp[i]);",
            "\treturn read_string<Type>(in, T...);",
            "}",
            "template<int Type> ostream &print_string(ostream &out){ return out; }",
            "template<int Type, class Head, class... Tail>",
            "ostream &print_string(ostream &out, const Head &H, const Tail &...T){",
            "\tstring temp((int)H.size(), '?');",
            "\tfor(auto i = 0; i < (int)H.size(); ++ i) temp[i] = inverse_character_converter<Type>(H[i]);",
            "\treturn print_string<Type>(out << temp << \" \", T...);",
            "}",
            "template<class Char_Type>",
            "vector<Char_Type> &append(vector<Char_Type> &s){",
            "\treturn s;",
            "}",
            "template<class Char_Type, class Head, class... Tail>",
            "vector<Char_Type> &append(vector<Char_Type> &s, const Head &H, const Tail &... T){",
            "\tif constexpr(is_same<Char_Type, Head>::value) s.push_back(H);",
            "\telse s.insert(s.end(), H.begin(), H.end());",
            "\treturn append(s, T...);",
            "}",
            "template<class Char_Or_String_Type>",
            "Char_Or_String_Type concat(Char_Or_String_Type s){",
            "\treturn s;",
            "}",
            "template<class Char_Type, class... Tail>",
            "vector<Char_Type> concat(const vector<Char_Type> &s, const Tail &... T){",
            "\tvector<Char_Type> res = s;",
            "\treturn append(res, T...);",
            "}",
            "template<class Char_Type, class... Tail>",
            "Char_Type concat(Char_Type s, const Tail &... T){",
            "\tvector<Char_Type> res{s};",
            "\treturn append(res, T...);",
            "}"
        ],
        "description": "tranxuanbach"
    }
}