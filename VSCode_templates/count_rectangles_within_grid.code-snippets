{
    "tranxuanbach": {
        "prefix": "count_rectangles_within_grid",
        "body": [
            "// Given a grid with obstacles, for each 1 <= X <= H and 1 <= Y <= W, find the number of ways to place an X x Y rectangle within the grid.",
            "// O(n m)",
            "vector<vector<int>> count_rectangles_within_grid(const vector<vector<int>> &grid){",
            "\tint n = (int)grid.size(), m = (int)grid[0].size();",
            "\tvector<vector<int>> cnt(n + 3, vector<int>(m + 3));",
            "\tvector<int> maxh(m);",
            "\tfor(auto i = 0; i < n; ++ i){",
            "\t\tvector<int> maxh_next(m);",
            "\t\tfor(auto j = 0; j < m; ++ j) if(grid[i][j]) maxh_next[j] = maxh[j] + 1;",
            "\t\tswap(maxh, maxh_next);",
            "\t\tvector<array<int, 2>> left(m), right(m), stack;",
            "\t\tstack = {{0, 0}};",
            "\t\tfor(auto j = 0; j < m; ++ j){",
            "\t\t\twhile((int)stack.size() >= 2 && stack.back()[0] >= maxh[j]) stack.pop_back();",
            "\t\t\tleft[j] = {stack.back()};",
            "\t\t\tstack.push_back({maxh[j], j + 1});",
            "\t\t}",
            "\t\tstack = {{0, m}};",
            "\t\tfor(auto j = m - 1; j >= 0; -- j){",
            "\t\t\twhile((int)stack.size() >= 2 && stack.back()[0] > maxh[j]) stack.pop_back();",
            "\t\t\tright[j] = {stack.back()};",
            "\t\t\tstack.push_back({maxh[j], j});",
            "\t\t}",
            "\t\tfor(auto j = 0; j < m; ++ j){",
            "\t\t\tint len = right[j][1] - left[j][1];",
            "\t\t\tint xl = max(left[j][0], right[j][0]) + 1, xr = maxh[j] + 1, yl = 1, yr = len + 1;",
            "\t\t\tcnt[xl][yl] += len, cnt[xl][yl + 1] -= len + 1, cnt[xl][yr + 1] += 1;",
            "\t\t\tcnt[xl + 1][yl] -= len, cnt[xl + 1][yl + 1] += len + 1, cnt[xl + 1][yr + 1] -= 1;",
            "\t\t\tcnt[xr][yl] -= len, cnt[xr][yl + 1] += len + 1, cnt[xr][yr + 1] -= 1;",
            "\t\t\tcnt[xr + 1][yl] += len, cnt[xr + 1][yl + 1] -= len + 1, cnt[xr + 1][yr + 1] += 1;",
            "\t\t}",
            "\t}",
            "\tfor(auto x = 1; x <= n; ++ x) for(auto y = 1; y <= m; ++ y) cnt[x][y] += cnt[x][y - 1];",
            "\tfor(auto x = 1; x <= n; ++ x) for(auto y = 1; y <= m; ++ y) cnt[x][y] += cnt[x - 1][y];",
            "\tfor(auto x = 1; x <= n; ++ x) for(auto y = 1; y <= m; ++ y) cnt[x][y] += cnt[x][y - 1];",
            "\tfor(auto x = 1; x <= n; ++ x) for(auto y = 1; y <= m; ++ y) cnt[x][y] += cnt[x - 1][y];",
            "\tcnt.resize(n + 1);",
            "\tfor(auto x = 0; x <= n; ++ x) cnt[x].resize(m + 1);",
            "\treturn cnt;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}