{
    "tranxuanbach": {
        "prefix": "group",
        "body": [
            "// Implicitly assumes that group() returns the additive identity.",
            "template<class T>",
            "struct group{",
            "\t// Modify begin",
            "\tT data = 0;",
            "\tbool operator==(const group &x) const{",
            "\t\treturn data == x.data;",
            "\t}",
            "\tgroup &operator+=(const group &x){",
            "\t\tdata += x.data;",
            "\t\treturn *this;",
            "\t}",
            "\tgroup &operator-=(const group &x){",
            "\t\tdata -= x.data;",
            "\t\treturn *this;",
            "\t}",
            "\ttemplate<class U>",
            "\tgroup &operator*=(U e){",
            "\t\tif(e < 0){",
            "\t\t\t*this = -*this;",
            "\t\t\te = -e;",
            "\t\t}",
            "\t\tgroup res{};",
            "\t\tfor(; e; e >>= 1, *this = *this * *this) if(e & 1) res += *this;",
            "\t\treturn *this = res;",
            "\t}",
            "\tfriend ostream &operator<<(ostream &out, const group &x){",
            "\t\treturn out << x.data;",
            "\t}",
            "\t// Modify end",
            "\tbool operator!=(const group &x) const{",
            "\t\treturn !(*this == x);",
            "\t}",
            "\tgroup operator+(const group &x) const{",
            "\t\treturn group(*this) += x;",
            "\t}",
            "\tgroup operator+() const{",
            "\t\treturn *this;",
            "\t}",
            "\tgroup operator-(const group &x) const{",
            "\t\treturn group(*this) -= x;",
            "\t}",
            "\tgroup operator-() const{",
            "\t\treturn group() - *this;",
            "\t}",
            "\ttemplate<class U>",
            "\tgroup operator*(U e) const{",
            "\t\treturn group(*this) *= e;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}