{
    "tranxuanbach": {
        "prefix": "longest_common_substring",
        "body": [
            "// Given a suffix automaton aut of a string s and a string t",
            "// Returns {",
            "//  length of the longest common substring,",
            "//  starting index of any such substring in s,",
            "//  starting index of any such substring in t",
            "// }",
            "// O(m)",
            "// Requires suffix_automaton",
            "template<class Char_Type, class Adjacency_Type>",
            "array<int, 3> longest_common_substring(const suffix_automaton<Char_Type, Adjacency_Type> &aut, const vector<Char_Type> &t){",
            "\tint l = 0, r = 0, opt_len = 0;",
            "\tfor(auto i = 0, u = 0, len = 0; i < (int)t.size(); ++ i){",
            "\t\ttie(u, len) = aut.next_state(u, len, t[i]);",
            "\t\tif(opt_len < len){",
            "\t\t\topt_len = len;",
            "\t\t\tl = aut.firstpos[u] + 1 - len;",
            "\t\t\tr = i + 1 - len;",
            "\t\t}",
            "\t}",
            "\treturn {opt_len, l, r};",
            "}"
        ],
        "description": "tranxuanbach"
    }
}