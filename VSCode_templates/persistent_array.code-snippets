{
    "tranxuanbach": {
        "prefix": "persistent_array",
        "body": [
            "// from https://judge.yosupo.jp/submission/38019",
            "template<class T, int K = 20>",
            "struct persistent_array{",
            "\tstruct Node; // No memory release by default.",
            "\tusing NodePtr = Node *; // shared_ptr<Node>;",
            "\tstruct Node{",
            "\t\toptional<T> val;",
            "\t\tunique_ptr<array<NodePtr, K>> children;",
            "\t};",
            "\texplicit persistent_array(NodePtr root): root{move(root)}{ }",
            "\tpersistent_array(): root{}{}",
            "\tpersistent_array(const persistent_array &) = default;",
            "\tpersistent_array(persistent_array &&) = default;",
            "\tpersistent_array &operator=(const persistent_array &) = default;",
            "\tpersistent_array &operator=(persistent_array &&) = default;",
            "\toptional<T> operator[](int idx) const{ return do_get(idx, root); }",
            "\tpersistent_array<T, K> set(int idx, T val) const{ return persistent_array<T, K>(do_set(idx, val, root)); }",
            "private:",
            "\tstatic optional<T> do_get(int idx, const NodePtr &node){",
            "\t\tif(node == nullptr) return nullopt;",
            "\t\tif(idx == 0) return node->val;",
            "\t\tif(node->children == nullptr) return nullopt;",
            "\t\tconst NodePtr &child = (*node->children)[idx % K];",
            "\t\tif(child == nullptr) return nullopt;",
            "\t\treturn do_get(idx / K, child);",
            "\t}",
            "\tstatic NodePtr do_set(int idx, T val, const NodePtr &node){",
            "\t\tNodePtr res{new Node()};",
            "\t\tif(node != nullptr){",
            "\t\t\tres->val = node->val;",
            "\t\t\tif(node->children != nullptr){",
            "\t\t\t\tres->children.reset(new array<NodePtr, K>());",
            "\t\t\t\tcopy(node->children->begin(), node->children->end(),",
            "\t\t\t\tres->children->begin());",
            "\t\t\t}",
            "\t\t}",
            "\t\tif(idx == 0) res->val = move(val);",
            "\t\telse{",
            "\t\t\tif(res->children == nullptr) res->children.reset(new array<NodePtr, K>());",
            "\t\t\t(*res->children)[idx % K] = do_set(idx / K, move(val), (*res->children)[idx % K]);",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\tNodePtr root;",
            "};"
        ],
        "description": "tranxuanbach"
    }
}