{
    "tranxuanbach": {
        "prefix": "point",
        "body": [
            "template<class T>",
            "struct point{",
            "\tT x{}, y{};",
            "\tpoint(){ }",
            "\ttemplate<class U> point(const point<U> &otr): x(otr.x), y(otr.y){ }",
            "\ttemplate<class U, class V> point(U x, V y): x(x), y(y){ }",
            "\ttemplate<class U> point(const array<U, 2> &p): x(p[0]), y(p[1]){ }",
            "\tfriend istream &operator>>(istream &in, point &p){",
            "\t\treturn in >> p.x >> p.y;",
            "\t}",
            "\tfriend ostream &operator<<(ostream &out, const point &p){",
            "\t\treturn out << \"{\" << p.x << \", \" << p.y << \"}\";",
            "\t}",
            "\ttemplate<class U> operator array<U, 2>() const{",
            "\t\treturn {x, y};",
            "\t}",
            "\tT operator*(const point &otr) const{",
            "\t\treturn x * otr.x + y * otr.y;",
            "\t}",
            "\tT operator^(const point &otr) const{",
            "\t\treturn x * otr.y - y * otr.x;",
            "\t}",
            "\tpoint operator+(const point &otr) const{",
            "\t\treturn {x + otr.x, y + otr.y};",
            "\t}",
            "\tpoint &operator+=(const point &otr){",
            "\t\treturn *this = *this + otr;",
            "\t}",
            "\tpoint operator-(const point &otr) const{",
            "\t\treturn {x - otr.x, y - otr.y};",
            "\t}",
            "\tpoint &operator-=(const point &otr){",
            "\t\treturn *this = *this - otr;",
            "\t}",
            "\tpoint operator-() const{",
            "\t\treturn {-x, -y};",
            "\t}",
            "#define scalarop_l(op) friend point operator op(const T &c, const point &p){ return {c op p.x, c op p.y}; }",
            "\tscalarop_l(+) scalarop_l(-) scalarop_l(*) scalarop_l(/)",
            "#define scalarop_r(op) point operator op(const T &c) const{ return {x op c, y op c}; }",
            "\tscalarop_r(+) scalarop_r(-) scalarop_r(*) scalarop_r(/)",
            "#define scalarapply(applyop, op) point &operator applyop(const T &c){ return *this = *this op c; }",
            "\tscalarapply(+=, +) scalarapply(-=, -) scalarapply(*=, *) scalarapply(/=, /)",
            "#define compareop(op) bool operator op(const point &otr) const{ return pair<T, T>(x, y) op pair<T, T>(otr.x, otr.y); }",
            "\tcompareop(>) compareop(<) compareop(>=) compareop(<=) compareop(==) compareop(!=)",
            "#undef scalarop_l",
            "#undef scalarop_r",
            "#undef scalarapply",
            "#undef compareop",
            "\tdouble norm() const{",
            "\t\treturn sqrt(x * x + y * y);",
            "\t}",
            "\tlong double norm_l() const{",
            "\t\treturn sqrtl(x * x + y * y);",
            "\t}",
            "\tT squared_norm() const{",
            "\t\treturn x * x + y * y;",
            "\t}",
            "\t// [0, 2 * pi]",
            "\tdouble angle() const{",
            "\t\tauto a = atan2(y, x);",
            "\t\tif(a < 0) a += 2 * acos(-1);",
            "\t\treturn a;",
            "\t}",
            "\t// [0, 2 * pi]",
            "\tlong double angle_l() const{",
            "\t\tauto a = atan2(y, x);",
            "\t\tif(a < 0) a += 2 * acosl(-1);",
            "\t\treturn a;",
            "\t}",
            "\tpoint<double> unit() const{",
            "\t\treturn point<double>(x, y) / norm();",
            "\t}",
            "\tpoint<long double> unit_l() const{",
            "\t\treturn point<long double>(x, y) / norm_l();",
            "\t}",
            "\tpoint perp() const{",
            "\t\treturn {-y, x};",
            "\t}",
            "\tpoint<double> normal() const{",
            "\t\treturn perp().unit();",
            "\t}",
            "\tpoint<long double> normal_l() const{",
            "\t\treturn perp().unit_l();",
            "\t}",
            "\tpoint<double> rotate(double theta) const{",
            "\t\treturn {x * cos(theta) - y * sin(theta), x * sin(theta) + y * cos(theta)};",
            "\t}",
            "\tpoint<long double> rotate_l(double theta) const{",
            "\t\treturn {x * cosl(theta) - y * sinl(theta), x * sinl(theta) + y * cosl(theta)};",
            "\t}",
            "\tpoint reflect_x() const{",
            "\t\treturn {x, -y};",
            "\t}",
            "\tpoint reflect_y() const{",
            "\t\treturn {-x, y};",
            "\t}",
            "\tpoint reflect(const point &o = {}) const{",
            "\t\treturn {2 * o.x - x, 2 * o.y - y};",
            "\t}",
            "\tbool parallel_to(const point &q) const{",
            "\t\tif constexpr(is_floating_point_v<T>) return abs(*this ^ q) <= 1e-9;",
            "\t\telse return abs(*this ^ q) == 0;",
            "\t}",
            "};",
            "template<class T, class U>",
            "point<double> lerp(const point<T> &p, const point<U> &q, double t){",
            "\treturn point<double>(p) * (1 - t) + point<double>(q) * t;",
            "}",
            "template<class T, class U>",
            "point<long double> lerp_l(const point<T> &p, const point<U> &q, long double t){",
            "\treturn point<long double>(p) * (1 - t) + point<long double>(q) * t;",
            "}",
            "template<class T>",
            "double distance(const point<T> &p, const point<T> &q){",
            "\treturn (p - q).norm();",
            "}",
            "template<class T>",
            "long double distance_l(const point<T> &p, const point<T> &q){",
            "\treturn (p - q).norm_l();",
            "}",
            "template<class T>",
            "T squared_distance(const point<T> &p, const point<T> &q){",
            "\treturn (p - q).squared_norm();",
            "}",
            "template<class T>",
            "T doubled_signed_area(const point<T> &p, const point<T> &q, const point<T> &r){",
            "\treturn q - p ^ r - p;",
            "}",
            "template<class T>",
            "T doubled_signed_area(const vector<point<T>> &a){",
            "\tif(a.empty()) return 0;",
            "\tT res = a.back() ^ a.front();",
            "\tfor(auto i = 1; i < (int)a.size(); ++ i) res += a[i - 1] ^ a[i];",
            "\treturn res;",
            "}",
            "// [-pi, pi]",
            "template<class T>",
            "double angle(const point<T> &p, const point<T> &q){",
            "\treturn atan2(p ^ q, p * q);",
            "}",
            "// [-pi, pi]",
            "template<class T>",
            "long double angle_l(const point<T> &p, const point<T> &q){",
            "\treturn atan2l(p ^ q, p * q);",
            "}",
            "// Check if p->q->r is sorted by angle with respect to the origin",
            "template<class T>",
            "bool is_sorted_by_angle(const point<T> &origin, const point<T> &p, const point<T> &q, const point<T> &r){",
            "\tT x = p - origin ^ q - origin;",
            "\tT y = q - origin ^ r - origin;",
            "\tif(x >= 0 && y >= 0) return true;",
            "\tif(x < 0 && y < 0) return false;",
            "\treturn (p - origin ^ r - origin) < 0;",
            "}",
            "// Check if a is sorted by angle with respect to the origin",
            "template<class T>",
            "bool is_sorted_by_angle(const point<T> &origin, const vector<point<T>> &a){",
            "\tfor(auto i = 0; i < (int)a.size() - 2; ++ i) if(!is_sorted_by_angle(origin, a[i], a[i + 1], a[i + 2])) return false;",
            "\treturn true;",
            "}",
            "template<class T>",
            "bool counterclockwise(const point<T> &p, const point<T> &q, const point<T> &r){",
            "\treturn doubled_signed_area(p, q, r) > 0;",
            "}",
            "template<class T>",
            "bool clockwise(const point<T> &p, const point<T> &q, const point<T> &r){",
            "\treturn doubled_signed_area(p, q, r) < 0;",
            "}",
            "template<class T>",
            "bool colinear(const point<T> &p, const point<T> &q, const point<T> &r){",
            "\treturn doubled_signed_area(p, q, r) == 0;",
            "}",
            "template<class T>",
            "bool colinear(const vector<point<T>> &a){",
            "\tint i = 1;",
            "\twhile(i < (int)a.size() && a[0] == a[i]) ++ i;",
            "\tif(i == (int)a.size()) return true;",
            "\tfor(auto j = i + 1; j < (int)a.size(); ++ j) if(!colinear(a[0], a[i], a[j])) return false;",
            "\treturn true;",
            "}",
            "point<double> polar(double x, double theta){",
            "\tassert(x >= 0);",
            "\treturn {x * cos(theta), x * sin(theta)};",
            "}",
            "point<long double> polar_l(long double x, long double theta){",
            "\tassert(x >= 0);",
            "\treturn {x * cosl(theta), x * sinl(theta)};",
            "}",
            "// T must be able to hold the fourth power of max coordinate",
            "// returns [a, b, c, and d lies in a circle]",
            "template<class T>",
            "bool concircular(point<T> a, point<T> b, point<T> c, const point<T> &d){",
            "\t\ta -= d, b -= d, c -= d;",
            "\treturn a.squared_norm() * (b ^ c) + b.squared_norm() * (c ^ a) + c.squared_norm() * (a ^ b) == 0;",
            "}",
            "// T must be able to hold the fourth power of max coordinate",
            "// returns [d lies in the interior of the circle defined by a, b, c]",
            "template<class T>",
            "bool inside_of_circle(point<T> a, point<T> b, point<T> c, const point<T> &d){",
            "\t\ta -= d, b -= d, c -= d;",
            "\treturn (a.squared_norm() * (b ^ c) + b.squared_norm() * (c ^ a) + c.squared_norm() * (a ^ b)) * (doubled_signed_area(a, b, c) > 0 ? 1 : -1) > 0;",
            "}",
            "// T must be able to hold the fourth power of max coordinate",
            "// returns [d lies in the exterior of the circle defined by a, b, c]",
            "template<class T>",
            "bool outside_of_circle(point<T> a, point<T> b, point<T> c, const point<T> &d){",
            "\t\ta -= d, b -= d, c -= d;",
            "\treturn (a.squared_norm() * (b ^ c) + b.squared_norm() * (c ^ a) + c.squared_norm() * (a ^ b)) * (doubled_signed_area(a, b, c) > 0 ? -1 : 1) > 0;",
            "}",
            "",
            "using pointint = point<int>;",
            "using pointll = point<long long>;",
            "using pointlll = point<__int128_t>;",
            "using pointd = point<double>;",
            "using pointld = point<long double>;"
        ],
        "description": "tranxuanbach"
    }
}