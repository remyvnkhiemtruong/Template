{
    "tranxuanbach": {
        "prefix": "segment_in_polygon",
        "body": [
            "// Returns [closed segment l lies (strictly if [strict]) inside poly].",
            "// Requires point, line, and point_in_polygon",
            "template<class T>",
            "bool segment_in_polygon(const line<T> &l, const vector<point<T>> &poly, bool strict = true){",
            "\tif(!point_in_polygon(l.p, poly, strict) || !point_in_polygon(l.q(), poly, strict)) return false;",
            "\tif(l.p == l.q()) return true;",
            "\tint n = (int)poly.size();",
            "\tfor(auto u = 0; u < n; ++ u){",
            "\t\tauto r = poly[u], s = poly[(u + 1) % n];",
            "\t\tauto prod = l.q() - l.p ^ s - r;",
            "\t\tauto x = r - l.p ^ l.q() - l.p;",
            "\t\tauto y = s - r ^ l.p - r;",
            "\t\tif(prod < 0) prod = -prod, x = -x, y = -y;",
            "\t\tif(0 < x && x < prod && 0 <= y && y <= prod){",
            "\t\t\t// intersects strictly between r and s",
            "\t\t\tif(clockwise(r, s, l.p) || clockwise(r, s, l.q())) return false;",
            "\t\t}",
            "\t\tif((s - l.p ^ s - l.q()) == 0 && (s - l.p) * (s - l.q()) <= 0){",
            "\t\t\t// intersects at point s",
            "\t\t\tauto t = poly[(u + 2) % n];",
            "\t\t\tif(counterclockwise(l.p, l.q(), r) && counterclockwise(l.q(), l.p, t)){",
            "\t\t\t\tif(s != l.p) return false;",
            "\t\t\t}",
            "\t\t\telse if(counterclockwise(l.p, l.q(), t) && counterclockwise(l.q(), l.p, r)){",
            "\t\t\t\tif(s != l.q()) return false;",
            "\t\t\t}",
            "\t\t\telse if(counterclockwise(l.p, l.q(), r) || counterclockwise(l.p, l.q(), t)){",
            "\t\t\t\tif(counterclockwise(r, s, t) && !(s == l.q() && colinear(l.p, r, s)) && !(s == l.p && colinear(s, t, l.q()))) return false;",
            "\t\t\t}",
            "\t\t\telse{",
            "\t\t\t\tif(counterclockwise(r, s, t) && !(s == l.p && colinear(s, r, l.q())) && !(s == l.q() && colinear(l.p, t, s))) return false;",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\treturn true;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}