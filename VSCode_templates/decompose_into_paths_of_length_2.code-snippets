{
    "tranxuanbach": {
        "prefix": "decompose_into_paths_of_length_2",
        "body": [
            "// Reads an undirected graph",
            "// Process_p3(edge1, middle_vertex, edge2)",
            "// Process_edge(edge) : process arbitrary remaining edge in a component with odd number of edges",
            "// O(|V| + |E|)",
            "// Requires graph",
            "template<class T>",
            "void decompose_into_paths_of_length_2(const graph<T> &g, auto process_p3, auto process_edge){",
            "\tint n = g.n;",
            "\tvector<int> depth(n, -1), used((int)g.edge.size());",
            "\tauto recurse = [&](auto self, int u, int pe, int d)->bool{",
            "\t\tint rem = -1;",
            "\t\tdepth[u] = d;",
            "\t\tfor(auto id: g.adj[u]){",
            "\t\t\tif(id == pe || g.ignore && g.ignore(id)) continue;",
            "\t\t\tauto &e = g.edge[id];",
            "\t\t\tint v = u ^ e.from ^ e.to;",
            "\t\t\tif(~depth[v] && !used[id] || !~depth[v] && self(self, v, id, depth[u] + 1)){",
            "\t\t\t\tused[id] = true;",
            "\t\t\t\tif(~rem){",
            "\t\t\t\t\tprocess_p3(rem, u, id);",
            "\t\t\t\t\trem = -1;",
            "\t\t\t\t}",
            "\t\t\t\telse rem = id;",
            "\t\t\t}",
            "\t\t}",
            "\t\tif(!~rem) return true;",
            "\t\t~pe ? process_p3(pe, u, rem) : process_edge(rem);",
            "\t\treturn false;",
            "\t};",
            "\tfor(auto u = 0; u < n; ++ u) if(!~depth[u]) recurse(recurse, u, -1, 0);",
            "}"
        ],
        "description": "tranxuanbach"
    }
}