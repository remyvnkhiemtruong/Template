{
    "tranxuanbach": {
        "prefix": "fenwick_tree_2d_sparse_sum",
        "body": [
            "template<class B, class T>",
            "struct fenwick_tree_2d_sparse_sum{",
            "\tvector<B> X;",
            "\tvector<vector<array<B, 2>>> Y;",
            "\tvector<vector<T>> data;",
            "\t// O(n * log^2(n))",
            "\tfenwick_tree_2d_sparse_sum(vector<pair<array<B, 2>, T>> init): X(init.size()){",
            "\t\tsort(init.begin(), init.end());",
            "\t\tfor(auto i = 0; i < (int)init.size(); ++ i) X[i] = init[i].first[0];",
            "\t\tsort(X.begin(), X.end());",
            "\t\tX.erase(unique(X.begin(), X.end()), X.end());",
            "\t\tint n = (int)X.size();",
            "\t\tY.resize(n);",
            "\t\tdata.resize(n);",
            "\t\tvector<vector<pair<array<B, 2>, T>>> hold(n);",
            "\t\tfor(auto i = 0, x = 0; i < (int)init.size(); ++ i){",
            "\t\t\tauto [pos, val] = init[i];",
            "\t\t\twhile(X[x] < pos[0]) ++ x;",
            "\t\t\thold[x].push_back({{pos[1], pos[0]}, val});",
            "\t\t}",
            "\t\tfor(auto x = 1; x <= n; ++ x) if(x + (x & -x) <= n){",
            "\t\t\tauto &hold0 = hold[x + (x & -x) - 1];",
            "\t\t\tauto &hold1 = hold[x - 1];",
            "\t\t\tint size = (int)hold0.size();",
            "\t\t\thold0.insert(hold0.end(), hold1.begin(), hold1.end());",
            "\t\t}",
            "\t\tfor(auto x = 0; x < n; ++ x){",
            "\t\t\tauto &Y0 = Y[x];",
            "\t\t\tauto &hold0 = hold[x];",
            "\t\t\tauto &data0 = data[x];",
            "\t\t\tsort(hold0.begin(), hold0.end());",
            "\t\t\tY0.resize(hold0.size());",
            "\t\t\tfor(auto j = 0; j < (int)hold0.size(); ++ j) Y0[j] = hold0[j].first;",
            "\t\t\tY0.erase(unique(Y0.begin(), Y0.end()), Y0.end());",
            "\t\t\tdata0.resize(Y0.size());",
            "\t\t\tfor(auto j = 0, y = 0; j < (int)hold0.size(); ++ j){",
            "\t\t\t\twhile(Y0[y] < hold0[j].first) ++ y;",
            "\t\t\t\tdata0[y] += hold0[j].second;",
            "\t\t\t}",
            "\t\t\tint m = (int)data0.size();",
            "\t\t\tfor(auto y = 1; y <= m; ++ y) if(y + (y & -y) <= m) data0[y + (y & -y) - 1] += data0[y - 1];",
            "\t\t}",
            "\t}",
            "\t// O(log^2(n))",
            "\tvoid update(B _p, B _q, T x){",
            "\t\tint p = lower_bound(X.begin(), X.end(), _p) - X.begin();",
            "\t\tassert(p < (int)X.size() && X[p] == _p);",
            "\t\tfor(auto i = p + 1; i <= (int)X.size(); i += i & -i){",
            "\t\t\tauto &Y0 = Y[i - 1];",
            "\t\t\tauto &data0 = data[i - 1];",
            "\t\t\tint q = lower_bound(Y0.begin(), Y0.end(), array{_q, _p}) - Y0.begin();",
            "\t\t\tassert(q < (int)Y0.size() && Y0[q][0] == _q && Y0[q][1] == _p);",
            "\t\t\tfor(auto j = q + 1; j <= (int)data0.size(); j += j & -j) data0[j - 1] += x;",
            "\t\t}",
            "\t}",
            "\t// O(log^2(n))",
            "\tT prefix(B _xr, B _yr) const{",
            "\t\tint xr = lower_bound(X.begin(), X.end(), _xr) - X.begin();",
            "\t\tT res = 0;",
            "\t\tfor(auto i = xr; i > 0; i -= i & -i){",
            "\t\t\tauto &Y0 = Y[i - 1];",
            "\t\t\tauto &data0 = data[i - 1];",
            "\t\t\tint yr = lower_bound(Y0.begin(), Y0.end(), array{_yr, numeric_limits<B>::min()}) - Y0.begin();",
            "\t\t\tfor(auto j = yr; j > 0; j -= j & -j) res += data0[j - 1];",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\t// O(log^2(n))",
            "\tT query(B _xl, B _xr, B _yl, B _yr) const{",
            "\t\treturn prefix(_xr, _yr) - prefix(_xl, _yr) - prefix(_xr, _yl) + prefix(_xl, _yl);",
            "\t}",
            "\t// O(log^2(n))",
            "\tT query(B _x, B _y) const{",
            "\t\treturn prefix(_x + 1, _y + 1) - prefix(_x + 1, _y) - prefix(_x, _y + 1) + prefix(_x, _y);",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}