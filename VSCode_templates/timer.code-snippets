{
    "tranxuanbach": {
        "prefix": "timer",
        "body": [
            "struct timer{",
            "\tusing T = long double;",
            "\tenum class unit{",
            "\t\ts, ms, us, ns",
            "\t};",
            "\tint multiplier;",
            "\tstring suffix;",
            "\ttimer(int _unit = 0): timer(unit(_unit)){",
            "\t\tassert(0 <= _unit && _unit < 4);",
            "\t}",
            "\ttimer(unit _unit){",
            "\t\tmultiplier = array<int, 4>{1, 1'000, 1'000'000, 1'000'000'000}[(int)_unit];",
            "\t\tsuffix = array<string, 4>{\"s\", \"ms\", \"us\", \"ns\"}[(int)_unit];",
            "\t}",
            "\ttemplate<int iter = 100>",
            "\tT measure(auto f){",
            "\t\tstatic_assert(iter >= 1);",
            "\t\tf(); // Get rid of cold-cache effect",
            "\t\tauto start = chrono::high_resolution_clock::now();",
            "\t\tfor(auto i = 0; i < iter; ++ i) f();",
            "\t\tauto end = chrono::high_resolution_clock::now();",
            "\t\treturn chrono::duration<T>(end - start).count() * multiplier / iter;",
            "\t}",
            "\tchrono::time_point<chrono::high_resolution_clock> init = chrono::high_resolution_clock::now(), current = chrono::high_resolution_clock::now();",
            "\tvoid refresh(){",
            "\t\tcurrent = chrono::high_resolution_clock::now();",
            "\t}",
            "\t// Measures time from last measure() call(construction if no such call)",
            "\tT measure(){",
            "\t\tT x = chrono::duration<T>(chrono::high_resolution_clock::now() - current).count() * multiplier;",
            "\t\treturn x;",
            "\t}",
            "\t// Measures time from the construction",
            "\tT measure_from_start(){",
            "\t\treturn chrono::duration<T>(chrono::high_resolution_clock::now() - init).count() * multiplier;;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}