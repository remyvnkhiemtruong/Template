{
    "tranxuanbach": {
        "prefix": "rigidity_matroid",
        "body": [
            "// Implementation of \"An Algorithm for Two-Dimensional Rigidity Percolation: The Pebble Game\" by Donald J. Jacobs and Bruce Hendrickson",
            "struct rigidity_matroid{",
            "\tvector<array<int, 2>> edge, pebble, pebble_from;",
            "\trigidity_matroid(int n, const vector<array<int, 2>> &edge): edge(edge), pebble(n, {-1, -1}), pebble_from((int)edge.size(), {-1, -1}), q(n), was(n), prev(n){ }",
            "\tint it = 0;",
            "\tvector<array<int, 2>> q;",
            "\tvector<int> was, prev;",
            "\tbool push(int u, int t){",
            "\t\tif(!~pebble[u][t]) return true;",
            "\t\t++ it;",
            "\t\tprev[u] = -1;",
            "\t\tint id = pebble[u][t];",
            "\t\twas[u] = was[u ^ edge[id][0] ^ edge[id][1]] = it;",
            "\t\tq[0] = {u, t};",
            "\t\tfor(auto beg = 0, end = 1; beg < end; ++ beg){",
            "\t\t\tauto [u, t] = q[beg];",
            "\t\t\tint id = pebble[u][t];",
            "\t\t\tint v = u ^ edge[id][0] ^ edge[id][1];",
            "\t\t\tprev[v] = id;",
            "\t\t\twas[v] = it;",
            "\t\t\tfor(auto tt = 0; tt < 2; ++ tt){",
            "\t\t\t\tif(!~pebble[v][tt]){",
            "\t\t\t\t\tfor(auto u = v, t = tt; ~prev[u]; ){",
            "\t\t\t\t\t\tint id = prev[u];",
            "\t\t\t\t\t\tauto [v, tt] = pebble_from[id];",
            "\t\t\t\t\t\tpebble[u][t] = id;",
            "\t\t\t\t\t\tpebble_from[id] = {u, t};",
            "\t\t\t\t\t\tu = v, t = tt;",
            "\t\t\t\t\t}",
            "\t\t\t\t\treturn true;",
            "\t\t\t\t}",
            "\t\t\t\tid = pebble[v][tt];",
            "\t\t\t\tint w = v ^ edge[id][0] ^ edge[id][1];",
            "\t\t\t\tif(was[w] == it) continue;",
            "\t\t\t\twas[w] = it;",
            "\t\t\t\tq[end ++] = {v, tt};",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn false;",
            "\t}",
            "\t// O(n)",
            "\tbool check(int i){",
            "\t\tif(edge[i][0] == edge[i][1]) return false;",
            "\t\tfor(auto s = 0; s < 2; ++ s){",
            "\t\t\tint u = edge[i][s];",
            "\t\t\tfor(auto t = 0; t < 2; ++ t) if(!push(u, t)) return false;",
            "\t\t}",
            "\t\treturn true;",
            "\t}",
            "\t// O(n)",
            "\tvoid insert(int i){",
            "\t\tint u = edge[i][0];",
            "\t\tassert(push(u, 0));",
            "\t\tpebble[u][0] = i;",
            "\t\tpebble_from[i] = {u, 0};",
            "\t}",
            "\tvoid clear(){",
            "\t\tfill(pebble.begin(), pebble.end(), array{-1, -1});",
            "\t\tfill(pebble_from.begin(), pebble_from.end(), array{-1, -1});",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}