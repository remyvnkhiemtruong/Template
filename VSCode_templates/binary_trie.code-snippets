{
    "tranxuanbach": {
        "prefix": "binary_trie",
        "body": [
            "template<class T, int mx = 30>",
            "struct binary_trie{",
            "\tint n = 0;",
            "\tvector<array<int, 3>> next{{0, 0, 0}}; // leftchild, rightchild, count",
            "\tbinary_trie(){ }",
            "\tbinary_trie(const vector<T> &a){",
            "\t\tfor(auto x: a) insert(x);",
            "\t}",
            "\tvoid insert(T x){",
            "\t\t++ n;",
            "\t\tfor(int bit = mx - 1, u = 0; bit >= 0; -- bit){",
            "\t\t\tif(!next[u][x >> bit & 1]){",
            "\t\t\t\tnext[u][x >> bit & 1] = (int)next.size();",
            "\t\t\t\tnext.push_back({0, 0, 0});",
            "\t\t\t}",
            "\t\t\tu = next[u][x >> bit & 1];",
            "\t\t\t++ next[u][2];",
            "\t\t}",
            "\t}",
            "\tvoid erase(T x){",
            "\t\t-- n;",
            "\t\tfor(int bit = mx - 1, u = 0; bit >= 0; -- bit){",
            "\t\t\tassert(next[u][x >> bit & 1]);",
            "\t\t\tu = next[u][x >> bit & 1];",
            "\t\t\tassert(next[u][2]);",
            "\t\t\t-- next[u][2];",
            "\t\t}",
            "\t}",
            "\tT max_xor(T x){",
            "\t\tif(!n){",
            "\t\t\treturn numeric_limits<T>::min();",
            "\t\t}",
            "\t\tT res = 0;",
            "\t\tfor(int bit = mx - 1, u = 0; bit >= 0; -- bit){",
            "\t\t\tif(!next[u][~x >> bit & 1] || !next[next[u][~x >> bit & 1]][2]) u = next[u][x >> bit & 1];",
            "\t\t\telse{",
            "\t\t\t\tres |= T(1) << bit;",
            "\t\t\t\tu = next[u][~x >> bit & 1];",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\tT min_xor(T x){",
            "\t\tif(!n){",
            "\t\t\treturn numeric_limits<T>::max();",
            "\t\t}",
            "\t\tT res = 0;",
            "\t\tfor(int bit = mx - 1, u = 0; bit >= 0; -- bit){",
            "\t\t\tif(!next[u][x >> bit & 1] || !next[next[u][x >> bit & 1]][2]){",
            "\t\t\t\tres |= T(1) << bit;",
            "\t\t\t\tu = next[u][~x >> bit & 1];",
            "\t\t\t}",
            "\t\t\telse u = next[u][x >> bit & 1];",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}