{
    "tranxuanbach": {
        "prefix": "pollard_rho",
        "body": [
            "// Correctness proved in https://github.com/kth-competitive-programming/kactl/blob/master/doc/modmul-proof.pdf",
            "// twice faster than (__int128_t)a * b % M",
            "using ull = unsigned long long;",
            "ull mod_mul(ull a, ull b, ull M){",
            "\tlong long res = a * b - M * ull(1.L / M * a * b);",
            "\treturn res + M * (res < 0) - M * (res >= (long long)M);",
            "}",
            "ull mod_pow(ull b, ull e, ull mod){",
            "\tull res = 1;",
            "\tfor(; e; b = mod_mul(b, b, mod), e >>= 1) if(e & 1) res = mod_mul(res, b, mod);",
            "\treturn res;",
            "}",
            "// Millar Rabin Primality Test",
            "// 7 times slower than a^b mod c",
            "bool isprime(ull n){",
            "\tif(n < 2 || n % 6 % 4 != 1) return (n | 1) == 3;",
            "\tull s = __builtin_ctzll(n - 1), d = n >> s;",
            "\tfor(ull a: {2, 325, 9375, 28178, 450775, 9780504, 1795265022}){",
            "\t\tull p = mod_pow(a, d, n), i = s;",
            "\t\twhile(p != 1 && p != n - 1 && a % n && i --) p = mod_mul(p, p, n);",
            "\t\tif(p != n - 1 && i != s) return false;",
            "\t}",
            "\treturn true;",
            "}",
            "// Pollard rho algorithm",
            "// O(n^1/4)",
            "ull get_factor(ull n){",
            "\tauto f = [n](ull x){ return mod_mul(x, x, n) + 1; };",
            "\tull x = 0, y = 0, t = 30, prd = 2, i = 1, q;",
            "\twhile(t ++ % 40 || gcd(prd, n) == 1){",
            "\t\tif(x == y) x = ++ i, y = f(x);",
            "\t\tif(q = mod_mul(prd, max(x, y) - min(x, y), n)) prd = q;",
            "\t\tx = f(x), y = f(f(y));",
            "\t}",
            "\treturn gcd(prd, n);",
            "}",
            "// Returns the prime factors in arbitrary order",
            "vector<ull> factorize(ull n){",
            "\tif(n == 1) return {};",
            "\tif(isprime(n)) return {n};",
            "\tull x = get_factor(n);",
            "\tauto l = factorize(x), r = factorize(n / x);",
            "\tl.insert(l.end(), r.begin(), r.end());",
            "\treturn l;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}