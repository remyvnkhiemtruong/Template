{
    "tranxuanbach": {
        "prefix": "longest_common_subsequence_lengths",
        "body": [
            "// source: http://www.secmem.org/blog/2019/09/12/lcs-with-bitset/",
            "// bitset optimization of LCS dp",
            "// res[i]: length of the LCS of s[0:i) and t",
            "// O(n m / w) time",
            "// O(n + m * Lim / w) space",
            "template<class Char_Type, int Lim>",
            "vector<int> longest_common_subsequence_lengths(const vector<Char_Type> &s, const vector<Char_Type> &t){",
            "\tif(s.empty()) return {0};",
            "\tint n = (int)s.size(), m = (int)t.size(), sz = (m >> 6) + 1;",
            "\tusing mask_type = unsigned long long;",
            "\tarray<vector<mask_type>, Lim> masks;",
            "\tmasks.fill(vector<mask_type>(sz));",
            "\tfor(auto j = 0; j < m; ++ j) masks[t[j]][j >> 6] |= 1ull << (j & 63);",
            "\tvector<mask_type> dp(sz);",
            "\tvector<int> res(n + 1);",
            "\tfor(auto j = 0; j < m; ++ j) if(s[0] == t[j]){",
            "\t\tdp[j >> 6] |= 1ull << (j & 63);",
            "\t\tres[1] = 1;",
            "\t\tbreak;",
            "\t}",
            "\tfor(auto i = 1; i < n; ++ i){",
            "\t\tauto &mask = masks[s[i]];",
            "\t\tmask_type shl_carry = 1, minus_carry = 0;",
            "\t\tfor(auto k = 0; k < sz; k++){",
            "\t\t\tmask_type x_k = mask[k] | dp[k];",
            "\t\t\tmask_type term_1 = dp[k] << 1 | shl_carry;",
            "\t\t\tshl_carry = dp[k] >> 63;",
            "\t\t\tauto sub_carry = [](mask_type &x, mask_type y){",
            "\t\t\t\tmask_type tmp = x;",
            "\t\t\t\treturn (x = tmp - y) > tmp;",
            "\t\t\t};",
            "\t\t\tmask_type term_2 = x_k;",
            "\t\t\tminus_carry = sub_carry(term_2, minus_carry);",
            "\t\t\tminus_carry += sub_carry(term_2, term_1);",
            "\t\t\tdp[k] = x_k & (x_k ^ term_2);",
            "\t\t}",
            "\t\tdp[m >> 6] &= (1llu << (m & 63)) - 1;",
            "\t\tres[i + 1] = accumulate(dp.begin(), dp.end(), 0, [&](int sum, auto y){ return sum + __builtin_popcountll(y); });",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}