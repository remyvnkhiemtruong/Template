{
    "tranxuanbach": {
        "prefix": "segment_tree_2d",
        "body": [
            "template<class T, class F>",
            "struct segment_tree_2d{",
            "\tint n, m;",
            "\tvector<vector<T>> data;",
            "\tF TT; // commutative monoid operation",
            "\tT T_id; // commutative monoid identity",
            "\t// O(n * m)",
            "\tsegment_tree_2d(int n, int m, F TT, T T_id): n(n), m(m), TT(TT), T_id(T_id), data(n << 1, vector<T>(m << 1, T_id)){ }",
            "\t// O(n * m)",
            "\tsegment_tree_2d(int n, int m, T x, F TT, T T_id): segment_tree_2d(vector<vector<T>>(n, vector<T>(m, x)), TT, T_id){ }",
            "\t// O(n * m)",
            "\tsegment_tree_2d(const vector<vector<T>> &a, F TT, T T_id): n((int)a.size()), m((int)a[0].size()), TT(TT), T_id(T_id), data(n << 1, vector<T>(m << 1, T_id)){",
            "\t\tfor(auto i = 0; i < n; ++ i) for(auto j = 0; j < m; ++ j) data[i + n][j + m] = a[i][j];",
            "\t\tfor(auto i = n - 1; i >= 1; -- i) for(auto j = 0; j < m; ++ j) data[i][j + m] = TT(data[i << 1][j + m], data[i << 1 | 1][j + m]);",
            "\t\tfor(auto i = 1; i < n << 1; ++ i) for(auto j = m - 1; j >= 1; -- j) data[i][j] = TT(data[i][j << 1], data[i][j << 1 | 1]);",
            "\t}",
            "\t// a[p][q] := x",
            "\t// O(log(n) * log(m))",
            "\tvoid set(int p, int q, T x){",
            "\t\tdata[p += n][q += m] = x;",
            "\t\tfor(auto j = q; j >>= 1; ) data[p][j] = TT(data[p][j << 1], data[p][j << 1 | 1]);",
            "\t\tfor(auto i = p; i >>= 1; ){",
            "\t\t\tdata[i][q] = TT(data[i << 1][q], data[i << 1 | 1][q]);",
            "\t\t\tfor(auto j = q; j >>= 1; ) data[i][j] = TT(data[i][j << 1], data[i][j << 1 | 1]);",
            "\t\t}",
            "\t}",
            "\t// Returns a[p][q]",
            "\t// O(1)",
            "\tT query(int p, int q){",
            "\t\treturn data[p + n][q + m];",
            "\t}",
            "\t// Returns the sum of a[i][j] on [xl, xr) X [yl, yr)",
            "\t// O(log n * log m)",
            "\tT query(int xl, int xr, int yl, int yr){",
            "\t\tif(xl >= xr || yl >= yr) return T_id;",
            "\t\tT res = T_id;",
            "\t\txl += n, xr += n, yl += m, yr += m;",
            "\t\tfor(auto il = xl, ir = xr; il < ir; il >>= 1, ir >>= 1){",
            "\t\t\tif(il & 1){",
            "\t\t\t\tfor(auto jl = yl, jr = yr; jl < jr; jl >>= 1, jr >>= 1){",
            "\t\t\t\t\tif(jl & 1) res = TT(res, data[il][jl ++]);",
            "\t\t\t\t\tif(jr & 1) res = TT(res, data[il][-- jr]);",
            "\t\t\t\t}",
            "\t\t\t\t++ il;",
            "\t\t\t}",
            "\t\t\tif(ir & 1){",
            "\t\t\t\t-- ir;",
            "\t\t\t\tfor(auto jl = yl, jr = yr; jl < jr; jl >>= 1, jr >>= 1){",
            "\t\t\t\t\tif(jl & 1) res = TT(res, data[ir][jl ++]);",
            "\t\t\t\t\tif(jr & 1) res = TT(res, data[ir][-- jr]);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\ttemplate<class output_stream>",
            "\tfriend output_stream &operator<<(output_stream &out, const segment_tree_2d<T, F> &seg){",
            "\t\tfor(auto i = 0; i < seg.n; ++ i){",
            "\t\t\tout << \"\\n[\";",
            "\t\t\tfor(auto j = 0; j < seg.m; ++ j){",
            "\t\t\t\tout << seg.query(i, j);",
            "\t\t\t\tif(j != seg.m - 1) out << \", \";",
            "\t\t\t}",
            "\t\t\tout << \"]\\n\";",
            "\t\t}",
            "\t\treturn out;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}