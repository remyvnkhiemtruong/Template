{
    "tranxuanbach": {
        "prefix": "recover_two_sat",
        "body": [
            "// Source: \"THE COMPLEXITY OF SATISFIABILITY PROBLEMS\" by Thomas J. Schaefer.",
            "// Given a set S of distinct binarty strings, return a 2-SAT formula S with it's solution set equal to S.",
            "// Variable for literal x is floor(x/2) and is positive iff x%2=1.",
            "// O(n * m^2 / w)",
            "template<size_t S>",
            "optional<vector<array<int, 2>>> recover_two_sat(int n, int m, vector<string> a){",
            "\tassert(0 <= min(n, m) && n == (int)a.size() && S >= m << 1);",
            "\tfor(auto s: a){",
            "\t\tassert(m == (int)s.size());",
            "\t\tassert(!m || *min_element(s.begin(), s.end()) >= '0' && *max_element(s.begin(), s.end()) <= '1');",
            "\t}",
            "\tunordered_set<bitset<S>> pool;",
            "\tvector<bitset<S>> s(n);",
            "\tbitset<S> consistent;",
            "\tfor(auto i = 0; i < n; ++ i){",
            "\t\tfor(auto j = 0; j < m; ++ j) s[i].set(j << 1 | a[i][j] - '0');",
            "\t\tassert(pool.insert(s[i]).second);",
            "\t\tconsistent |= s[i];",
            "\t}",
            "\tvector<bitset<S>> implies(m << 1);",
            "\tfor(auto j = 0; j < m << 1; ++ j){",
            "\t\timplies[j].set();",
            "\t\tfor(auto i = 0; i < n; ++ i) if(s[i][j]) implies[j] &= s[i];",
            "\t}",
            "\tarray<bitset<S>, 2> vmask;",
            "\tfor(auto j = 0; j < m << 1; ++ j) vmask[j & 1].set(j);",
            "\tfor(auto j = 0; j < m << 1; ++ j) if(consistent[j]) for(auto i = 0; i < n; ++ i){",
            "\t\tauto alter = (s[i] ^ implies[j]) & implies[j];",
            "\t\tauto even = alter & vmask[0], odd = alter & vmask[1];",
            "\t\tif(!pool.count(s[i] ^ (even | even << 1 | odd | odd >> 1))) return {};",
            "\t}",
            "\tvector<array<int, 2>> res;",
            "\tfor(auto j = 0; j < m << 1; ++ j) for(auto k = j; k < m << 1; ++ k) if(j ^ k ^ 1 && implies[j ^ 1][k]) res.push_back({j, k});",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}