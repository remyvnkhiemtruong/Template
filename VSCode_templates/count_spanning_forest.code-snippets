{
    "tranxuanbach": {
        "prefix": "count_spanning_forest",
        "body": [
            "template<class T, class U>",
            "T count_spanning_forest(const graph<U> &g){",
            "\tint n = g.n;",
            "\tvector<int> vis(n);",
            "\tT res = 1;",
            "\tfor(auto u = 0; u < n; ++ u){",
            "\t\tif(vis[u]) continue;",
            "\t\tvector<int> comp;",
            "\t\tauto dfs = [&](auto self, int u)->void{",
            "\t\t\tvis[u] = true;",
            "\t\t\tcomp.push_back(u);",
            "\t\t\tfor(auto id: g.adj[u]){",
            "\t\t\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\t\t\tint v = g(u, id);",
            "\t\t\t\tif(!vis[v]) self(self, v);",
            "\t\t\t}",
            "\t\t};",
            "\t\tdfs(dfs, u);",
            "\t\tsort(comp.begin(), comp.end());",
            "\t\tvector<vector<T>> mat((int)comp.size() - 1, vector<T>((int)comp.size() - 1));",
            "\t\tfor(auto i = 0; i < (int)comp.size(); ++ i){",
            "\t\t\tint u = comp[i];",
            "\t\t\tfor(auto id: g.adj[u]){",
            "\t\t\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\t\t\tint v = g(u, id);",
            "\t\t\t\tif(u < v){",
            "\t\t\t\t\tint j = lower_bound(comp.begin(), comp.end(), v) - comp.begin();",
            "\t\t\t\t\t++ mat[i][i];",
            "\t\t\t\t\tif(j < (int)comp.size() - 1){",
            "\t\t\t\t\t\t++ mat[j][j];",
            "\t\t\t\t\t\tmat[i][j] -= g.edge[id].cost;",
            "\t\t\t\t\t\tmat[j][i] -= g.edge[id].cost;",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t\tres *= determinant_integral(mat);",
            "\t}",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}