{
    "tranxuanbach": {
        "prefix": "convex_polygon_locate",
        "body": [
            "// Source: https://github.com/koosaga/DeobureoMinkyuParty/blob/master/teamnote.pdf",
            "// Returns -1 if p lies strictly within the convex polygon",
            "// Otherwise, split the plane like below, and return the corresponding vertex it contains",
            "/*",
            "     x",
            "     x",
            "     xxxxxxxxxxxxxx",
            "     x       x",
            "     x       x",
            "     x       x",
            "xxxxxxxxxxxxxx",
            "             x",
            "             x",
            "*/",
            "// In other words, draw a tangent line from p clockwise, and return the cloest tangent point",
            "// Set orientation = -1 to reverse the orientation",
            "// Requires point and convex_polygon",
            "// O(log(n))",
            "template<class T>",
            "int convex_polygon_locate(const convex_polygon<T> &c, const point<T> &p, int orientation = 1){",
            "\tassert(!c.empty() && abs(orientation) == 1);",
            "#define PREV(i) i ? i - 1 : (int)c.size() - 1",
            "#define NEXT(i) i < (int)c.size() - 1 ? i + 1 : 0",
            "\tif((int)c.size() == 1) return 0;",
            "\tauto eval = [&](int i, int j)->T{",
            "\t\treturn (c[i] - p ^ c[j] - p) * orientation;",
            "\t};",
            "\tauto belong = [&](int i, int j, int k){",
            "\t\treturn eval(i, j) <= 0 && eval(j, k) >= 0;",
            "\t};",
            "\tint l = 0, r = (int)c.size(), res = -1;",
            "\tif(belong((int)c.size() - 1, 0, 1)){",
            "\t\tres = 0;",
            "\t\tgoto _FOUND_FLAG;",
            "\t}",
            "\twhile(r - l >= 2){",
            "\t\tint m = l + (r - l >> 1);",
            "\t\tif(belong(m - 1, m, NEXT(m))){",
            "\t\t\tres = m;",
            "\t\t\tgoto _FOUND_FLAG;",
            "\t\t}",
            "\t\tif(eval(l, NEXT(l)) < 0){ // up",
            "\t\t\tif(eval(m, NEXT(m)) > 0) r = m;",
            "\t\t\telse if(eval(m, l) > 0) l = m;",
            "\t\t\telse r = m;",
            "\t\t}",
            "\t\telse{ // down",
            "\t\t\tif(eval(m, NEXT(m)) < 0) l = m;",
            "\t\t\telse if(eval(m, l) < 0) l = m;",
            "\t\t\telse r = m;",
            "\t\t}",
            "\t}",
            "\tif(l && belong(PREV(l), l, NEXT(l))) res = l;",
            "\telse if(r != (int)c.size() && belong(PREV(r), r, NEXT(r))) res = r;",
            "\t_FOUND_FLAG:;",
            "\tif(~res){",
            "\t\tint i = (res + (int)c.size() - orientation) % (int)c.size();",
            "\t\tif(belong(PREV(i), i, NEXT(i))) res = i;",
            "\t}",
            "#undef PREV",
            "#undef NEXT",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}