{
    "tranxuanbach": {
        "prefix": "recognize_chordal_graphs",
        "body": [
            "// Returns {true, perfect elimination ordering} or {false, induced cycle of length >= 4}",
            "// O(n + m)",
            "// Requires graph and lexicographical_bfs_forest",
            "template<class T>",
            "optional<vector<int>> recognize_chordal_graphs(const graph<T> &g){",
            "\tint n = g.n;",
            "\tvector<vector<int>> adj(n);",
            "\tfor(auto u = 0; u < n; ++ u) for(auto id: g.adj[u]) if(!g.ignore || !g.ignore(id)) adj[g(u, id)].push_back(u);",
            "\tlexicographical_bfs_forest lbf(n);",
            "\tlbf.bfs(g);",
            "\tfor(auto u = 0; u < n; ++ u){",
            "\t\tif(!~lbf.latest[u]) continue;",
            "\t\tint v = lbf.latest[u];",
            "\t\tfor(auto w: adj[u]){",
            "\t\t\tif(v != w && lbf.pos[w] < lbf.pos[u] && !binary_search(adj[v].begin(), adj[v].end(), w)){",
            "\t\t\t\tvector<int> vis(n), par(n, -1);",
            "\t\t\t\tvis[w] = true;",
            "\t\t\t\tdeque<int> dq{w};",
            "\t\t\t\twhile(!dq.empty()){",
            "\t\t\t\t\tint x = dq.front(); dq.pop_front();",
            "\t\t\t\t\tfor(auto y: adj[x]){",
            "\t\t\t\t\t\tif(vis[y] || y == u || y != v && binary_search(adj[u].begin(), adj[u].end(), y)) continue;",
            "\t\t\t\t\t\tvis[y] = true;",
            "\t\t\t\t\t\tdq.push_back(y);",
            "\t\t\t\t\t\tpar[y] = x;",
            "\t\t\t\t\t}",
            "\t\t\t\t}",
            "\t\t\t\tvector<int> cycle{w, u};",
            "\t\t\t\tfor(auto x = v; x != w; x = par[x]) cycle.push_back(x);",
            "\t\t\t\treturn {};",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tauto order = lbf.order;",
            "\treverse(order.begin(), order.end());",
            "\treturn order;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}