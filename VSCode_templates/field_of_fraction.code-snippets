{
    "tranxuanbach": {
        "prefix": "field_of_fraction",
        "body": [
            "template<class T, bool Force_Reduction = false>",
            "struct field_of_fraction{",
            "\tT n, d;",
            "\tfield_of_fraction(T n = 0, T d = 1): n(n), d(d){",
            "\t\tif(d < 0) this->n = -n, this->d = -d;",
            "\t}",
            "\tfriend ostream &operator<<(ostream &out, const field_of_fraction &x){",
            "\t\treturn out << x.n << \"/\" << x.d;",
            "\t}",
            "\tfriend istream &operator>>(istream &in, field_of_fraction &x){",
            "\t\tin >> x.n, x.d = 1;",
            "\t\treturn in;",
            "\t}",
            "\tfield_of_fraction &reduce(){",
            "\t\tT g = gcd(n, d);",
            "\t\tn /= g, d /= g;",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction reduced() const{",
            "\t\treturn field_of_fraction(*this).reduce();",
            "\t}",
            "\tfield_of_fraction &operator+=(const field_of_fraction &x){",
            "\t\t*this = {n * x.d + x.n * d, d * x.d};",
            "\t\tif constexpr(Force_Reduction) this->reduce();",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction &operator+=(const T &x){",
            "\t\t*this = {n + d * x, d};",
            "\t\tif constexpr(Force_Reduction) this->reduce();",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction &operator-=(const field_of_fraction &x){",
            "\t\t*this = {n * x.d - x.n * d, d * x.d};",
            "\t\tif constexpr(Force_Reduction) this->reduce();",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction &operator-=(const T &x){",
            "\t\t*this = {n - d * x, d};",
            "\t\tif constexpr(Force_Reduction) this->reduce();",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction &operator*=(const field_of_fraction &x){",
            "\t\t*this = {n * x.n, d * x.d};",
            "\t\tif constexpr(Force_Reduction) this->reduce();",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction &operator*=(const T &x){",
            "\t\t*this = {n * x, d};",
            "\t\tif constexpr(Force_Reduction) this->reduce();",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction &operator/=(const field_of_fraction &x){",
            "\t\tassert(x.n != T(0));",
            "\t\t*this = {n * x.d, d * x.n};",
            "\t\tif constexpr(Force_Reduction) this->reduce();",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction &operator/=(const T &x){",
            "\t\tassert(x != T(0));",
            "\t\t*this = {n, d * x};",
            "\t\tif constexpr(Force_Reduction) this->reduce();",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction operator+(const field_of_fraction &x) const{",
            "\t\treturn field_of_fraction(*this) += x;",
            "\t}",
            "\tfield_of_fraction operator+(const T &x) const{",
            "\t\treturn field_of_fraction(*this) += x;",
            "\t}",
            "\tfriend field_of_fraction operator+(const T &x, const field_of_fraction &f){",
            "\t\treturn field_of_fraction(f) += x;",
            "\t}",
            "\tfield_of_fraction operator+() const{",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction operator-(const field_of_fraction &x) const{",
            "\t\treturn field_of_fraction(*this) -= x;",
            "\t}",
            "\tfield_of_fraction operator-(const T &x) const{",
            "\t\treturn field_of_fraction(*this) -= x;",
            "\t}",
            "\tfriend field_of_fraction operator-(const T &x, const field_of_fraction &f){",
            "\t\tfield_of_fraction g = {x * f.d - f.n, f.d};",
            "\t\tif constexpr(Force_Reduction) g.reduce();",
            "\t\treturn g;",
            "\t}",
            "\tfield_of_fraction operator-() const{",
            "\t\treturn {-n, d};",
            "\t}",
            "\tfield_of_fraction operator*(const field_of_fraction &x) const{",
            "\t\treturn field_of_fraction(*this) *= x;",
            "\t}",
            "\tfield_of_fraction operator*(const T &x) const{",
            "\t\treturn field_of_fraction(*this) *= x;",
            "\t}",
            "\tfriend field_of_fraction operator*(const T &x, const field_of_fraction &f){",
            "\t\treturn field_of_fraction(f) *= x;",
            "\t}",
            "\tfield_of_fraction operator/(const field_of_fraction &x) const{",
            "\t\treturn field_of_fraction(*this) /= x;",
            "\t}",
            "\tfield_of_fraction operator/(const T &x) const{",
            "\t\treturn field_of_fraction(*this) /= x;",
            "\t}",
            "\tfriend field_of_fraction operator/(const T &x, const field_of_fraction &f){",
            "\t\tauto g = field_of_fraction(x * f.d, f.n);",
            "\t\tif constexpr(Force_Reduction) g.reduce();",
            "\t\treturn g;",
            "\t}",
            "\tfield_of_fraction &operator++(){",
            "\t\tn += d;",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction operator++(int){",
            "\t\tauto res = *this;",
            "\t\tn += d;",
            "\t\treturn res;",
            "\t}",
            "\tfield_of_fraction &operator--(){",
            "\t\tn -= d;",
            "\t\treturn *this;",
            "\t}",
            "\tfield_of_fraction operator--(int){",
            "\t\tauto res = *this;",
            "\t\tn -= d;",
            "\t\treturn res;",
            "\t}",
            "#define OP(c)\\",
            "bool operator c(const field_of_fraction &x) const{\\",
            "\treturn n * x.d c x.n * d;\\",
            "}",
            "OP(==) OP(!=) OP(<) OP(<=) OP(>) OP(>=)",
            "#undef OP",
            "#define OP(c)\\",
            "bool operator c(const T &x) const{\\",
            "\treturn n c d * x;\\",
            "}",
            "OP(==) OP(!=) OP(<) OP(<=) OP(>) OP(>=)",
            "#undef OP",
            "#define OP(c)\\",
            "friend bool operator c(const T &x, const field_of_fraction &f){\\",
            "\treturn f.d * x c f.n;\\",
            "}",
            "OP(==) OP(!=) OP(<) OP(<=) OP(>) OP(>=)",
            "#undef OP",
            "\texplicit operator double() const{",
            "\t\treturn 1.0 * n / d;",
            "\t}",
            "\texplicit operator long double() const{",
            "\t\treturn 1.0l * n / d;",
            "\t}",
            "\tfriend double sqrt(const field_of_fraction &f){",
            "\t\treturn sqrt((double)f);",
            "\t}",
            "\tfriend long double sqrtl(const field_of_fraction &f){",
            "\t\treturn sqrtl((long double)f);",
            "\t}",
            "\tfriend field_of_fraction abs(const field_of_fraction &f){",
            "\t\treturn f < 0 ? -f : f;",
            "\t}",
            "};",
            "namespace std{",
            "\ttemplate<class T> struct numeric_limits<field_of_fraction<T>>{",
            "\t\tstatic field_of_fraction<T> min(){ return {-1, 0}; };",
            "\t\tstatic field_of_fraction<T> max(){ return {1, 0}; };",
            "\t};",
            "}"
        ],
        "description": "tranxuanbach"
    }
}