{
    "tranxuanbach": {
        "prefix": "spanning_tree_polytope_separation_oracle",
        "body": [
            "// given an undirected graph G=(V,E), a weight function w: E -> R, and a constant c,",
            "// determine whether the weight function satisfies the following constraints (LP-span)",
            "// 1. w(e) >= 0 for all edges e in E",
            "// 2. w(E) = c(|V|-1)",
            "// 3. w(E(S)) <= c(|S|-1) for all non-empty subset S of V",
            "// calculates min cut at most 2|V|-2 times",
            "// Source: https://webdocs.cs.ualberta.ca/~zacharyf/courses/approx_2014/notes/nov17-675.pdf",
            "// Requires graph and dinic_maximum_flow",
            "template<class T>",
            "bool spanning_tree_polytope_separation_oracle(const graph<T> &g, T c = 1){",
            "\tint n = g.n;",
            "\tT tot = 0;",
            "\tflow_network<T> F(n);",
            "\tvector<T> delta(n);",
            "\tfor(auto id = 0; id < (int)g.edge.size(); ++ id){",
            "\t\tif(g.ignore && g.ignore(id)) continue;",
            "\t\tauto &e = g.edge[id];",
            "\t\tif(e.cost < 0) return false;",
            "\t\tF.link(e.from, e.to, e.cost);",
            "\t\tdelta[e.from] += e.cost, delta[e.to] += e.cost, tot += e.cost;",
            "\t}",
            "\tif(c * (n - 1) != tot) return false;",
            "\tint m = (int)F.edge.size();",
            "\tvector<int> sz(n);",
            "\tfor(auto u = 0; u < n; ++ u) sz[u] = (int)F.adj[u].size();",
            "\tfor(auto t = 1; t < n; ++ t){",
            "\t\tint s = 0;",
            "\t\tfor(auto rep = 0; rep < 2; ++ rep){",
            "\t\t\tF.edge.resize(m);",
            "\t\t\tfor(auto u = 0; u < n; ++ u) F.adj[u].resize(sz[u]);",
            "\t\t\tF.clear_flow();",
            "\t\t\tfor(auto u = 0; u < n; ++ u) F.orient(s, u, delta[u]), F.orient(u, t, 2 * c);",
            "\t\t\tif(dinic_maximum_flow<T>(F).maximum_flow(s, t) < 2 * n * c) return false;",
            "\t\t\tswap(s, t);",
            "\t\t}",
            "\t}",
            "\treturn true;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}