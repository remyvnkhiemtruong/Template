{
    "tranxuanbach": {
        "prefix": "cut_join_tree",
        "body": [
            "// Given an array of distinct integers,",
            "// a subarray S is said to be consecutive if max(S) - min(S) = len(S), and",
            "// a consecutive subarray S is said to be primitive if for any other consecutive subarray T, either S and T are disjoint or one contains the other",
            "// A consecutive subarray can be partitioned uniquely into maximum primitive consecutive subarrays.",
            "// There are O(n) primitive consecutive subarrays.",
            "// They form a forest of arboresence according to inclusion relation",
            "// Cut: Childs of the node are not sorted in either order. Here, any consecutive interval of childs of length >= 2 is not a consecutive subarray.",
            "// Join: Childs of the node are sorted in either order. Here, any consecutive interval of childs form a consecutive subarray",
            "template<class T>",
            "struct cut_join_tree{",
            "\tstatic_assert(is_integral_v<T>);",
            "\tint _size, _log;",
            "\tvector<pair<T, int>> _min_stack;",
            "\tvector<pair<T, int>> _max_stack;",
            "\tint _new_node(int t, array<int, 2> ind, array<T, 2> val){",
            "\t\tint u = (int)type.size();",
            "\t\ttype.push_back(t);",
            "\t\tindex_range.push_back(ind);",
            "\t\tvalue_range.push_back(val);",
            "\t\tadj.emplace_back();",
            "\t\treturn u;",
            "\t}",
            "\tvector<array<T, 2>> _seg;",
            "\tarray<T, 2> _TT(const array<T, 2> &x, const array<T, 2> &y) const{",
            "\t\treturn {min(x[0], x[1] + y[0]), x[1] + y[1]};",
            "\t}",
            "\tvoid _update(int p, T x){",
            "\t\tif(p >= capacity) return;",
            "\t\tp += _size;",
            "\t\t_seg[p] = {_seg[p][0] + x, _seg[p][1] + x};",
            "\t\tfor(auto i = 1; i <= _log; ++ i) _seg[p >> i] = _TT(_seg[(p >> i) << 1], _seg[(p >> i) << 1 | 1]);",
            "\t}",
            "\tT _query(int ql, int qr) const{",
            "\t\tarray<T, 2> res_l{numeric_limits<T>::max() / 2, 0};",
            "\t\tarray<T, 2> res_r{numeric_limits<T>::max() / 2, 0};",
            "\t\tfor(ql += _size, qr += _size; ql < qr; ql >>= 1, qr >>= 1){",
            "\t\t\tif(ql & 1) res_l = _TT(res_l, _seg[ql ++]);",
            "\t\t\tif(qr & 1) res_r = _TT(_seg[-- qr], res_r);",
            "\t\t}",
            "\t\treturn min(res_l[0], res_l[1] + res_r[0]);",
            "\t}",
            "\tT _sum(int ql, int qr) const{",
            "\t\tT res = 0;",
            "\t\tfor(ql += _size, qr += _size; ql < qr; ql >>= 1, qr >>= 1){",
            "\t\t\tif(ql & 1) res += _seg[ql ++][1];",
            "\t\t\tif(qr & 1) res += _seg[-- qr][1];",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\tint _locate(const T &x) const{",
            "\t\tint qr = (int)root.size() + _size;",
            "\t\tarray<T, 2> suff = {numeric_limits<T>::max() / 2, 0};",
            "\t\tT tot_sum = _sum(0, (int)root.size());",
            "\t\tconst auto pred = [&](const array<T, 2> &suff)->bool{",
            "\t\t\treturn tot_sum - suff[1] + suff[0] > x;",
            "\t\t};",
            "\t\tdo{",
            "\t\t\t-- qr;",
            "\t\t\twhile(qr > 1 && qr & 1) qr >>= 1;",
            "\t\t\tif(!pred(_TT(_seg[qr], suff))){",
            "\t\t\t\twhile(qr < _size){",
            "\t\t\t\t\tqr = qr << 1 | 1;",
            "\t\t\t\t\tif(pred(_TT(_seg[qr], suff))) suff = _TT(_seg[qr --], suff);",
            "\t\t\t\t}",
            "\t\t\t\treturn qr + 1 - _size;",
            "\t\t\t}",
            "\t\t\tsuff = _TT(_seg[qr], suff);",
            "\t\t}while((qr & -qr) != qr);",
            "\t\tassert(false);",
            "\t}",
            "\tvector<int> _used;",
            "\t// Assumes x has never been inserted before",
            "\t// Amortized O(log(n))",
            "\tvoid extend(const T &x){",
            "\t\tassert(n < capacity);",
            "\t\tassert(0 <= x && x < capacity && !_used[x]);",
            "\t\t_used[x] = true;",
            "\t\t_update(0, -1), _update((int)root.size(), 1);",
            "\t\twhile(!_min_stack.empty() && _min_stack.back().first > x){",
            "\t\t\tauto [px, r] = _min_stack.back();",
            "\t\t\t_min_stack.pop_back();",
            "\t\t\t_update(_min_stack.empty() ? 0 : _min_stack.back().second + 1, px - x);",
            "\t\t\t_update(r + 1, x - px);",
            "\t\t}",
            "\t\t_min_stack.push_back({x, (int)root.size()});",
            "\t\twhile(!_max_stack.empty() && _max_stack.back().first < x){",
            "\t\t\tauto [px, r] = _max_stack.back();",
            "\t\t\t_max_stack.pop_back();",
            "\t\t\t_update(_max_stack.empty() ? 0 : _max_stack.back().second + 1, x - px);",
            "\t\t\t_update(r + 1, px - x);",
            "\t\t}",
            "\t\t_max_stack.push_back({x, (int)root.size()});",
            "\t\tint u = _new_node(0, {n, n + 1}, {x, x + 1});",
            "\t\twhile(!root.empty()){",
            "\t\t\tint v = root.back();",
            "\t\t\tif(type[v] == 2 && value_range[v][1] == value_range[u][0]){",
            "\t\t\t\tadj[v].push_back(u);",
            "\t\t\t\tindex_range[v][1] = n + 1;",
            "\t\t\t\tvalue_range[v][1] = value_range[u][1];",
            "\t\t\t\tu = v;",
            "\t\t\t\troot.pop_back();",
            "\t\t\t}",
            "\t\t\telse if(type[root.back()] == 3 && value_range[u][1] == value_range[v][0]){",
            "\t\t\t\tadj[v].push_back(u);",
            "\t\t\t\tindex_range[v][1] = n + 1;",
            "\t\t\t\tvalue_range[v][0] = value_range[u][0];",
            "\t\t\t\tu = v;",
            "\t\t\t\troot.pop_back();",
            "\t\t\t}",
            "\t\t\telse if(T minval = _query(0, (int)root.size()); !minval){",
            "\t\t\t\tint i = min((int)root.size() - 1, _locate(minval) - 1);",
            "\t\t\t\tif(i == (int)root.size() - 1){",
            "\t\t\t\t\tint w = _new_node(2 + (value_range[v][0] > value_range[u][0]), {index_range[v][0], n + 1}, {min(value_range[v][0], value_range[u][0]), max(value_range[v][1], value_range[u][1])});",
            "\t\t\t\t\tadj[w] = {v, u};",
            "\t\t\t\t\tu = w;",
            "\t\t\t\t\troot.pop_back();",
            "\t\t\t\t}",
            "\t\t\t\telse{",
            "\t\t\t\t\tint w = _new_node(1, {index_range[root[i]][0], n + 1}, accumulate(root.begin() + i, root.end(), value_range[u], [&](const array<T, 2> &val, int u){ return array{min(val[0], value_range[u][0]), max(val[1], value_range[u][1])}; }));",
            "\t\t\t\t\tadj[w] = {root.begin() + i, root.end()};",
            "\t\t\t\t\tadj[w].push_back(u);",
            "\t\t\t\t\tu = w;",
            "\t\t\t\t\troot.resize(i);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\telse break;",
            "\t\t}",
            "\t\troot.push_back(u);",
            "\t\tT last = -1;",
            "\t\twhile(!_min_stack.empty() && (int)root.size() <= _min_stack.back().second){",
            "\t\t\tlast = _min_stack.back().first;",
            "\t\t\t_min_stack.pop_back();",
            "\t\t}",
            "\t\tif(~last) _min_stack.push_back({last, (int)root.size() - 1});",
            "\t\tlast = -1;",
            "\t\twhile(!_max_stack.empty() && (int)root.size() <= _max_stack.back().second){",
            "\t\t\tlast = _max_stack.back().first;",
            "\t\t\t_max_stack.pop_back();",
            "\t\t}",
            "\t\tif(~last) _max_stack.push_back({last, (int)root.size() - 1});",
            "\t\tT delta = (value_range[u][1] - value_range[u][0]) - (index_range[u][1] - index_range[u][0]) - _sum(0, (int)root.size());",
            "\t\t_update((int)root.size() - 1, delta);",
            "\t\t_update((int)root.size(), -delta);",
            "\t\t++ n;",
            "\t}",
            "\tvoid extend(const vector<T> &a){",
            "\t\tfor(auto x: a) extend(x);",
            "\t}",
            "\tvoid init(int capacity){",
            "\t\tassert(capacity >= 0);",
            "\t\tn = 0;",
            "\t\ttype.clear();",
            "\t\tindex_range.clear();",
            "\t\tvalue_range.clear();",
            "\t\tadj.clear();",
            "\t\troot.clear();",
            "\t\t_min_stack.clear();",
            "\t\t_max_stack.clear();",
            "\t\tthis->capacity = capacity;",
            "\t\t_size = 1;",
            "\t\twhile(_size < capacity) _size <<= 1;",
            "\t\t_log = __lg(_size);",
            "\t\t_seg.assign(_size << 1, array{0, 0});",
            "\t\t_used.assign(capacity, false);",
            "\t}",
            "\tint size() const{",
            "\t\treturn (int)type.size();",
            "\t}",
            "\tcut_join_tree(){ }",
            "\tcut_join_tree(const vector<T> &a){",
            "\t\tinit((int)a.size());",
            "\t\textend(a);",
            "\t}",
            "\tint n = 0, capacity;",
            "\t// 0: leaf, 1: cut, 2: join(increasing), 3: join(decreasing)",
            "\tvector<int> type;",
            "\t// index range of a node u",
            "\tvector<array<int, 2>> index_range;",
            "\t// value range of a node u",
            "\tvector<array<T, 2>> value_range;",
            "\t// childs of a node u",
            "\tvector<vector<int>> adj;",
            "\t// set of root of the forest",
            "\tvector<int> root;",
            "};"
        ],
        "description": "tranxuanbach"
    }
}