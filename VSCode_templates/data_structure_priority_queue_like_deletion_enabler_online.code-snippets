{
    "tranxuanbach": {
        "prefix": "data_structure_priority_queue_like_deletion_enabler_online",
        "body": [
            "// For a commutative data structure supporting update, where each update has an associated priority,",
            "// support deletion of update with lowest priority online.",
            "// Assumes that no two priorities are equal at any moment.",
            "// Source: https://codeforces.com/blog/entry/111117",
            "template<class P, class I, class S, class R, class Compare = less<>>",
            "struct data_structure_priority_queue_like_deletion_enabler_online{",
            "\tint n; // Elements should lie in range [0, n).",
            "\tI insert; // insert(i): insert the i-th update.",
            "\tS state; // state(): return the state of the DS as an integer.",
            "\tR reverse_to; // reverse_to(s): reverse the state of the DS to s.",
            "\tvector<int> stack, log;",
            "\tmap<P, int, Compare> order;",
            "\tdata_structure_priority_queue_like_deletion_enabler_online(int n, P _type_deducer, I insert, S state, R reverse_to, Compare cmp = less<>()): n(n), was(n), insert(insert), state(state), reverse_to(reverse_to), log({state()}), order(cmp){",
            "\t\tassert(n >= 0);",
            "\t}",
            "\tvoid clear(){",
            "\t\tstack.clear();",
            "\t\tlog.resize(1);",
            "\t\treverse_to(log.back());",
            "\t\torder.clear();",
            "\t}",
            "\tint iter = 0;",
            "\tvector<int> was, popped, top;",
            "\t// Amortized O(log(qn)) insert() and state() calls, and O(1) reverse_to() calls.",
            "\tint pop(){",
            "\t\tassert(!stack.empty());",
            "\t\t++ iter;",
            "\t\tint qn = (int)stack.size(), ipop = -1;",
            "\t\tauto it = order.begin();",
            "\t\tfor(auto pick = 1, cnt = 0; ; ++ pick){",
            "\t\t\tassert(pick <= qn);",
            "\t\t\tint i = stack.back();",
            "\t\t\tstack.pop_back();",
            "\t\t\tpopped.push_back(i);",
            "\t\t\twas[i] = iter;",
            "\t\t\twhile(it != order.end() && was[it->second] == iter) ++ it, ++ cnt;",
            "\t\t\tif(2 * cnt < pick) continue;",
            "\t\t\tlog.resize((int)stack.size() + 1);",
            "\t\t\treverse_to(log.back());",
            "\t\t\t++ iter;",
            "\t\t\tit = order.begin();",
            "\t\t\tfor(auto rep = pick + 1 >> 1; rep; -- rep, ++ it){",
            "\t\t\t\tint i = it->second;",
            "\t\t\t\ttop.push_back(i);",
            "\t\t\t\twas[i] = iter;",
            "\t\t\t}",
            "\t\t\tipop = order.begin()->second;",
            "\t\t\torder.erase(order.begin());",
            "\t\t\ttop.erase(top.begin());",
            "\t\t\twhile(!popped.empty()){",
            "\t\t\t\tint i = popped.back();",
            "\t\t\t\tpopped.pop_back();",
            "\t\t\t\tif(was[i] == iter) continue;",
            "\t\t\t\tstack.push_back(i);",
            "\t\t\t\tinsert(i);",
            "\t\t\t\tlog.push_back(state());",
            "\t\t\t}",
            "\t\t\twhile(!top.empty()){",
            "\t\t\t\tint i = top.back();",
            "\t\t\t\ttop.pop_back();",
            "\t\t\t\tstack.push_back(i);",
            "\t\t\t\tinsert(i);",
            "\t\t\t\tlog.push_back(state());",
            "\t\t\t}",
            "\t\t\tbreak;",
            "\t\t}",
            "\t\tassert(~ipop);",
            "\t\treturn ipop;",
            "\t}",
            "\tvoid push(int i, const P &p){",
            "\t\tassert(0 <= i && i < n);",
            "\t\tstack.push_back(i);",
            "\t\tassert(order.insert({p, i}).second);",
            "\t\tinsert(i);",
            "\t\tlog.push_back(state());",
            "\t}",
            "\tfriend ostream &operator<<(ostream &out, const data_structure_priority_queue_like_deletion_enabler_online &enabler){",
            "\t\tout << \"{\";",
            "\t\tfor(auto i = 0; i < (int)enabler.stack.size(); ++ i){",
            "\t\t\tout << enabler.stack[i];",
            "\t\t\tif(i < (int)enabler.stack.size() - 1) out << \", \";",
            "\t\t}",
            "\t\treturn out << \"}\";",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}