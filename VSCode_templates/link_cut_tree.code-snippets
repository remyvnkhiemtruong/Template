{
    "tranxuanbach": {
        "prefix": "link_cut_tree",
        "body": [
            "template<class node>",
            "struct link_cut_tree{",
            "\tbool connected(int u, int v){",
            "\t\treturn connected(&data[u], &data[v]);",
            "\t}",
            "\tbool connected(node *u, node *v){",
            "\t\treturn lca(u, v) != NULL;",
            "\t}",
            "\tint depth(int u){",
            "\t\treturn depth(&data[u]);",
            "\t}",
            "\tint depth(node *u){",
            "\t\taccess(u);",
            "\t\treturn size(u->ch[0]);",
            "\t}",
            "\tint root(int u){",
            "\t\treturn root(&data[u]) - &data[0];",
            "\t}",
            "\tnode *root(node *u){",
            "\t\taccess(u);",
            "\t\twhile(u->ch[0]) u = u->ch[0], u->push();",
            "\t\treturn access(u), u;",
            "\t}",
            "\t// Returns the k-th parent on path to root",
            "\tint ancestor(int u, int k){",
            "\t\treturn ancestor(&data[u], k) - &data[0];",
            "\t}",
            "\tnode *ancestor(node *u, int k){",
            "\t\tk = depth(u) - k;",
            "\t\tassert(k >= 0);",
            "\t\tfor(; ; u->push()){",
            "\t\t\tint _size = size(u->ch[0]);",
            "\t\t\tif(_size == k) return access(u), u;",
            "\t\t\tif(_size < k) k -= _size + 1, u = u->ch[1];",
            "\t\t\telse u = u->ch[0];",
            "\t\t}",
            "\t\tassert(0);",
            "\t}",
            "\tint lca(int u, int v){",
            "\t\treturn lca(&data[u], &data[v]) - &data[0];",
            "\t}",
            "\tnode *lca(node *u, node *v){",
            "\t\tif(u == v) return u;",
            "\t\taccess(u), access(v);",
            "\t\tif(!u->p) return NULL;",
            "\t\tu->splay();",
            "\t\treturn u->p ?: u;",
            "\t}",
            "\t// Make u the parent of v",
            "\tvoid link(int u, int v){",
            "\t\tlink(&data[u], &data[v]);",
            "\t}",
            "\tvoid link(node *u, node *v){",
            "\t\tassert(!connected(u, v));",
            "\t\tmake_root(v);",
            "\t\taccess(u);",
            "\t\tset_link(v, u, 0);",
            "\t\tv->refresh();",
            "\t}",
            "\t// Cut u from its parent",
            "\tvoid cut(int u){",
            "\t\tcut(&data[u]);",
            "\t}",
            "\tvoid cut(node *u){",
            "\t\taccess(u);",
            "\t\tu->ch[0]->p = NULL;",
            "\t\tu->ch[0] = NULL;",
            "\t\tu->refresh();",
            "\t}",
            "\t// Assumes u, v are adjacent in tree",
            "\tvoid cut(int u, int v){",
            "\t\tcut(&data[u], &data[v]);",
            "\t}",
            "\tvoid cut(node *u, node *v){",
            "\t\tcut(depth(u) > depth(v) ? u : v);",
            "\t}",
            "\t// Make u root of LCT component",
            "\tvoid make_root(int u){",
            "\t\tmake_root(&data[u]);",
            "\t}",
            "\tvoid make_root(node *u){",
            "\t\taccess(u);",
            "\t\tu->reverse();",
            "\t\taccess(u);",
            "\t\tassert(!u->ch[0] && !u->ch[1]);",
            "\t}",
            "\t// Put u on the preferred path then splay it (right subtree is empty)",
            "\tvoid access(int u){",
            "\t\taccess(&data[u]);",
            "\t}",
            "\tvoid access(node *u){",
            "\t\tfor(node *v = u, *pre = NULL; v; v = v->p){",
            "\t\t\tv->splay(); // now refresh virtual children",
            "\t\t\t/*if(pre) v->template refresh_virtual<false>(pre);",
            "\t\t\tif(v->ch[1]) v->template refresh_virtual<true>(v->ch[1]);*/",
            "\t\t\tv->ch[1] = pre;",
            "\t\t\tv->refresh();",
            "\t\t\tpre = v;",
            "\t\t}",
            "\t\tu->splay();",
            "\t\tassert(!u->ch[1]);",
            "\t}",
            "\tnode *operator[](int i){",
            "\t\treturn &data[i];",
            "\t}",
            "\tint operator[](node *u){",
            "\t\treturn u - &data[0];",
            "\t}",
            "\tvector<node> data;",
            "\tlink_cut_tree(int n): data(n){ }",
            "};",
            "template<class ptr>",
            "struct splay_tree{",
            "\tptr ch[2] = {}, p = {};",
            "\tbool rev = false;",
            "\tint _size = 1;",
            "\tsplay_tree(){ }",
            "\tfriend int size(ptr u){",
            "\t\treturn u ? u->_size : 0;",
            "\t}",
            "\tvirtual void refresh(){",
            "\t\t_size = 1 + size(ch[0]) + size(ch[1]);",
            "\t}",
            "\tvirtual void push(){",
            "\t\tif(rev){",
            "\t\t\tif(ch[0]) ch[0]->reverse();",
            "\t\t\tif(ch[1]) ch[1]->reverse();",
            "\t\t\trev = false;",
            "\t\t}",
            "\t}",
            "\tvirtual void reverse(){",
            "\t\trev ^= true;",
            "\t\tswap(ch[0], ch[1]);",
            "\t}",
            "\tint dir(){",
            "\t\tif(!p) return -2; // root of LCT component",
            "\t\tif(p->ch[0] == this) return 0; // left child",
            "\t\tif(p->ch[1] == this) return 1; // right child",
            "\t\treturn -1; // root of current splay tree",
            "\t}",
            "\tbool is_root(){",
            "\t\treturn dir() < 0;",
            "\t}",
            "\tfriend void set_link(ptr u, ptr v, int d){",
            "\t\tif(v) v->p = u;",
            "\t\tif(d >= 0) u->ch[d] = v;",
            "\t}",
            "\t// Assumes p and p->p propagated",
            "\tvoid rotate(){",
            "\t\tassert(!is_root());",
            "\t\tint x = dir(); ptr g = p;",
            "\t\tset_link(g->p, static_cast<ptr>(this), g->dir());",
            "\t\tset_link(g, ch[x ^ 1], x);",
            "\t\tset_link(static_cast<ptr>(this), g, x ^ 1);",
            "\t\tg->refresh();",
            "\t}",
            "\t// Bring the node to the top",
            "\tvoid splay(){",
            "\t\twhile(!is_root() && !p->is_root()){",
            "\t\t\tp->p->push(), p->push(), push();",
            "\t\t\tdir() == p->dir() ? p->rotate() : rotate();",
            "\t\t\trotate();",
            "\t\t}",
            "\t\tif(!is_root()) p->push(), push(), rotate();",
            "\t\tpush();",
            "\t\trefresh();",
            "\t}",
            "};",
            "",
            "struct node: splay_tree<node *>{",
            "\tusing splay_tree::ch;",
            "\tint val = 0, id = -1;",
            "\tlong long aux_sum = 0;",
            "\tarray<int, 2> aux_max{0, -1};",
            "\tnode(): splay_tree(){ }",
            "\tvoid refresh() override{",
            "\t\tsplay_tree::refresh();",
            "\t\taux_sum = val;",
            "\t\taux_max = {val, id};",
            "\t\tif(ch[0]){",
            "\t\t\taux_sum += ch[0]->aux_sum;",
            "\t\t\tctmax(aux_max, ch[0]->aux_max);",
            "\t\t}",
            "\t\tif(ch[1]){",
            "\t\t\taux_sum += ch[1]->aux_sum;",
            "\t\t\tctmax(aux_max, ch[1]->aux_max);",
            "\t\t}",
            "\t}",
            "\tvoid apply(auto lazy){",
            "\t\t",
            "\t}",
            "\t/*template<bool add>",
            "\tvoid refresh_virtual(node* v){",
            "",
            "\t}",
            "\tvoid reverse() override{",
            "\t\tsplay_tree::reverse();",
            "",
            "\t}*/",
            "\t// Make sure push fix the node (don't call splay_tree::refresh)",
            "\tvoid push() override{",
            "\t\tsplay_tree::push();",
            "",
            "\t}",
            "};",
            "struct node: splay_tree<node *>{",
            "\tint size = 1; // includes itself, auxiliary subtrees, and virtual subtrees",
            "\tint virtual_size = 0; // includes virtual subtrees",
            "\tlong long val = 0;",
            "\tlong long subtr_sum = 0; // includes itself, auxiliary subtrees, and virutal subtrees",
            "\tlong long virtual_subtr_sum = 0; // includes virtual subtrees",
            "\tlong long auxiliary_lazy = 0;",
            "\tlong long virtual_lazy = 0;",
            "\tnode(){ }",
            "\t// there must be no lazy propagation",
            "\tvoid refresh() override{",
            "\t\tsplay_tree::refresh();",
            "\t\tassert(auxiliary_lazy == 0);",
            "\t\tsubtr_sum = val + virtual_subtr_sum;",
            "\t\tsize = 1 + virtual_size;",
            "\t\tfor(auto u: ch) if(u){",
            "\t\t\tsubtr_sum += u->subtr_sum;",
            "\t\t\tsize += u->size;",
            "\t\t}",
            "\t}",
            "\ttemplate<bool add>",
            "\tvoid refresh_virtual(node *u){",
            "\t\tif(!add) u->apply(virtual_lazy);",
            "\t\tvirtual_subtr_sum += (add ? 1 : -1) * u->subtr_sum;",
            "\t\tvirtual_size += (add ? 1 : -1) * u->size;",
            "\t\tif(add) u->apply(-virtual_lazy);",
            "\t}",
            "\tvoid push() override{",
            "\t\tsplay_tree::push();",
            "\t\tif(auxiliary_lazy){",
            "\t\t\tfor(auto u: ch) if(u) u->apply(auxiliary_lazy);",
            "\t\t\tauxiliary_lazy = 0;",
            "\t\t}",
            "\t}",
            "\tvoid reverse() override{",
            "\t\tsplay_tree::reverse();",
            "",
            "\t}",
            "\tvoid apply(long long lazy){",
            "\t\tval += lazy;",
            "\t\tsubtr_sum += lazy * size;",
            "\t\tvirtual_subtr_sum += lazy * virtual_size;",
            "\t\tauxiliary_lazy += lazy;",
            "\t\tvirtual_lazy += lazy;",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}