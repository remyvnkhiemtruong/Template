{
    "tranxuanbach": {
        "prefix": "sorted_range_sum_tracker",
        "body": [
            "// Partition the sorted elements according to capacity, and track the sum of each blocks.",
            "template<class T, class F, class I, class Compare>",
            "struct sorted_range_sum_tracker{",
            "\tint B;",
            "\tvector<T> sum;",
            "\tvector<multiset<T, Compare>> data;",
            "\tvector<int> capacity;",
            "\tF TT;",
            "\tT T_id;",
            "\tI Tinv;",
            "\tsorted_range_sum_tracker(int B, F TT, T T_id, I Tinv, Compare cmp): B(B), sum(B, T_id), data(B, multiset<T, Compare>{cmp}), capacity(B - 1), TT(TT), T_id(T_id), Tinv(Tinv){",
            "\t\tassert(B >= 2);",
            "\t}",
            "\tsorted_range_sum_tracker &operator=(const sorted_range_sum_tracker &srst){",
            "\t\tB = srst.B;",
            "\t\tsum = srst.sum;",
            "\t\tdata = srst.data;",
            "\t\tcapacity = srst.capacity;",
            "\t\treturn *this;",
            "\t}",
            "\t// O(size(a) * B * log(n))",
            "\tvoid insert(const vector<T> &a){",
            "\t\tfor(auto x: a) insert(x);",
            "\t}",
            "\t// O(B * log(n))",
            "\tvoid insert(T x){",
            "\t\tsum[0] = TT(sum[0], x);",
            "\t\tdata[0].insert(x);",
            "\t\tfor(auto i = 0; i < B - 1 && (int)data[i].size() > capacity[i]; ++ i){",
            "\t\t\tsum[i + 1] = TT(sum[i + 1], *data[i].rbegin());",
            "\t\t\tdata[i + 1].insert(data[i + 1].begin(), *data[i].rbegin());",
            "\t\t\tsum[i] = TT(sum[i], Tinv(*data[i].rbegin()));",
            "\t\t\tdata[i].erase(prev(data[i].end()));",
            "\t\t}",
            "\t}",
            "\t// O(B * log(n))",
            "\tvoid erase(T x){",
            "\t\tint i = 0;",
            "\t\twhile(i < B && data[i].find(x) == data[i].end()) ++ i;",
            "\t\tassert(i < B);",
            "\t\tdata[i].erase(data[i].find(x));",
            "\t\tsum[i] = TT(sum[i], Tinv(x));",
            "\t\tfor(; i < B - 1 && (int)data[i].size() < capacity[i] && !data[i + 1].empty(); ++ i){",
            "\t\t\tsum[i] = TT(sum[i], *data[i + 1].begin());",
            "\t\t\tdata[i].insert(data[i].end(), *data[i + 1].begin());",
            "\t\t\tsum[i + 1] = TT(sum[i + 1], Tinv(*data[i + 1].begin()));",
            "\t\t\tdata[i + 1].erase(data[i + 1].begin());",
            "\t\t}",
            "\t}",
            "\t// Set the capacity of the b-th block to c",
            "\t// O(abs(capacity[b] - c) * B * log(n))",
            "\tvoid set_capacity(int b, int c){",
            "\t\tassert(0 <= b && b < B - 1 && c >= 0);",
            "\t\tcapacity[b] = c;",
            "\t\twhile((int)data[b].size() < capacity[b] && !data[b + 1].empty()){",
            "\t\t\tfor(auto i = b; i < B - 1 && (int)data[i].size() < capacity[i] && !data[i + 1].empty(); ++ i){",
            "\t\t\t\tsum[i] = TT(sum[i], *data[i + 1].begin());",
            "\t\t\t\tdata[i].insert(data[i].end(), *data[i + 1].begin());",
            "\t\t\t\tsum[i + 1] = TT(sum[i + 1], Tinv(*data[i + 1].begin()));",
            "\t\t\t\tdata[i + 1].erase(data[i + 1].begin());",
            "\t\t\t}",
            "\t\t}",
            "\t\twhile((int)data[b].size() > capacity[b]){",
            "\t\t\tfor(auto i = b; i < B - 1 && (int)data[i].size() > capacity[i]; ++ i){",
            "\t\t\t\tsum[i + 1] = TT(sum[i + 1], *data[i].rbegin());",
            "\t\t\t\tdata[i + 1].insert(data[i + 1].begin(), *data[i].rbegin());",
            "\t\t\t\tsum[i] = TT(sum[i], Tinv(*data[i].rbegin()));",
            "\t\t\t\tdata[i].erase(prev(data[i].end()));",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tfriend ostream &operator<<(ostream &out, const sorted_range_sum_tracker &srst){",
            "\t\tout << \"{\\n\";",
            "\t\tfor(auto i = 0; i < srst.B; ++ i){",
            "\t\t\tout << \"sum = \" << srst.sum[i] << \", {\";",
            "\t\t\tfor(auto it = srst.data[i].begin(); it != srst.data[i].end(); ++ it){",
            "\t\t\t\tout << *it;",
            "\t\t\t\tif(next(it) != srst.data[i].end()) out << \", \";",
            "\t\t\t}",
            "\t\t\ti + 1 < srst.B ? out << \"},\\n\" : out << \"}\\n\";",
            "\t\t}",
            "\t\treturn out << \"}\\n\";",
            "\t}",
            "};",
            "",
            "template<class T, class F = plus<>, class I = negate<>, class Compare = less<>>",
            "auto make_sorted_range_sum_tracker(int B = 2, F TT = plus<>(), T T_id = 0, I Tinv = negate<>(), Compare cmp = less<>()){",
            "\treturn sorted_range_sum_tracker<T, F, I, Compare>(B, TT, T_id, Tinv);",
            "}"
        ],
        "description": "tranxuanbach"
    }
}