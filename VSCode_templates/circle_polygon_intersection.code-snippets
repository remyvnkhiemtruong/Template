{
    "tranxuanbach": {
        "prefix": "circle_polygon_intersection",
        "body": [
            "// Reads a circle and a CCW polygon, and returns their intersection area.",
            "// T must be of floating type",
            "// O(n)",
            "// Requires point",
            "template<class T>",
            "T circle_polygon_intersection(const point<T> &c, T r, const vector<point<T>> &a){",
            "\tauto arg = [&](const point<T> &p, const point<T> &q)->T{",
            "\t\treturn atan2(p ^ q, p * q);",
            "\t};",
            "\tauto f = [&](const point<T> &p, const point<T> &q)->T{",
            "\t\tT r2 = r * r / 2;",
            "\t\tauto d = q - p, b = d * p / (d * d), c = (p * p - r * r) / (d * d), det = b * b - c;",
            "\t\tif(det <= 0) return arg(p, q) * r2;",
            "\t\tauto s = max<T>(0, -b - sqrt(det)), t = min<T>(1, -b + sqrt(det));",
            "\t\tif(t < 0 || 1 <= s) return arg(p, q) * r2;",
            "\t\tauto u = p + d * s, v = p + d * t;",
            "\t\treturn arg(p, u) * r2 + (u ^ v) / 2 + arg(v, q) * r2;",
            "\t};",
            "\tT res = 0;",
            "\tfor(auto i = 0; i < (int)a.size(); ++ i) res += f(a[i] - c, a[(i + 1) % (int)a.size()] - c);",
            "\treturn res;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}