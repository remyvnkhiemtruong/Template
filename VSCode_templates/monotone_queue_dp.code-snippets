{
    "tranxuanbach": {
        "prefix": "monotone_queue_dp",
        "body": [
            "// Recurrence relation of form dp[i] = min/max{j in [0, i)} (dp[j] + cost(j, i))",
            "// dp[j][i] must be a Monge array ( if one interval contains the other, it's better to resolve them )",
            "// O(n log n)",
            "template<bool GET_MAX = true>",
            "vector<long long> monotone_queue_dp(int n, long long init, auto cost){",
            "\tvector<long long> dp(n, init);",
            "\tauto cross = [&](int i, int j){",
            "\t\tint l = j, r = n;",
            "\t\twhile(r - l > 1){",
            "\t\t\tint mid = l + r >> 1;",
            "\t\t\t(GET_MAX ? dp[i] + cost(i, mid) >= dp[j] + cost(j, mid) : dp[i] + cost(i, mid) <= dp[j] + cost(j, mid)) ? l = mid : r = mid;",
            "\t\t}",
            "\t\treturn l;",
            "\t};",
            "\tdeque<int> q{0};",
            "\tfor(auto i = 1; i < n; ++ i){",
            "\t\twhile(int(q.size()) > 1 && cross(*q.begin(), *next(q.begin())) < i) q.pop_front();",
            "\t\tdp[i] = dp[q.front()] + cost(q.front(), i);",
            "\t\twhile(int(q.size()) > 1 && cross(*next(q.rbegin()), *q.rbegin()) >= cross(*q.rbegin(), i)) q.pop_back();",
            "\t\tq.push_back(i);",
            "\t}",
            "\treturn dp;",
            "}"
        ],
        "description": "tranxuanbach"
    }
}