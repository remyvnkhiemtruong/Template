{
    "tranxuanbach": {
        "prefix": "dinic_maxflow",
        "body": [
            "template<class T>",
            "struct flow_network{",
            "\tstatic constexpr T eps = (T)1e-9;",
            "\tint n;",
            "\tvector<vector<int>> adj;",
            "\tstruct edge{",
            "\t\tint from, to;",
            "\t\tT capacity, flow;",
            "\t};",
            "\tvector<edge> edges;",
            "\tint source, sink;",
            "\tT flow = 0;",
            "\tflow_network(int n, int source, int sink): n(n), source(source), sink(sink), adj(n){ }",
            "\tvoid clear_flow(){",
            "\t\tfor(auto &e: edges) e.flow = 0;",
            "\t\tflow = 0;",
            "\t}",
            "\tint insert(int from, int to, T forward_cap, T backward_cap){",
            "\t\tint ind = (int)edges.size();",
            "\t\tadj[from].push_back(ind);",
            "\t\tedges.push_back({from, to, forward_cap, 0});",
            "\t\tadj[to].push_back(ind + 1);",
            "\t\tedges.push_back({to, from, backward_cap, 0});",
            "\t\treturn ind;",
            "\t}",
            "\tvoid add_flow(int i, T f){",
            "\t\tedges[i].flow += f;",
            "\t\tedges[i ^ 1].flow -= f;",
            "\t}",
            "};",
            "template<class T>",
            "struct dinic{",
            "\tstatic constexpr T inf = numeric_limits<T>::max();",
            "\tflow_network<T> &g;",
            "\tvector<int> ptr, level, q;",
            "\tdinic(flow_network<T> &g): g(g), ptr(g.n), level(g.n), q(g.n){ }",
            "\tbool bfs(){",
            "\t\tfill(level.begin(), level.end(), -1);",
            "\t\tq[0] = g.sink;",
            "\t\tlevel[g.sink] = 0;",
            "\t\tint beg = 0, end = 1;",
            "\t\twhile(beg < end){",
            "\t\t\tint i = q[beg ++];",
            "\t\t\tfor(auto ind: g.adj[i]){",
            "\t\t\t\tauto &e = g.edges[ind];",
            "\t\t\t\tauto &re = g.edges[ind ^ 1];",
            "\t\t\t\tif(re.capacity - re.flow > g.eps && level[e.to] == -1){",
            "\t\t\t\t\tlevel[e.to] = level[i] + 1;",
            "\t\t\t\t\tif(e.to == g.source) return true;",
            "\t\t\t\t\tq[end ++] = e.to;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn false;",
            "\t}",
            "\tT dfs(int u, T w){",
            "\t\tif(u == g.sink) return w;",
            "\t\tint &j = ptr[u];",
            "\t\twhile(j >= 0){",
            "\t\t\tint ind = g.adj[u][j];",
            "\t\t\tauto &e = g.edges[ind];",
            "\t\t\tif(e.capacity - e.flow > g.eps && level[e.to] == level[u] - 1){",
            "\t\t\t\tT F = dfs(e.to, min(e.capacity - e.flow, w));",
            "\t\t\t\tif(F > g.eps){",
            "\t\t\t\t\tg.add_flow(ind, F);",
            "\t\t\t\t\treturn F;",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t\t-- j;",
            "\t\t}",
            "\t\treturn 0;",
            "\t}",
            "\tT max_flow(){ // O(V^2 E) ( O(E min(V^2/3, E^1/2)) for unit network )",
            "\t\twhile(bfs()){",
            "\t\t\tfor(int i = 0; i < g.n; ++ i) ptr[i] = (int)g.adj[i].size() - 1;",
            "\t\t\tT sum = 0;",
            "\t\t\twhile(1){",
            "\t\t\t\tT add = dfs(g.source, inf);",
            "\t\t\t\tif(add <= g.eps) break;",
            "\t\t\t\tsum += add;",
            "\t\t\t}",
            "\t\t\tif(sum <= g.eps) break;",
            "\t\t\tg.flow += sum;",
            "\t\t}",
            "\t\treturn g.flow;",
            "\t}",
            "\tpair<T, vector<bool>> min_cut(){",
            "\t\tT cut = max_flow();",
            "\t\tvector<bool> res(g.n);",
            "\t\tfor(int i = 0; i < g.n; ++ i) res[i] = (level[i] != -1);",
            "\t\treturn {cut, res};",
            "\t}",
            "};"
        ],
        "description": "tranxuanbach"
    }
}