<snippet>
	<content><![CDATA[
template<typename V> // V must be an integral type where its bitmask represents a vector
struct Z2_basis_small{ // Keep track of a set of basis of the subspace spanned by the inserted vectors
	int rank(){
		return (int)elements.size();
	}
	V reduce(V v){ // O(bit_length)
		for(int i = 0; i < rank(); ++ i) if((v ^ elements[i]) < v){
			v ^= elements[i];
			log.push_back({0, i, count});
		}
		return v;
	}
	bool insert(V v){ // insert a vector while maintaining the lower triangular form
		v = reduce(v);
		if(!v) return ++ count, false;
		int p = __lg(v);
		for(int i = 0; i < rank(); ++ i) if(elements[i] & (V)1 << p){
			elements[i] ^= v;
			log.push_back({0, count, i});
		}
		int t = lower_bound(trail.begin(), trail.end(), p) - trail.begin();
		trail.insert(trail.begin() + t, p);
		elements.insert(elements.begin() + t, v);
		log.push_back({2, count, t});
		return ++ count, true;
	}
	template<bool find_basis = false>
	pair<bool, vector<V>> solve(vector<bool> b){ // O(dim^2); returns {false, {}} / {true, {one_of_sol, sol_basis}}
		assert(count == (int)b.size());
		for(auto &m: log){
			if(m.type == 0) b[m.to] ^= b[m.from];
			else rotate(b.begin() + m.to, b.begin() + m.from, b.begin() + m.from + 1);
		}
		for(int i = rank(); i < count; ++ i) if(b[i]) return {};
		vector<V> res({0});
		V is_free = -1;
		for(int i = 0; i < rank(); ++ i) res[0] |= (V)b[i] << trail[i], is_free ^= (V)1 << trail[i];
		if(find_basis) for(int j = 0; j <= __lg(numeric_limits<V>::max()); ++ j) if(is_free & (V)1 << j){
			V v = (V)1 << j;
			for(int i = rank() - 1; i >= 0 && trail[i] > j; -- i) v |= elements[i] & (V)1 << trail[i];
			res.push_back(v);
		}
		return {true, res};
	}
	int count = 0;
	vector<V> elements;
	vector<int> trail; // trailing coordinates of each elements
	struct modifier_type{
		int type; // 0: row[to] ^= row[from], 2: insert row[from] into row[to]
		int from, to;
	};
	vector<modifier_type> log;
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Z2_basis_small</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
