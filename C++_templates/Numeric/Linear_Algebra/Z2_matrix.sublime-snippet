<snippet>
	<content><![CDATA[
template<int SZ>
struct Z2_matrix: vector<bitset<SZ>>{
	using C = vector<bitset<SZ>>;
	using C::assign;
	Z2_matrix &operator+=(const Z2_matrix &M){
		assert(n == M.n && m == M.m);
		for(int i = 0; i < n; ++ i) (*this)[i] ^= M[i];
		return *this;
	}
	Z2_matrix operator+(const Z2_matrix &M) const{
		Z2_matrix res(n, m); res += M;
		return res;
	}
	Z2_matrix operator*(const Z2_matrix &otr) const{
		assert(m == otr.n);
		int l = otr.m;
		Z2_matrix res(n, l);
		vector<bitset<SZ>> temp(l);
		for(int i = 0; i < l; ++ i) for(int j = 0; j < m; ++ j) temp[i][j] = otr[j][i];
		for(int i = 0; i < n; ++ i) for(int j = 0; j < l; ++ j) res[i][j] = ((*this)[i] & temp[j]).count() & 1;
		return res;
	}
	Z2_matrix &operator*=(const Z2_matrix &otr){
		return *this = *this * otr;
	}
	Z2_matrix &operator*=(bool c){
		if(c) for(int i = 0; i < n; ++ i) (*this)[i].flip();
		return *this;
	}
	Z2_matrix operator*(bool c) const{
		Z2_matrix res(*this); res *= c;
		return res;
	}
	Z2_matrix &operator^=(long long e){
		Z2_matrix res(n, n, true);
		for(; e; *this *= *this, e >>= 1) if(e & 1) res *= *this;
		return *this = res;
	}
	Z2_matrix operator^(long long e) const{
		assert(n == m);
		Z2_matrix res(*this); res ^= e;
		return res;
	}
	bool det() const{
		assert(n == m);
		Z2_matrix temp(*this);
		for(int i = 0; i < n; ++ i){
			for(int j = i + 1; j < n; ++ j) if(temp[j][i]){
				if(temp[i][i]) temp[j] ^= temp[i];
				else swap(temp[i], temp[j]);
			}
			if(!temp[i][i]) return false;
		}
		return true;
	}
	int n, m;
	Z2_matrix(int n, int m, bool init_diagonal = false, bool init_off_diagonal = false): n(n), m(m){
		assign(n, {});
		for(int i = 0; i < n; ++ i) for(int j = 0; j < m; ++ j) (*this)[i][j] = i == j ? init_diagonal : init_off_diagonal;
	}
	Z2_matrix(const C &arr): n((int)arr.size()), m((int)arr[0].size()){
		assign(n, {});
		for(int i = 0; i < n; ++ i) for(int j = 0; j < m; ++ j) (*this)[i][j] = arr[i][j];
	}
};
template<size_t SZ>
Z2_matrix<SZ> operator*(bool c, Z2_matrix<SZ> M){
	if(c) for(int i = 0; i < M.n; ++ i) M[i].flip();
	return M;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Z2_matrix</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
