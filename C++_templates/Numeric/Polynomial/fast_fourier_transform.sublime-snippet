<snippet>
	<content><![CDATA[
void fast_fourier_transform(vector<complex<double>> &a, const bool invert = false){ // O(n log n)
	int n = (int)a.size();
	for(int i = 1, j = 0; i < n; ++ i){
		int bit = n >> 1;
		for(; j & bit; bit >>= 1) j ^= bit;
		j ^= bit;
		if(i < j) swap(a[i], a[j]);
	}
	for(int len = 1; len < n; len <<= 1){
		double theta = acos(-1) / len * (invert ? -1 : 1);
		complex<double> w(cos(theta), sin(theta));
		for(int i = 0; i < n; i += len << 1){
			complex<double> wj(1);
			for(int j = 0; j < len; ++ j, wj *= w){
				complex<double> u = a[i + j], v = wj * a[i + j + len];
				a[i + j] = u + v, a[i + j + len] = u - v;
			}
		}
	}
	if(invert){
		double inv_n = 1.0 / n;
		for(auto &x: a) x *= inv_n;
	}
}
template<class T>
vector<T> convolute(const vector<T> &p, const vector<T> &q){
	if(min(p.size(), q.size()) < 250){
		vector<T> res((int)p.size() + (int)q.size() - 1);
		for(size_t i = 0; i < p.size(); ++ i) for(size_t j = 0; j < q.size(); ++ j) res[i + j] += p[i] * q[j];
		return res;
	}
	vector<complex<double>> f(p.begin(), p.end()), g(q.begin(), q.end());
	int m = max(int(p.size()) + int(q.size()) - 1, 1), n = m;
	if(__builtin_popcount(n) != 1) n = 1 << __lg(n) + 1;
	f.resize(n), g.resize(n);
	fast_fourier_transform(f), fast_fourier_transform(g);
	for(int i = 0; i < n; ++ i) f[i] *= g[i];
	fast_fourier_transform(f, true);
	vector<T> res(m);
	for(int i = 0; i < m; ++ i) res[i] = round(f[i].real());
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fast_fourier_transform</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
