<snippet>
	<content><![CDATA[
// Requires modular
template<class T, int root = 15311432, int root_pw = 1 << 23, int inv_root = 469870224>
void number_theoric_transform(vector<T> &a, const bool invert = false){
	int n = (int)a.size();
	for(int i = 1, j = 0; i < n; ++ i){
		int bit = n >> 1;
		for(; j & bit; bit >>= 1) j ^= bit;
		j ^= bit;
		if(i < j) swap(a[i], a[j]);
	}
	for(int len = 1; len < n; len <<= 1){
		T wlen = invert ? inv_root : root;
		for(int i = len << 1; i < root_pw; i <<= 1) wlen *= wlen;
		for(int i = 0; i < n; i += len << 1){
			T w = 1;
			for(int j = 0; j < len; ++ j, w *= wlen){
				T u = a[i + j], v = a[i + j + len] * w;
				a[i + j] = u + v, a[i + j + len] = u - v;
			}
		}
	}
	if(invert){
		T inv_n = T(1) / n;
		for(auto &x: a) x *= inv_n;
	}
} // NTTmod: 998244353(2^23*7*17,3),754974721(2^24*3^2*5,11),469762049(2^26*7,3),167772161(2^25*5,3)
template<class T>
vector<T> convolute(vector<T> p, vector<T> q){
	if(min(p.size(), q.size()) < 60){
		vector<T> res((int)p.size() + (int)q.size() - 1);
		for(size_t i = 0; i < p.size(); ++ i) for(size_t j = 0; j < q.size(); ++ j) res[i + j] += p[i] * q[j];
		return res;
	}
	int m = max((int)p.size() + (int)q.size() - 1, 1), n = m;
	if(__builtin_popcount(n) != 1) n = 1 << __lg(n) + 1;
	p.resize(n), q.resize(n);
	number_theoric_transform(p), number_theoric_transform(q);
	for(int i = 0; i < n; ++ i) p[i] *= q[i];
	number_theoric_transform(p, true);
	p.resize(m);
	return p;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>number_theoric_transform</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
