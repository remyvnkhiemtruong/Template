<snippet>
	<content><![CDATA[
typedef unsigned long long ull;
typedef long double ld;
ull mod_mul(ull a, ull b, ull M) {
	long long res = a * b - M * ull(ld(a) * ld(b) / ld(M));
	return res + M * (res < 0) - M * (res >= (long long)M);
}
ull mod_pow(ull b, ull e, ull mod) {
	ull res = 1;
	for (; e; b = mod_mul(b, b, mod), e /= 2) if (e & 1) res = mod_mul(res, b, mod);
	return res;
}
bool isprime(ull n){
	if(n < 2 || n % 6 % 4 != 1) return n - 2 < 2;
	vector<ull> A{2, 325, 9375, 28178, 450775, 9780504, 1795265022};
	ull s = __builtin_ctzll(n - 1), d = n >> s;
	for(auto &a: A){
		ull p = mod_pow(a, d, n), i = s;
		while(p != 1 && p != n - 1 && a % n && i --) p = mod_mul(p, p, n);
		if(p != n - 1 && i != s) return 0;
	}
	return 1;
}
ull pfactor(ull n){ // 7 times slower than a^b mod m
	auto f = [n](ull x){ return (mod_mul(x, x, n) + 1) % n; };
	if(!(n & 1)) return 2;
	for(ull i = 2; ; ++ i){
		ull x = i, y = f(x), p;
		while((p = gcd(n + y - x, n)) == 1) x = f(x), y = f(f(y));
		if(p != n) return p;
	}
}
vector<ull> factorize(ull n){ // O(n^{1/4}) gcd calls
	if(n == 1) return {};
	if(isprime(n)) return {n};
	ull x = pfactor(n);
	auto l = factorize(x), r = factorize(n / x);
	l.insert(l.end(), r.begin(), r.end());
	return l;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>pollard_rho</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
