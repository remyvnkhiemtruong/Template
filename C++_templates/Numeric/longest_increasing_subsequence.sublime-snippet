<snippet>
	<content><![CDATA[
template<class T>
vector<int> longest_increasing_subsequence(const vector<T> &a){ // O(n log n), returns the indices
	int n = int(a.size());
	if(!n) return {};
	vector<int> prev(n);
	typedef pair<T, int> p;
	vector<p> active;
	for(int i = 0; i < n; ++ i){
		// change 0 -> i for longest non-decreasing subsequence
		auto it = lower_bound(active.begin(), active.end(), p{a[i], 0});
		if(it == active.end()) active.emplace_back(), it = prev(active.end());
		*it = {a[i], i};
		prev[i] = it == active.begin() ? 0 : prev(it)->second;
	}
	int L = int(active.size()), cur = active.back().second;
	vector<int> res(L);
	while(L --) res[L] = cur, cur = prev[cur];
	return res;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>longest_increasing_subsequence</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
