<snippet>
	<content><![CDATA[
// Requires modular
template<int root = 15311432, int root_pw = 1 << 23, int inv_root = 469870224, typename IT = vector<Zp>::iterator>
void number_theoric_transform(IT begin, IT end, const bool invert = false){
	int n = end - begin;
	for(int i = 1, j = 0; i < n; ++ i){
		int bit = n >> 1;
		for(; j & bit; bit >>= 1) j ^= bit;
		j ^= bit;
		if(i < j) swap(*(begin + i), *(begin + j));
	}
	for(int len = 1; len < n; len <<= 1){
		typename iterator_traits<IT>::value_type wlen = invert ? inv_root : root;
		for(int i = len << 1; i < root_pw; i <<= 1) wlen *= wlen;
		for(int i = 0; i < n; i += len << 1){
			typename iterator_traits<IT>::value_type w = 1;
			for(int j = 0; j < len; ++ j){
				auto u = *(begin + i + j), v = *(begin + i + j + len) * w;
				*(begin + i + j) = u + v;
				*(begin + i + j + len) = u - v;
				w *= wlen;
			}
		}
	}
	if(invert){
		auto inv_n = typename iterator_traits<IT>::value_type(1) / n;
		for(auto it = begin; it != end; ++ it) *it *= inv_n;
	}
}
const size_t magic_constant = 250;
template<typename Poly>
void multiply(Poly &a, Poly b){
	if(min(a.size(), b.size()) < magic_constant){
		Poly res((int)a.size() + (int)b.size() - 1);
		for(size_t i = 0; i < a.size(); ++ i) for(size_t j = 0; j < b.size(); ++ j) res[i + j] += a[i] * b[j];
		a = move(res);
		return;
	}
	int n = max((int)a.size() + (int)b.size() - 1, 1);
	if(__builtin_popcount(n) != 1) n = 1 << __lg(n) + 1;
	a.resize(n), b.resize(n);
	number_theoric_transform(a.begin(), a.end()), number_theoric_transform(b.begin(), b.end());
	for(int i = 0; i < n; ++ i) a[i] *= b[i];
	number_theoric_transform(a.begin(), a.end(), 1);
	while(!a.empty() && !a.back()) a.pop_back();
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>number_theoric_transform</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope> -->
</snippet>
